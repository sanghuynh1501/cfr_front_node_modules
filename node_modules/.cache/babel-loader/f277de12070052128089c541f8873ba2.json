{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar easeFunctions = exports.easeFunctions = {\n  linear: function linear(t) {\n    return t;\n  },\n  easeInQuad: function easeInQuad(t) {\n    return t * t;\n  },\n  easeOutQuad: function easeOutQuad(t) {\n    return t * (2 - t);\n  },\n  easeInOutQuad: function easeInOutQuad(t) {\n    return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n  easeInCubic: function easeInCubic(t) {\n    return t * t * t;\n  },\n  easeOutCubic: function easeOutCubic(t) {\n    return --t * t * t + 1;\n  },\n  easeInOutCubic: function easeInOutCubic(t) {\n    return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n  },\n  easeInQuart: function easeInQuart(t) {\n    return t * t * t * t;\n  },\n  easeOutQuart: function easeOutQuart(t) {\n    return 1 - --t * t * t * t;\n  },\n  easeInOutQuart: function easeInOutQuart(t) {\n    return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n  },\n  easeInQuint: function easeInQuint(t) {\n    return t * t * t * t * t;\n  },\n  easeOutQuint: function easeOutQuint(t) {\n    return 1 + --t * t * t * t * t;\n  },\n  easeInOutQuint: function easeInOutQuint(t) {\n    return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n  }\n};\n\nvar isNumeric = exports.isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar setPosition = exports.setPosition = function setPosition(begin, end, elapsed, duration) {\n  var ease = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'easeInOutCubic';\n  return elapsed > duration ? end : begin + (end - begin) * easeFunctions[ease](elapsed / duration);\n};\n\nvar calcEndPoint = exports.calcEndPoint = function calcEndPoint(target) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (isNumeric(target)) {\n    return parseInt(target) + offset;\n  }\n\n  var y = context === window ? window.pageYOffset : context.scrollTop - context.getBoundingClientRect().top;\n  var distance = target.nodeName.toLowerCase() === 'html' ? -y : target.getBoundingClientRect().top + y;\n  return distance + offset;\n};","map":null,"metadata":{},"sourceType":"script"}