{"ast":null,"code":"import \"antd/es/tooltip/style\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/ButtonMicro.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { appConstants } from '@constants';\nimport { newNotification } from '@utils';\nimport LocalAudioLevel from './components/LocalAudioLevel';\nimport MicroOn from './components/AnimatedMicroOnSVG';\nimport MicroOff from './components/AnimatedMicroOffSVG';\nvar ROLE = appConstants.ROLE,\n    MUTE_POLICY = appConstants.MUTE_POLICY;\nvar ButtonMicro = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ButtonMicro, _React$PureComponent);\n\n  var _super = _createSuper(ButtonMicro);\n\n  function ButtonMicro() {\n    var _this;\n\n    _classCallCheck(this, ButtonMicro);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleToggleShareAudio = function (e) {\n      var _this$props = _this.props,\n          jitsiStore = _this$props.jitsiStore,\n          conferenceState = _this$props.conferenceState;\n      e.preventDefault();\n\n      if (jitsiStore.isAudio) {\n        _this.props.offAudio();\n      } else {\n        if (conferenceState.myRole === ROLE.OWNER) {\n          _this.props.onAudio();\n        } else {\n          if (conferenceState.conference.mutePolicy === MUTE_POLICY.HARD) {\n            newNotification('Hard mute policy is on, please contact room moderator to enable', 'warning', {\n              dismiss: {\n                duration: 3000,\n                onScreen: true\n              }\n            });\n          }\n\n          if (conferenceState.conference.mutePolicy === MUTE_POLICY.PUSH_TO_TALK) {\n            newNotification('Push to talk mute policy is on, please mouse down or press \"z\" ', 'warning', {\n              dismiss: {\n                duration: 3000,\n                onScreen: true\n              }\n            });\n          }\n\n          if (conferenceState.conference.mutePolicy === MUTE_POLICY.PRIORITY) {\n            if ((conferenceState === null || conferenceState === void 0 ? void 0 : conferenceState.myRole) === ROLE.PARTICIPANT) {\n              var _jitsiStore$_conferen, _conferenceState$conf;\n\n              var myUserIds = [jitsiStore.conference.myUserId(), jitsiStore === null || jitsiStore === void 0 ? void 0 : (_jitsiStore$_conferen = jitsiStore._conference) === null || _jitsiStore$_conferen === void 0 ? void 0 : _jitsiStore$_conferen.myUserId()];\n\n              if ((conferenceState === null || conferenceState === void 0 ? void 0 : (_conferenceState$conf = conferenceState.conference) === null || _conferenceState$conf === void 0 ? void 0 : _conferenceState$conf.pinnedUser) && myUserIds.includes(conferenceState.conference.pinnedUser)) {\n                _this.props.onAudio();\n              } else {\n                newNotification('Discussion policy is on, please contact room owner to enable', 'warning', {\n                  dismiss: {\n                    duration: 3000,\n                    onScreen: true\n                  }\n                });\n              }\n            } else {\n              _this.props.onAudio();\n            }\n          }\n\n          if (conferenceState.conference.mutePolicy === MUTE_POLICY.SOFT) {\n            _this.props.onAudio();\n          }\n        }\n      }\n\n      e.currentTarget.blur();\n    };\n\n    return _this;\n  }\n\n  _createClass(ButtonMicro, [{\n    key: \"render\",\n    // handleMouseDown = () => {\n    //   const { jitsiStore, conferenceState } = this.props\n    //   if (jitsiStore.isAudio) {\n    //     document.addEventListener('mouseup', this.handleMouseUp)\n    //   } else {\n    //     if (conferenceState.conference.mutePolicy === MUTE_POLICY.PUSH_TO_TALK ||\n    //       conferenceState.conference.mutePolicy === MUTE_POLICY.SOFT) {\n    //       this.props.onAudio()\n    //       document.addEventListener('mouseup', this.handleMouseUp)\n    //     }\n    //   }\n    // }\n    // handleMouseUp = (e) => {\n    //   e.preventDefault()\n    //   this.props.offAudio()\n    //   document.removeEventListener('mouseup', this.handleMouseUp, false)\n    // }\n    value: function render() {\n      var jitsiStore = this.props.jitsiStore;\n      var hasEnabledAudio = jitsiStore.isAudio;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"micro-button\",\n        className: \"action-item action-item-micro\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(_Tooltip, {\n        title: \"Micro\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(_Button, {\n        type: \"primary\",\n        className: \"\".concat(hasEnabledAudio ? '' : 'btn-off', \" \").concat(jitsiStore.isShareAudioInProcess ? 'disabled-btn' : ''),\n        onClick: this.handleToggleShareAudio // onMouseDown={this.handleMouseDown}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, hasEnabledAudio ? /*#__PURE__*/React.createElement(MicroOn, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 32\n        }\n      }) : /*#__PURE__*/React.createElement(MicroOff, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 46\n        }\n      }), jitsiStore.audioTrack && hasEnabledAudio ? /*#__PURE__*/React.createElement(LocalAudioLevel, {\n        audioTrack: jitsiStore.audioTrack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }))));\n    }\n  }]);\n\n  return ButtonMicro;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default ButtonMicro;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/ButtonMicro.jsx"],"names":["React","inject","observer","appConstants","newNotification","LocalAudioLevel","MicroOn","MicroOff","ROLE","MUTE_POLICY","ButtonMicro","stores","handleToggleShareAudio","e","props","jitsiStore","conferenceState","preventDefault","isAudio","offAudio","myRole","OWNER","onAudio","conference","mutePolicy","HARD","dismiss","duration","onScreen","PUSH_TO_TALK","PRIORITY","PARTICIPANT","myUserIds","myUserId","_conference","pinnedUser","includes","SOFT","currentTarget","blur","hasEnabledAudio","isShareAudioInProcess","audioTrack","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Tooltip, Button } from 'antd'\nimport { inject, observer } from 'mobx-react'\n\nimport { appConstants } from '@constants'\nimport { newNotification } from '@utils'\n\nimport LocalAudioLevel from './components/LocalAudioLevel'\n\nimport MicroOn from './components/AnimatedMicroOnSVG'\nimport MicroOff from './components/AnimatedMicroOffSVG'\n\nconst { ROLE, MUTE_POLICY } = appConstants\n\n@inject(({ stores }) => stores)\n@observer\nclass ButtonMicro extends React.PureComponent {\n  handleToggleShareAudio = e => {\n    const { jitsiStore, conferenceState } = this.props\n\n    e.preventDefault()\n\n    if (jitsiStore.isAudio) {\n      this.props.offAudio()\n    } else {\n      if (conferenceState.myRole === ROLE.OWNER) {\n        this.props.onAudio()\n      } else {\n        if (conferenceState.conference.mutePolicy === MUTE_POLICY.HARD) {\n          newNotification('Hard mute policy is on, please contact room moderator to enable', 'warning', {\n            dismiss: { duration: 3000, onScreen: true }\n          })\n        }\n\n        if (conferenceState.conference.mutePolicy === MUTE_POLICY.PUSH_TO_TALK) {\n          newNotification('Push to talk mute policy is on, please mouse down or press \"z\" ', 'warning', {\n            dismiss: { duration: 3000, onScreen: true }\n          })\n        }\n\n        if (conferenceState.conference.mutePolicy === MUTE_POLICY.PRIORITY) {\n          if (conferenceState?.myRole === ROLE.PARTICIPANT) {\n            const myUserIds = [jitsiStore.conference.myUserId(), jitsiStore?._conference?.myUserId()]\n            if (conferenceState?.conference?.pinnedUser && myUserIds.includes(conferenceState.conference.pinnedUser)) {\n              this.props.onAudio()\n            } else {\n              newNotification('Discussion policy is on, please contact room owner to enable', 'warning', {\n                dismiss: { duration: 3000, onScreen: true }\n              })\n            }\n          } else {\n            this.props.onAudio()\n          }\n        }\n\n        if (conferenceState.conference.mutePolicy === MUTE_POLICY.SOFT) {\n          this.props.onAudio()\n        }\n\n      }\n    }\n\n    e.currentTarget.blur()\n  }\n\n  // handleMouseDown = () => {\n  //   const { jitsiStore, conferenceState } = this.props\n\n  //   if (jitsiStore.isAudio) {\n  //     document.addEventListener('mouseup', this.handleMouseUp)\n  //   } else {\n  //     if (conferenceState.conference.mutePolicy === MUTE_POLICY.PUSH_TO_TALK ||\n  //       conferenceState.conference.mutePolicy === MUTE_POLICY.SOFT) {\n  //       this.props.onAudio()\n  //       document.addEventListener('mouseup', this.handleMouseUp)\n  //     }\n  //   }\n  // }\n\n  // handleMouseUp = (e) => {\n  //   e.preventDefault()\n  //   this.props.offAudio()\n  //   document.removeEventListener('mouseup', this.handleMouseUp, false)\n  // }\n\n  render() {\n\n    const { jitsiStore } = this.props\n    const hasEnabledAudio = jitsiStore.isAudio\n\n    return (\n      <div id='micro-button' className='action-item action-item-micro'>\n        <Tooltip title='Micro'>\n          <Button\n            type='primary'\n            className={`${hasEnabledAudio ? '' : 'btn-off'} ${jitsiStore.isShareAudioInProcess ? 'disabled-btn' : ''}`}\n            onClick={this.handleToggleShareAudio}\n          // onMouseDown={this.handleMouseDown}\n          >\n            {hasEnabledAudio ? <MicroOn /> : <MicroOff />}\n            {jitsiStore.audioTrack && hasEnabledAudio ? (\n              <LocalAudioLevel audioTrack={jitsiStore.audioTrack} />\n            ) : (\n                <React.Fragment />\n              )}\n          </Button>\n        </Tooltip>\n      </div>\n    )\n  }\n}\n\nexport default ButtonMicro\n"]},"metadata":{},"sourceType":"module"}