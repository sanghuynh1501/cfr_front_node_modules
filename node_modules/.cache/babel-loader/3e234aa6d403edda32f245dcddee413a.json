{"ast":null,"code":"import _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/AudioRender.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Audio } from './media';\nvar AudioRender = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AudioRender, _React$PureComponent);\n\n  var _super = _createSuper(AudioRender);\n\n  function AudioRender() {\n    _classCallCheck(this, AudioRender);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AudioRender, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return this.props.jitsiStore.participantAudios.map(function (_ref2, i) {\n        var track = _ref2.track,\n            id = _ref2.id;\n        return /*#__PURE__*/React.createElement(Audio, {\n          key: \"\".concat(id, \"-\").concat(i),\n          id: track.getId(),\n          audioTrack: track,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 14\n          }\n        });\n      });\n    }\n  }]);\n\n  return AudioRender;\n}(React.PureComponent)) || _class) || _class);\nexport default AudioRender;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/AudioRender.jsx"],"names":["React","inject","observer","Audio","AudioRender","stores","props","jitsiStore","participantAudios","map","i","track","id","getId","PureComponent"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AAEA,SAASC,KAAT,QAAsB,SAAtB;IAIMC,W,WAFLH,MAAM,CAAC;AAAA,MAAGI,MAAH,QAAGA,MAAH;AAAA,SAAgBA,MAAhB;AAAA,CAAD,C,gBACNH,Q;;;;;;;;;;;;;6BAEU;AAAA;;AACP,aAAO,KAAKI,KAAL,CAAWC,UAAX,CAAsBC,iBAAtB,CAAwCC,GAAxC,CAA4C,iBAAgBC,CAAhB,EAAsB;AAAA,YAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,YAAZC,EAAY,SAAZA,EAAY;AACvE,4BAAO,oBAAC,KAAD;AAAO,UAAA,GAAG,YAAKA,EAAL,cAAWF,CAAX,CAAV;AAA0B,UAAA,EAAE,EAAEC,KAAK,CAACE,KAAN,EAA9B;AAA6C,UAAA,UAAU,EAAEF,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFM,CAAP;AAGD;;;;EALuBX,KAAK,CAACc,a;AAQhC,eAAeV,WAAf","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { Audio } from './media'\n\n@inject(({ stores }) => stores)\n@observer\nclass AudioRender extends React.PureComponent {\n  render() {\n    return this.props.jitsiStore.participantAudios.map(({ track, id }, i) => {\n      return <Audio key={`${id}-${i}`} id={track.getId()} audioTrack={track} />\n    })\n  }\n}\n\nexport default AudioRender\n"]},"metadata":{},"sourceType":"module"}