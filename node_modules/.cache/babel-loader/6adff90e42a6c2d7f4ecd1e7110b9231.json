{"ast":null,"code":"export function createDeferred() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\nvar MATCH_OPERATOR_REGEXP = /[|\\\\{}()[\\]^$+*?.-]/g;\n/**\n * Escape RegExp special characters.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp.\n *\n * @param {string} s - The regexp string to escape.\n * @returns {string}\n */\n\nexport function escapeRegexp(s) {\n  if (typeof s !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  return s.replace(MATCH_OPERATOR_REGEXP, '\\\\$&');\n}\n/**\n * Returns the base URL of the app.\n *\n * @param {Object} w - Window object to use instead of the built in one.\n * @returns {string}\n */\n\nexport function getBaseUrl(w) {\n  var doc = w.document;\n  var base = doc.querySelector('base');\n\n  if (base && base.href) {\n    return base.href;\n  }\n\n  var _w$location = w.location,\n      protocol = _w$location.protocol,\n      host = _w$location.host;\n  return \"\".concat(protocol, \"//\").concat(host);\n}\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\n\nexport function getJitsiMeetGlobalNS() {\n  if (!window.JitsiMeetJS) {\n    window.JitsiMeetJS = {};\n  }\n\n  if (!window.JitsiMeetJS.app) {\n    window.JitsiMeetJS.app = {};\n  }\n\n  return window.JitsiMeetJS.app;\n}\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\n\nexport function assignIfDefined(target, source) {\n  var to = Object(target);\n\n  for (var nextKey in source) {\n    if (source.hasOwnProperty(nextKey)) {\n      var value = source[nextKey];\n\n      if (typeof value !== 'undefined') {\n        to[nextKey] = value;\n      }\n    }\n  }\n\n  return to;\n}\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\n\nexport function reportError(e) {\n  var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  console.error(msg, e);\n  window.onerror && window.onerror(msg, null, null, null, e);\n}","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/features/base/util/helpers.js"],"names":["createDeferred","deferred","promise","Promise","resolve","reject","MATCH_OPERATOR_REGEXP","escapeRegexp","s","TypeError","replace","getBaseUrl","w","doc","document","base","querySelector","href","location","protocol","host","getJitsiMeetGlobalNS","window","JitsiMeetJS","app","assignIfDefined","target","source","to","Object","nextKey","hasOwnProperty","value","reportError","e","msg","console","error","onerror"],"mappings":"AAAA,OAAO,SAASA,cAAT,GAA0B;AAC/B,MAAMC,QAAQ,GAAG,EAAjB;AAEAA,EAAAA,QAAQ,CAACC,OAAT,GAAmB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClDJ,IAAAA,QAAQ,CAACG,OAAT,GAAmBA,OAAnB;AACAH,IAAAA,QAAQ,CAACI,MAAT,GAAkBA,MAAlB;AACD,GAHkB,CAAnB;AAKA,SAAOJ,QAAP;AACD;AAED,IAAMK,qBAAqB,GAAG,sBAA9B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAC9B,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;AACD;;AAED,SAAOD,CAAC,CAACE,OAAF,CAAUJ,qBAAV,EAAiC,MAAjC,CAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASK,UAAT,CAAoBC,CAApB,EAAuB;AAC5B,MAAMC,GAAG,GAAGD,CAAC,CAACE,QAAd;AACA,MAAMC,IAAI,GAAGF,GAAG,CAACG,aAAJ,CAAkB,MAAlB,CAAb;;AAEA,MAAID,IAAI,IAAIA,IAAI,CAACE,IAAjB,EAAuB;AACrB,WAAOF,IAAI,CAACE,IAAZ;AACD;;AAN2B,oBAQDL,CAAC,CAACM,QARD;AAAA,MAQpBC,QARoB,eAQpBA,QARoB;AAAA,MAQVC,IARU,eAQVA,IARU;AAU5B,mBAAUD,QAAV,eAAuBC,IAAvB;AACD;AAED;;;;;;;;AAOA,OAAO,SAASC,oBAAT,GAAgC;AACrC,MAAI,CAACC,MAAM,CAACC,WAAZ,EAAyB;AACvBD,IAAAA,MAAM,CAACC,WAAP,GAAqB,EAArB;AACD;;AAED,MAAI,CAACD,MAAM,CAACC,WAAP,CAAmBC,GAAxB,EAA6B;AAC3BF,IAAAA,MAAM,CAACC,WAAP,CAAmBC,GAAnB,GAAyB,EAAzB;AACD;;AAED,SAAOF,MAAM,CAACC,WAAP,CAAmBC,GAA1B;AACD;AAED;;;;;;;;;AAQA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;AAC9C,MAAMC,EAAE,GAAGC,MAAM,CAACH,MAAD,CAAjB;;AAEA,OAAK,IAAMI,OAAX,IAAsBH,MAAtB,EAA8B;AAC5B,QAAIA,MAAM,CAACI,cAAP,CAAsBD,OAAtB,CAAJ,EAAoC;AAClC,UAAME,KAAK,GAAGL,MAAM,CAACG,OAAD,CAApB;;AAEA,UAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;AAChCJ,QAAAA,EAAE,CAACE,OAAD,CAAF,GAAcE,KAAd;AACD;AACF;AACF;;AAED,SAAOJ,EAAP;AACD;AAED;;;;;;;;AAOA,OAAO,SAASK,WAAT,CAAqBC,CAArB,EAAkC;AAAA,MAAVC,GAAU,uEAAJ,EAAI;AACvCC,EAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EAAmBD,CAAnB;AACAZ,EAAAA,MAAM,CAACgB,OAAP,IAAkBhB,MAAM,CAACgB,OAAP,CAAeH,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsCD,CAAtC,CAAlB;AACD","sourcesContent":["export function createDeferred() {\n  const deferred = {}\n\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve\n    deferred.reject = reject\n  })\n\n  return deferred\n}\n\nconst MATCH_OPERATOR_REGEXP = /[|\\\\{}()[\\]^$+*?.-]/g\n\n/**\n * Escape RegExp special characters.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp.\n *\n * @param {string} s - The regexp string to escape.\n * @returns {string}\n */\nexport function escapeRegexp(s) {\n  if (typeof s !== 'string') {\n    throw new TypeError('Expected a string')\n  }\n\n  return s.replace(MATCH_OPERATOR_REGEXP, '\\\\$&')\n}\n\n/**\n * Returns the base URL of the app.\n *\n * @param {Object} w - Window object to use instead of the built in one.\n * @returns {string}\n */\nexport function getBaseUrl(w) {\n  const doc = w.document\n  const base = doc.querySelector('base')\n\n  if (base && base.href) {\n    return base.href\n  }\n\n  const { protocol, host } = w.location\n\n  return `${protocol}//${host}`\n}\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n  if (!window.JitsiMeetJS) {\n    window.JitsiMeetJS = {}\n  }\n\n  if (!window.JitsiMeetJS.app) {\n    window.JitsiMeetJS.app = {}\n  }\n\n  return window.JitsiMeetJS.app\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target, source) {\n  const to = Object(target)\n\n  for (const nextKey in source) {\n    if (source.hasOwnProperty(nextKey)) {\n      const value = source[nextKey]\n\n      if (typeof value !== 'undefined') {\n        to[nextKey] = value\n      }\n    }\n  }\n\n  return to\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e, msg = '') {\n  console.error(msg, e)\n  window.onerror && window.onerror(msg, null, null, null, e)\n}\n"]},"metadata":{},"sourceType":"module"}