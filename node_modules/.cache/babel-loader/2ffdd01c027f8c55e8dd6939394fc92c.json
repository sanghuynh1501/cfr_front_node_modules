{"ast":null,"code":"import _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/components/ButtonLoginGoogle/index.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { withTranslation } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nimport { client, M_LOGIN_GOOGLE, Q_EMAIL_SETTING } from '@graphql';\nimport { returnError, newNotification } from '@utils';\nimport googleIcon from \"@misc/logo/google.svg\";\nimport ModalNotification from '@components/ModalNotification';\nimport googleCalendarAPI from '../../calendar/GoogleCalendarAPI';\nvar ButtonLoginGoogle = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), withRouter(_class = _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ButtonLoginGoogle, _React$PureComponent);\n\n  var _super = _createSuper(ButtonLoginGoogle);\n\n  function ButtonLoginGoogle() {\n    var _this;\n\n    _classCallCheck(this, ButtonLoginGoogle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      visible: false,\n      emailSettings: []\n    };\n\n    _this.handleLoginGoogle = function (e) {\n      var _this$props = _this.props,\n          globalState = _this$props.globalState,\n          history = _this$props.history;\n      var profile = googleCalendarAPI.getCurrentUserProfile();\n      profile.then(function (result) {\n        client.mutate({\n          mutation: M_LOGIN_GOOGLE,\n          variables: {\n            token: result\n          }\n        }).then(function (_ref2) {\n          var loginGoogle = _ref2.data.loginGoogle;\n\n          if (loginGoogle && loginGoogle.token) {\n            globalState.auth(loginGoogle.token);\n\n            if (globalState.redirectTo) {\n              var target = globalState.redirectTo;\n              globalState.setRedirectTo(null);\n              return history.push(target);\n            } else {\n              return history.push('/');\n            }\n          }\n\n          return newNotification(_this.props.i18n.t('loginError'), 'danger', {\n            container: 'top-right'\n          });\n        }).catch(function (errors) {\n          _this.queryEmailSetting();\n\n          if (errors && errors.message && /^Network error:/.test(errors.message)) {\n            returnError('Error', {\n              errorMessage: 'Error connect'\n            }, {\n              container: 'top-right'\n            });\n            return false;\n          }\n\n          if (errors.graphQLErrors) {\n            errors.graphQLErrors[0].message.split(', ').map(function (item) {\n              if (item === 'EXTENSION_NOT_FOUND') {\n                _this.showModal();\n              } else {\n                returnError('Error', {\n                  errorMessage: _this.props.i18n.t(item)\n                }, {\n                  container: 'top-right'\n                });\n              }\n\n              return false;\n            });\n            return false;\n          }\n\n          if (errors.message) {\n            returnError('Error', {\n              errorMessage: errors.message\n            }, {\n              container: 'top-right'\n            });\n            return false;\n          }\n        });\n      });\n      e.preventDefault();\n    };\n\n    _this.queryEmailSetting = function () {\n      client.query({\n        query: Q_EMAIL_SETTING,\n        fetchPolicy: 'network-only'\n      }).then(function (_ref3) {\n        var getEmailSetting = _ref3.data.getEmailSetting;\n\n        _this.setState({\n          emailSettings: getEmailSetting\n        });\n      }).catch(function (error) {\n        return returnError('Get conferences', {\n          error: error,\n          errorMessage: _this.props.i18n.t('notification.queryEmailSettingError')\n        }, {\n          container: 'top-right'\n        });\n      });\n    };\n\n    _this.showModal = function () {\n      _this.queryEmailSetting();\n\n      _this.setState({\n        visible: true\n      });\n    };\n\n    _this.handleCancel = function (e) {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ButtonLoginGoogle, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn-login-google\",\n        onClick: this.handleLoginGoogle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: googleIcon,\n        alt: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }\n      }, \"Sign in with Google\"))), /*#__PURE__*/React.createElement(ModalNotification, {\n        visible: this.state.visible,\n        emailSettings: this.state.emailSettings,\n        handleCancel: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ButtonLoginGoogle;\n}(React.PureComponent), _temp)) || _class) || _class) || _class);\nexport default withTranslation()(ButtonLoginGoogle);","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/components/ButtonLoginGoogle/index.jsx"],"names":["React","inject","observer","withTranslation","withRouter","client","M_LOGIN_GOOGLE","Q_EMAIL_SETTING","returnError","newNotification","ModalNotification","googleCalendarAPI","ButtonLoginGoogle","stores","state","visible","emailSettings","handleLoginGoogle","e","props","globalState","history","profile","getCurrentUserProfile","then","result","mutate","mutation","variables","token","loginGoogle","data","auth","redirectTo","target","setRedirectTo","push","i18n","t","container","catch","errors","queryEmailSetting","message","test","errorMessage","graphQLErrors","split","map","item","showModal","preventDefault","query","fetchPolicy","getEmailSetting","setState","error","handleCancel","googleIcon","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router-dom'\n\nimport { client, M_LOGIN_GOOGLE, Q_EMAIL_SETTING } from '@graphql'\nimport { returnError, newNotification } from '@utils'\n\nimport googleIcon from '@misc/logo/google.svg'\n\nimport ModalNotification from '@components/ModalNotification'\nimport googleCalendarAPI from '../../calendar/GoogleCalendarAPI'\n\n@withRouter\n@inject(({ stores }) => stores)\n@observer\nclass ButtonLoginGoogle extends React.PureComponent {\n  state = {\n    visible: false,\n    emailSettings: []\n  }\n\n  handleLoginGoogle = (e) => {\n    const { globalState, history } = this.props\n    const profile = googleCalendarAPI.getCurrentUserProfile()\n    profile.then(result => {\n      client\n        .mutate({\n          mutation: M_LOGIN_GOOGLE,\n          variables: {\n            token: result\n          }\n        })\n        .then(({ data: { loginGoogle } }) => {\n          if (loginGoogle && loginGoogle.token) {\n            globalState.auth(loginGoogle.token)\n            if (globalState.redirectTo) {\n              const target = globalState.redirectTo\n              globalState.setRedirectTo(null)\n              return history.push(target)\n            } else {\n              return history.push('/')\n            }\n          }\n          return newNotification(this.props.i18n.t('loginError'), 'danger', {\n            container: 'top-right'\n          })\n        })\n        .catch(errors => {\n          this.queryEmailSetting()\n          if (errors && errors.message && /^Network error:/.test(errors.message)) {\n            returnError(\n              'Error',\n              {\n                errorMessage: 'Error connect'\n              },\n              { container: 'top-right' }\n            )\n            return false\n          }\n\n          if (errors.graphQLErrors) {\n            errors.graphQLErrors[0].message.split(', ').map(item => {\n              if (item === 'EXTENSION_NOT_FOUND') {\n                this.showModal()\n              } else {\n                returnError(\n                  'Error',\n                  {\n                    errorMessage: this.props.i18n.t(item)\n                  },\n                  { container: 'top-right' }\n                )\n              }\n              return false\n            })\n            return false\n          }\n\n          if (errors.message) {\n            returnError(\n              'Error',\n              {\n                errorMessage: errors.message\n              },\n              { container: 'top-right' }\n            )\n            return false\n          }\n        })\n    })\n\n    e.preventDefault()\n  }\n\n  queryEmailSetting = () => {\n    client\n      .query({\n        query: Q_EMAIL_SETTING,\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { getEmailSetting } }) => {\n        this.setState({ emailSettings: getEmailSetting })\n      })\n      .catch(error =>\n        returnError(\n          'Get conferences',\n          {\n            error,\n            errorMessage: this.props.i18n.t('notification.queryEmailSettingError')\n          },\n          { container: 'top-right' }\n        )\n      )\n  }\n\n  showModal = () => {\n    this.queryEmailSetting()\n    this.setState({\n      visible: true,\n    })\n  }\n\n  handleCancel = e => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <button className='btn-login-google' onClick={this.handleLoginGoogle}>\n          <div className='logo'>\n            <img src={googleIcon} alt='icon' />\n          </div>\n          <div className='text'>\n            <span>Sign in with Google</span>\n          </div>\n        </button>\n        <ModalNotification\n          visible={this.state.visible}\n          emailSettings={this.state.emailSettings}\n          handleCancel={this.handleCancel}\n        />\n      </>\n    )\n  }\n}\n\nexport default withTranslation()(ButtonLoginGoogle)\n"]},"metadata":{},"sourceType":"module"}