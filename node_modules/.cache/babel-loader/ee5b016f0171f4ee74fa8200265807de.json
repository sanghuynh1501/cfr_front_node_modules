{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport \"antd/es/tabs/style\";\nimport _Tabs from \"antd/es/tabs\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/modals/ModalInvite.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './ModalInvite.less';\nimport { client, Q_USER_EMAIL } from '@graphql';\nimport { returnError } from '@utils';\nimport TabRemind from './tabsInviteRemind/TabRemind';\nimport TabInvite from './tabsInviteRemind/TabInvite';\nimport inviteIcon from \"@misc/images/toolbar/invite.svg\";\nimport remindIcon from \"@misc/images/toolbar/remind.svg\";\nimport inviteActiveIcon from \"@misc/images/toolbar/invite-active.svg\";\nimport remindActiveIcon from \"@misc/images/toolbar/remind-active.svg\";\nvar TabPane = _Tabs.TabPane;\nvar ModalInvite = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ModalInvite, _React$PureComponent);\n\n  var _super = _createSuper(ModalInvite);\n\n  function ModalInvite() {\n    var _this;\n\n    _classCallCheck(this, ModalInvite);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      visible: false,\n      inviteEmail: [],\n      userEmail: [],\n      tabActive: 'invite'\n    };\n\n    _this.queryRemindEmail = function () {\n      client.query({\n        query: Q_USER_EMAIL,\n        variables: {\n          conferenceId: _this.props.conferenceState.conference._id\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref2) {\n        var _ref2$data = _ref2.data,\n            InviteEmail = _ref2$data.InviteEmail,\n            UserEmail = _ref2$data.UserEmail;\n\n        _this.setState(function (_preState) {\n          return _objectSpread({}, _preState, {\n            userEmail: UserEmail,\n            inviteEmail: InviteEmail\n          });\n        });\n      }).catch(function (error) {\n        return returnError('Get conferences', {\n          error: error,\n          errorMessage: 'Cannot Remind Email'\n        }, {\n          container: 'top-right'\n        });\n      });\n    };\n\n    _this.showModal = function () {\n      _this.setState({\n        visible: true\n      });\n    };\n\n    _this.handleOk = function (e) {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    _this.handleCancel = function (e) {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    _this.handleChangeTab = function (key) {\n      if (key === 'remind') {\n        _this.queryRemindEmail();\n      }\n\n      _this.setState({\n        tabActive: key\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ModalInvite, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.showDialog(this.showModal);\n      this.queryRemindEmail();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(_Modal, {\n        className: \"modal-invite\",\n        title: \"Invite and Remind\",\n        visible: this.state.visible,\n        onOk: this.handleOk,\n        onCancel: this.handleCancel,\n        centered: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(_Tabs, {\n        className: \"tabs-invite-remind\",\n        defaultActiveKey: this.state.tabActive,\n        onChange: this.handleChangeTab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TabPane, {\n        tab: /*#__PURE__*/React.createElement(\"div\", {\n          className: \"tabs-header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: this.state.tabActive === 'invite' ? inviteActiveIcon : inviteIcon,\n          alt: \"invite\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }\n        }, \"Invite\")),\n        key: \"invite\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TabInvite, {\n        handleCancel: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(TabPane, {\n        tab: /*#__PURE__*/React.createElement(\"div\", {\n          className: \"tabs-header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: this.state.tabActive === 'remind' ? remindActiveIcon : remindIcon,\n          alt: \"remind\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }\n        }, \"Remind\")),\n        key: \"remind\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TabRemind, {\n        inviteEmail: this.state.inviteEmail,\n        userEmail: this.state.userEmail,\n        handleCancel: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return ModalInvite;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default ModalInvite;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/modals/ModalInvite.jsx"],"names":["React","inject","observer","client","Q_USER_EMAIL","returnError","TabRemind","TabInvite","TabPane","ModalInvite","stores","state","visible","inviteEmail","userEmail","tabActive","queryRemindEmail","query","variables","conferenceId","props","conferenceState","conference","_id","fetchPolicy","then","data","InviteEmail","UserEmail","setState","_preState","catch","error","errorMessage","container","showModal","handleOk","e","handleCancel","handleChangeTab","key","showDialog","inviteActiveIcon","inviteIcon","remindActiveIcon","remindIcon","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Modal, Tabs } from 'antd'\nimport './ModalInvite.less'\n\nimport { client, Q_USER_EMAIL } from '@graphql'\nimport { returnError } from '@utils'\n\nimport TabRemind from './tabsInviteRemind/TabRemind'\nimport TabInvite from './tabsInviteRemind/TabInvite'\n\nimport inviteIcon from '@misc/images/toolbar/invite.svg'\nimport remindIcon from '@misc/images/toolbar/remind.svg'\nimport inviteActiveIcon from '@misc/images/toolbar/invite-active.svg'\nimport remindActiveIcon from '@misc/images/toolbar/remind-active.svg'\n\n\nconst { TabPane } = Tabs\n@inject(({ stores }) => stores)\n@observer\nclass ModalInvite extends React.PureComponent {\n  state = {\n    visible: false,\n    inviteEmail: [],\n    userEmail: [],\n    tabActive: 'invite'\n  }\n\n  queryRemindEmail = () => {\n    client\n      .query({\n        query: Q_USER_EMAIL,\n        variables: {\n          conferenceId: this.props.conferenceState.conference._id\n        },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { InviteEmail, UserEmail } }) => {\n        this.setState(_preState => ({\n          ..._preState,\n          userEmail: UserEmail,\n          inviteEmail: InviteEmail\n        }))\n      })\n      .catch(error =>\n        returnError(\n          'Get conferences',\n          {\n            error,\n            errorMessage: 'Cannot Remind Email'\n          },\n          { container: 'top-right' }\n        )\n      )\n  }\n\n  componentDidMount() {\n    this.props.showDialog(this.showModal)\n    this.queryRemindEmail()\n  }\n\n  showModal = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  handleOk = e => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  handleCancel = e => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  handleChangeTab = key => {\n    if (key === 'remind') {\n      this.queryRemindEmail()\n    }\n    this.setState({ tabActive: key })\n  }\n\n  render() {\n    return (\n      <Modal\n        className='modal-invite'\n        title='Invite and Remind'\n        visible={this.state.visible}\n        onOk={this.handleOk}\n        onCancel={this.handleCancel}\n        centered\n      >\n        <Tabs className='tabs-invite-remind' defaultActiveKey={this.state.tabActive} onChange={this.handleChangeTab}>\n          <TabPane\n            tab={\n              <div className='tabs-header'>\n                <img src={this.state.tabActive === 'invite' ? inviteActiveIcon : inviteIcon} alt='invite' />\n                <span>Invite</span>\n              </div>\n            }\n            key='invite'\n          >\n            <TabInvite handleCancel={this.handleCancel} />\n          </TabPane>\n          <TabPane\n            tab={\n              <div className='tabs-header'>\n                <img src={this.state.tabActive === 'remind' ? remindActiveIcon : remindIcon} alt='remind' />\n                <span>Remind</span>\n              </div>\n            }\n            key='remind'\n          >\n            <TabRemind\n              inviteEmail={this.state.inviteEmail}\n              userEmail={this.state.userEmail}\n              handleCancel={this.handleCancel}\n            />\n          </TabPane>\n        </Tabs>\n      </Modal>\n    )\n  }\n}\n\nexport default ModalInvite\n"]},"metadata":{},"sourceType":"module"}