{"ast":null,"code":"import _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/modals/devices-setting-components/AudioLevelMeter.jsx\";\nimport React from 'react';\nimport { JitsiTrackEvents } from '../../jitsi/core';\n\nvar AudioLevelMeter = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AudioLevelMeter, _React$PureComponent);\n\n  var _super = _createSuper(AudioLevelMeter);\n\n  function AudioLevelMeter() {\n    var _this;\n\n    _classCallCheck(this, AudioLevelMeter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      audioLevel: 0\n    };\n    return _this;\n  }\n\n  _createClass(AudioLevelMeter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.audioTrack) {\n        this.props.audioTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, function (audioLevel) {\n          _this2.setState({\n            audioLevel: audioLevel\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.audioTrack.removeAllListeners(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var numberOfHighlightedSpan = ~~(this.state.audioLevel * 18);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"show-level\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 7\n        }\n      }, Array(18).fill(0).map(function (_item, index) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          key: index,\n          className: \"\".concat(index <= numberOfHighlightedSpan ? 'highlighted-span' : ''),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }\n        });\n      }));\n    }\n  }]);\n\n  return AudioLevelMeter;\n}(React.PureComponent);\n\nexport { AudioLevelMeter as default };","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/modals/devices-setting-components/AudioLevelMeter.jsx"],"names":["React","JitsiTrackEvents","AudioLevelMeter","state","audioLevel","props","audioTrack","addEventListener","TRACK_AUDIO_LEVEL_CHANGED","setState","removeAllListeners","numberOfHighlightedSpan","Array","fill","map","_item","index","PureComponent"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;;IAEqBC,e;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AAAEC,MAAAA,UAAU,EAAE;AAAd,K;;;;;;wCAEY;AAAA;;AAClB,UAAI,KAAKC,KAAL,CAAWC,UAAf,EAA2B;AACzB,aAAKD,KAAL,CAAWC,UAAX,CAAsBC,gBAAtB,CAAuCN,gBAAgB,CAACO,yBAAxD,EAAmF,UAAAJ,UAAU,EAAI;AAC/F,UAAA,MAAI,CAACK,QAAL,CAAc;AAAEL,YAAAA,UAAU,EAAVA;AAAF,WAAd;AACD,SAFD;AAGD;AACF;;;2CAEsB;AACrB,WAAKC,KAAL,CAAWC,UAAX,CAAsBI,kBAAtB,CAAyCT,gBAAgB,CAACO,yBAA1D;AACD;;;6BAEQ;AAAA;;AACP,UAAMG,uBAAuB,GAAG,CAAC,EAAE,KAAKR,KAAL,CAAWC,UAAX,GAAwB,EAA1B,CAAjC;AAEA,0BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGQ,KAAK,CAAC,EAAD,CAAL,CACEC,IADF,CACO,CADP,EAEEC,GAFF,CAEM,UAACC,KAAD,EAAQC,KAAR;AAAA,4BACH;AAAM,UAAA,GAAG,EAAEA,KAAX;AAAkB,UAAA,SAAS,YAAKA,KAAK,IAAIL,uBAAT,GAAmC,kBAAnC,GAAwD,EAA7D,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADG;AAAA,OAFN,CADH,CADF;AASD;;;;EA3B0CX,KAAK,CAACiB,a;;SAA9Bf,e","sourcesContent":["import React from 'react'\n\nimport { JitsiTrackEvents } from '../../jitsi/core'\n\nexport default class AudioLevelMeter extends React.PureComponent {\n  state = { audioLevel: 0 }\n\n  componentDidMount() {\n    if (this.props.audioTrack) {\n      this.props.audioTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n        this.setState({ audioLevel })\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.audioTrack.removeAllListeners(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED)\n  }\n\n  render() {\n    const numberOfHighlightedSpan = ~~(this.state.audioLevel * 18)\n\n    return (\n      <div className='show-level'>\n        {Array(18)\n          .fill(0)\n          .map((_item, index) => (\n            <span key={index} className={`${index <= numberOfHighlightedSpan ? 'highlighted-span' : ''}`} />\n          ))}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}