{"ast":null,"code":"import _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { returnError } from '@utils';\nimport { JitsiMeetJS, JitsiTrackErrors } from '../core';\nexport function createLocalTrack(options) {\n  var firePermissionPromptIsShownEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return JitsiMeetJS.createLocalTracks(options, firePermissionPromptIsShownEvent).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        jitsiLocalTrack = _ref2[0];\n\n    return jitsiLocalTrack;\n  });\n}\nexport function createAudioTrack(micDeviceId, volume) {\n  return createLocalTrack(_objectSpread({\n    devices: ['audio']\n  }, micDeviceId ? {\n    micDeviceId: micDeviceId\n  } : {}, {}, volume ? {\n    volume: volume\n  } : {})).catch(function (error) {\n    returnError('Function: CreateAudioTrack', {\n      error: error,\n      errorMessage: error.message\n    });\n    return undefined;\n  });\n}\nexport function createVideoTrack(cameraDeviceId) {\n  var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1080;\n  return createLocalTrack(_objectSpread({\n    devices: ['video'],\n    resolution: resolution\n  }, cameraDeviceId ? {\n    cameraDeviceId: cameraDeviceId\n  } : {})).catch(function (error) {\n    returnError('Function: CreateVideoTracks', {\n      error: error,\n      errorMessage: error.message\n    });\n    return undefined;\n  });\n}\nexport function createDesktopTrack() {\n  var callbackOnFailure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n  return createLocalTrack({\n    devices: ['desktop'],\n    desktopSharingFrameRate: {\n      min: 30,\n      max: 60\n    }\n  }).catch(function (error) {\n    callbackOnFailure();\n    if (error.name !== 'gum.chrome_extension_user_canceled') returnError('Function: CreateDesktopTracks', {\n      error: error,\n      errorMessage: error.message\n    });\n  });\n}\nexport function makeTrackInfo(track) {\n  return {\n    id: track.getId(),\n    type: track.getType(),\n    deviceId: track.getDeviceId(),\n    isReceivingData: track.isReceivingData(),\n    isMuted: track.isMuted(),\n    track: track\n  };\n}\n/**\n * Set track muted\n * @param track Jitsi track\n * @param {boolean} muted true for mute and vice versa.\n */\n\nexport function setTrackMuted(track, muted) {\n  console.log('setTrackMuted: ', muted);\n  console.log(track.isMuted());\n  console.log(track.isMuted() === !!muted);\n  if (track.isMuted() === !!muted) return Promise.resolve();\n  var f = !!muted ? 'mute' : 'unmute';\n  return track[f]().catch(function (error) {\n    if (error.name !== JitsiTrackErrors.TRACK_IS_DISPOSED) {\n      returnError(\"setTrack-\".concat(f), {\n        error: error,\n        errorMessage: \"Failed to \".concat(f, \" track\")\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/media/functions.ts"],"names":["returnError","JitsiMeetJS","JitsiTrackErrors","createLocalTrack","options","firePermissionPromptIsShownEvent","createLocalTracks","then","jitsiLocalTrack","createAudioTrack","micDeviceId","volume","devices","catch","error","errorMessage","message","undefined","createVideoTrack","cameraDeviceId","resolution","createDesktopTrack","callbackOnFailure","desktopSharingFrameRate","min","max","name","makeTrackInfo","track","id","getId","type","getType","deviceId","getDeviceId","isReceivingData","isMuted","setTrackMuted","muted","console","log","Promise","resolve","f","TRACK_IS_DISPOSED"],"mappings":"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","sourcesContent":["import { returnError } from '@utils'\n\nimport { JitsiMeetJS, JitsiTrackErrors } from '../core'\n\ninterface CreateLocalTrackOptions {\n  devices: Array<'audio' | 'video' | 'desktop'>\n  cameraDeviceId?: string | null\n  micDeviceId?: string\n  resolution?: number\n\n  [key: string]: any\n}\n\nexport function createLocalTrack(options: CreateLocalTrackOptions, firePermissionPromptIsShownEvent: boolean = true) {\n  return JitsiMeetJS.createLocalTracks(options, firePermissionPromptIsShownEvent).then(\n    ([jitsiLocalTrack]) => jitsiLocalTrack\n  )\n}\n\nexport function createAudioTrack(micDeviceId?: string, volume?: number) {\n  return createLocalTrack({\n    devices: ['audio'],\n    ...(micDeviceId ? { micDeviceId } : {}),\n    ...(volume ? { volume } : {})\n  }).catch(error => {\n    returnError('Function: CreateAudioTrack', { error, errorMessage: error.message })\n    return undefined\n  })\n}\n\nexport function createVideoTrack(cameraDeviceId?: string, resolution: number = 1080) {\n  return createLocalTrack({\n    devices: ['video'],\n    resolution,\n    ...(cameraDeviceId ? { cameraDeviceId } : {})\n  }).catch(error => {\n    returnError('Function: CreateVideoTracks', { error, errorMessage: error.message })\n    return undefined\n  })\n}\n\nexport function createDesktopTrack(callbackOnFailure = () => { }) {\n  return createLocalTrack({\n    devices: ['desktop'],\n    desktopSharingFrameRate: { min: 30, max: 60 }\n  }).catch(error => {\n    callbackOnFailure()\n\n    if (error.name !== 'gum.chrome_extension_user_canceled')\n      returnError('Function: CreateDesktopTracks', { error, errorMessage: error.message })\n  })\n}\n\nexport function makeTrackInfo(track: any) {\n  return {\n    id: track.getId(),\n    type: track.getType(),\n    deviceId: track.getDeviceId(),\n    isReceivingData: track.isReceivingData(),\n    isMuted: track.isMuted(),\n    track\n  }\n}\n/**\n * Set track muted\n * @param track Jitsi track\n * @param {boolean} muted true for mute and vice versa.\n */\nexport function setTrackMuted(track: any, muted: boolean) {\n  console.log('setTrackMuted: ', muted)\n  console.log(track.isMuted())\n  console.log(track.isMuted() === !!muted)\n  if (track.isMuted() === !!muted) return Promise.resolve()\n\n  const f = !!muted ? 'mute' : 'unmute'\n\n  return track[f]().catch(error => {\n    if (error.name !== JitsiTrackErrors.TRACK_IS_DISPOSED) {\n      returnError(`setTrack-${f}`, { error, errorMessage: `Failed to ${f} track` })\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}