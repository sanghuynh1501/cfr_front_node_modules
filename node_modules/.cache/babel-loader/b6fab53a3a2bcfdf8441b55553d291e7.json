{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/ButtonShare.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport share from \"@misc/images/toolbar/share.svg\";\nimport screenIcon from \"@misc/images/toolbar/screen.svg\";\nimport screenWhiteIcon from \"@misc/images/toolbar/screen-white.svg\"; // import fileIcon from '@misc/images/toolbar/file.svg'\n\nimport closeIcon from \"@misc/images/toolbar/close-dr.svg\";\nvar ButtonShare = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ButtonShare, _React$PureComponent);\n\n  var _super = _createSuper(ButtonShare);\n\n  function ButtonShare() {\n    var _this;\n\n    _classCallCheck(this, ButtonShare);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      visible: false\n    };\n\n    _this.handleClickOutside = function (event) {\n      if (_this.refs['shareContentDropdown'] && !_this.refs['shareContentDropdown'].contains(event.target) && _this.state.visible) {\n        _this.handleChangeVisible();\n      }\n    };\n\n    _this.handleHide = function () {\n      if (_this.refs['share-content-container']) {\n        _this.refs['share-content-container'].style.opacity = 0;\n        _this.refs['share-content-container'].style.transform = 'rotateX(30deg)';\n        _this.refs['share-content-container'].style.zIndex = -1;\n      }\n    };\n\n    _this.handleShow = function () {\n      if (_this.refs['share-content-container']) {\n        _this.refs['share-content-container'].style.opacity = 1;\n        _this.refs['share-content-container'].style.transform = 'rotateX(0deg)';\n        _this.refs['share-content-container'].style.zIndex = 1;\n      }\n    };\n\n    _this.handleChangeVisible = function () {\n      _this.setState(function (_prevState) {\n        return {\n          visible: !_prevState.visible\n        };\n      });\n    };\n\n    _this.handleToggleScreenSharing = function () {\n      if (_this.props.jitsiStore.isShareScreen) _this.props.offShareScreen();else _this.props.onShareScreen();\n    };\n\n    return _this;\n  }\n\n  _createClass(ButtonShare, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousedown', this.handleClickOutside);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.visible) {\n        this.handleShow();\n      } else {\n        this.handleHide();\n      }\n    }\n  }, {\n    key: \"render\",\n    // handleToggleSlideSharing = () => {\n    //   this.props.conferenceState.setState({ modalResourceVisible: true })\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          jitsiStore = _this$props.jitsiStore,\n          conferenceState = _this$props.conferenceState;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"action-item action-item-micro\",\n        ref: \"shareContentDropdown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(_Button, {\n        type: \"primary\",\n        style: {\n          background: jitsiStore.isShareScreen || conferenceState.modalResourceVisible ? '#5D9C5A' : '#535353'\n        },\n        onClick: this.handleChangeVisible,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: share,\n        alt: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"share-content-container\",\n        ref: \"share-content-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"share-content-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }, \"Share Content\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"share-content-subtitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, \"What do you want to share?\"), /*#__PURE__*/React.createElement(\"img\", {\n        src: closeIcon,\n        alt: \"icon\",\n        onClick: this.handleChangeVisible,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toolbar-option-share\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"\".concat(jitsiStore.isShareScreen ? 'active' : '', \" \").concat(jitsiStore.isShareAudioInProcess ? 'disabled-btn' : ''),\n        onClick: function onClick() {\n          _this2.handleToggleScreenSharing();\n\n          _this2.handleChangeVisible();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: jitsiStore.isShareScreen ? screenWhiteIcon : screenIcon,\n        alt: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }\n      }, \"Screen\")))));\n    }\n  }]);\n\n  return ButtonShare;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default ButtonShare;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/ButtonShare.jsx"],"names":["React","inject","observer","ButtonShare","stores","state","visible","handleClickOutside","event","refs","contains","target","handleChangeVisible","handleHide","style","opacity","transform","zIndex","handleShow","setState","_prevState","handleToggleScreenSharing","props","jitsiStore","isShareScreen","offShareScreen","onShareScreen","document","addEventListener","conferenceState","background","modalResourceVisible","share","closeIcon","isShareAudioInProcess","screenWhiteIcon","screenIcon","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button } from 'antd'\nimport { inject, observer } from 'mobx-react'\n\nimport share from '@misc/images/toolbar/share.svg'\nimport screenIcon from '@misc/images/toolbar/screen.svg'\nimport screenWhiteIcon from '@misc/images/toolbar/screen-white.svg'\n// import fileIcon from '@misc/images/toolbar/file.svg'\nimport closeIcon from '@misc/images/toolbar/close-dr.svg'\n\n@inject(({ stores }) => stores)\n@observer\nclass ButtonShare extends React.PureComponent {\n  state = { visible: false }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside)\n  }\n\n  componentDidUpdate() {\n    if (this.state.visible) {\n      this.handleShow()\n    } else {\n      this.handleHide()\n    }\n  }\n\n  handleClickOutside = event => {\n    if (\n      this.refs['shareContentDropdown'] &&\n      !this.refs['shareContentDropdown'].contains(event.target) &&\n      this.state.visible\n    ) {\n      this.handleChangeVisible()\n    }\n  }\n\n  handleHide = () => {\n    if (this.refs['share-content-container']) {\n      this.refs['share-content-container'].style.opacity = 0\n      this.refs['share-content-container'].style.transform = 'rotateX(30deg)'\n      this.refs['share-content-container'].style.zIndex = -1\n    }\n  }\n\n  handleShow = () => {\n    if (this.refs['share-content-container']) {\n      this.refs['share-content-container'].style.opacity = 1\n      this.refs['share-content-container'].style.transform = 'rotateX(0deg)'\n      this.refs['share-content-container'].style.zIndex = 1\n    }\n  }\n\n  handleChangeVisible = () => {\n    this.setState(_prevState => ({ visible: !_prevState.visible }))\n  }\n\n  handleToggleScreenSharing = () => {\n    if (this.props.jitsiStore.isShareScreen) this.props.offShareScreen()\n    else this.props.onShareScreen()\n  }\n\n  // handleToggleSlideSharing = () => {\n  //   this.props.conferenceState.setState({ modalResourceVisible: true })\n  // }\n\n  render() {\n    const { jitsiStore, conferenceState } = this.props\n\n    return (\n      <div className='action-item action-item-micro' ref='shareContentDropdown'>\n        <Button\n          type='primary'\n          style={{\n            background: jitsiStore.isShareScreen || conferenceState.modalResourceVisible ? '#5D9C5A' : '#535353'\n          }}\n          onClick={this.handleChangeVisible}\n        >\n          <img src={share} alt='icon' />\n        </Button>\n\n        <div className='share-content-container' ref='share-content-container'>\n          <div className='share-content-title'>Share Content</div>\n          <div className='share-content-subtitle'>What do you want to share?</div>\n          <img src={closeIcon} alt='icon' onClick={this.handleChangeVisible} />\n          <div className='toolbar-option-share'>\n            <div>\n              <button\n                className={`${jitsiStore.isShareScreen ? 'active' : ''} ${\n                  jitsiStore.isShareAudioInProcess ? 'disabled-btn' : ''\n                  }`}\n                onClick={() => {\n                  this.handleToggleScreenSharing()\n                  this.handleChangeVisible()\n                }}\n              >\n                <img src={jitsiStore.isShareScreen ? screenWhiteIcon : screenIcon} alt='icon' />\n              </button>\n              <div>Screen</div>\n            </div>\n            {/*  Disable share file */}\n            {/* <div>\n              <button\n                onClick={() => {\n                  // this.handleToggleSlideSharing()\n                  this.props.onClickShareFile()\n                  this.handleChangeVisible()\n                }}\n              >\n                <img src={fileIcon} alt='icon' />\n              </button>\n              <div>Files</div>\n            </div> */}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ButtonShare\n"]},"metadata":{},"sourceType":"module"}