{"ast":null,"code":"import _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/tabs/ChatComponents/MessageListSection.jsx\";\n\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { withRouter } from 'react-router';\nimport { AvatarComponent } from '@components';\nimport moment from 'moment';\nimport { client, Q_MESSAGE_LIST, S_ON_MESSAGE_LIST } from '@graphql';\nimport { returnError } from '@utils';\nimport Searchbox from './Searchbox';\nimport { constant } from '../Chat';\n\nvar MessageListSection = withRouter(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(MessageListSection, _React$Component);\n\n  var _super = _createSuper(MessageListSection);\n\n  function MessageListSection() {\n    var _this;\n\n    _classCallCheck(this, MessageListSection);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      messageList: []\n    };\n    _this.subscriber = null;\n\n    _this.queryMessageList = function () {\n      return client.query({\n        query: Q_MESSAGE_LIST,\n        variables: {\n          conferenceId: _this.props.conferenceId\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref) {\n        var messageList = _ref.data.messageList;\n\n        _this.setState({\n          messageList: messageList\n        });\n      }).catch(function (error) {\n        return returnError('messageList', {\n          error: error,\n          errorMessage: 'Failed to get message list, try again later!'\n        });\n      });\n    };\n\n    _this.onSelectChat = function (withUser) {\n      _this.props.switchSection(constant.MESSAGES, withUser);\n    };\n\n    return _this;\n  }\n\n  _createClass(MessageListSection, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // QUERY:\n      this.queryMessageList(); // PUBSUB:\n\n      this.subscriber = client.subscribe({\n        query: S_ON_MESSAGE_LIST,\n        variables: {\n          conferenceId: this.props.conferenceId\n        },\n        fetchPolicy: 'network-only'\n      }).subscribe(function (_ref2) {\n        var onMessageList = _ref2.data.onMessageList;\n\n        _this2.setState(function (prevState) {\n          return {\n            messageList: [].concat(_toConsumableArray(prevState.messageList.filter(function (_ref3) {\n              var _id = _ref3.with._id;\n              return _id === onMessageList.sender;\n            }).map(function (wth) {\n              return _objectSpread({}, wth, {\n                latestMessage: onMessageList,\n                unread: wth.unread + 1\n              });\n            })), _toConsumableArray(prevState.messageList.filter(function (_ref4) {\n              var _id = _ref4.with._id;\n              return _id !== onMessageList.sender;\n            })))\n          };\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // PUBSUB:\n      if (this.subscriber) {\n        this.subscriber.unsubscribe();\n        this.subscriber = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatlist-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, this.props.i18n.t('chat')), /*#__PURE__*/React.createElement(Searchbox, {\n        messageList: this.state.messageList,\n        onSelectChat: this.onSelectChat,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatlist-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }\n      }, this.state.messageList.sort(function (_ref5, _ref6) {\n        var prev = _ref5.latestMessage;\n        var next = _ref6.latestMessage;\n        return (next && next.sentAt || next) - (prev && prev.sentAt || prev);\n      }).map(function (item, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"chatlist-item\",\n          key: index,\n          onClick: function onClick() {\n            _this3.onSelectChat(_objectSpread({}, item.with, {\n              type: item.type\n            }));\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"avatar\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(AvatarComponent, Object.assign({}, item.with, {\n          size: 50,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }\n        })), item.unread && item.unread ? /*#__PURE__*/React.createElement(\"span\", {\n          className: \"unread\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 23\n          }\n        }, item.unread) : null), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"info\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"name\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }\n        }, item.with.name), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"last-message\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }\n        }, item.latestMessage ? item.latestMessage.content.length > 60 ? item.latestMessage.content.slice(0, 60) + '...' : item.latestMessage.content : '')), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"time\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }\n        }, item.latestMessage ? moment(item.latestMessage.sentAt).fromNow() : ''));\n      })));\n    }\n  }]);\n\n  return MessageListSection;\n}(React.Component), _temp)) || _class;\n\nexport default withTranslation()(MessageListSection);","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/tabs/ChatComponents/MessageListSection.jsx"],"names":["React","withTranslation","withRouter","AvatarComponent","moment","client","Q_MESSAGE_LIST","S_ON_MESSAGE_LIST","returnError","Searchbox","constant","MessageListSection","state","messageList","subscriber","queryMessageList","query","variables","conferenceId","props","fetchPolicy","then","data","setState","catch","error","errorMessage","onSelectChat","withUser","switchSection","MESSAGES","subscribe","onMessageList","prevState","filter","_id","with","sender","map","wth","latestMessage","unread","unsubscribe","i18n","t","sort","prev","next","sentAt","item","index","type","name","content","length","slice","fromNow","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { AvatarComponent } from '@components'\nimport moment from 'moment'\n\nimport { client, Q_MESSAGE_LIST, S_ON_MESSAGE_LIST } from '@graphql'\nimport { returnError } from '@utils'\n\nimport Searchbox from './Searchbox'\nimport { constant } from '../Chat'\n\n@withRouter\nclass MessageListSection extends React.Component {\n  state = { messageList: [] }\n\n  // PUBSUB:\n  subscriber = null\n\n  queryMessageList = () =>\n    client\n      .query({\n        query: Q_MESSAGE_LIST,\n        variables: { conferenceId: this.props.conferenceId },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { messageList } }) => {\n        this.setState({ messageList })\n      })\n      .catch(error =>\n        returnError('messageList', {\n          error,\n          errorMessage: 'Failed to get message list, try again later!'\n        })\n      )\n\n  componentDidMount() {\n    // QUERY:\n    this.queryMessageList()\n\n    // PUBSUB:\n    this.subscriber = client\n      .subscribe({\n        query: S_ON_MESSAGE_LIST,\n        variables: { conferenceId: this.props.conferenceId },\n        fetchPolicy: 'network-only'\n      })\n      .subscribe(({ data: { onMessageList } }) => {\n        this.setState(prevState => ({\n          messageList: [\n            ...prevState.messageList\n              .filter(({ with: { _id } }) => _id === onMessageList.sender)\n              .map(wth => ({\n                ...wth,\n                latestMessage: onMessageList,\n                unread: wth.unread + 1\n              })),\n            ...prevState.messageList.filter(\n              ({ with: { _id } }) => _id !== onMessageList.sender\n            )\n          ]\n        }))\n      })\n  }\n\n  componentWillUnmount() {\n    // PUBSUB:\n    if (this.subscriber) {\n      this.subscriber.unsubscribe()\n      this.subscriber = null\n    }\n  }\n\n  onSelectChat = withUser => {\n    this.props.switchSection(constant.MESSAGES, withUser)\n  }\n\n  render() {\n    return (\n      <>\n        <div className='chatlist-header'>\n          <h1>{this.props.i18n.t('chat')}</h1>\n          <Searchbox\n            messageList={this.state.messageList}\n            onSelectChat={this.onSelectChat}\n          />\n        </div>\n        <div className='chatlist-body'>\n          {this.state.messageList\n            .sort(({ latestMessage: prev }, { latestMessage: next }) => {\n              return (\n                ((next && next.sentAt) || next) -\n                ((prev && prev.sentAt) || prev)\n              )\n            })\n            .map((item, index) => {\n              return (\n                <div\n                  className='chatlist-item'\n                  key={index}\n                  onClick={() => {\n                    this.onSelectChat({ ...item.with, type: item.type })\n                  }}\n                >\n                  <div className='avatar'>\n                    <AvatarComponent {...item.with} size={50} />\n                    {item.unread && item.unread ? (\n                      <span className='unread'>{item.unread}</span>\n                    ) : null}\n                  </div>\n\n                  <div className='info'>\n                    <p className='name'>{item.with.name}</p>\n                    <p className='last-message'>\n                      {item.latestMessage\n                        ? item.latestMessage.content.length > 60\n                          ? item.latestMessage.content.slice(0, 60) + '...'\n                          : item.latestMessage.content\n                        : ''}\n                    </p>\n                  </div>\n\n                  <p className='time'>\n                    {item.latestMessage\n                      ? moment(item.latestMessage.sentAt).fromNow()\n                      : ''}\n                  </p>\n                </div>\n              )\n            })}\n        </div>\n      </>\n    )\n  }\n}\n\nexport default withTranslation()(MessageListSection)\n"]},"metadata":{},"sourceType":"module"}