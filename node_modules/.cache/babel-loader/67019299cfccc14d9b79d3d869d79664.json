{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/dashboard/groupDetail2/components/ModalEditRole/ModalAssignRole.jsx\";\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport './ModalAssignRole.less';\nimport { getProfile, newNotification, parseError } from '@utils';\nimport client, { M_UPDATE_ROLE_NODE } from '@graphql';\nvar Option = _Select.Option;\n\nvar ModalAssignRole = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ModalAssignRole, _React$PureComponent);\n\n  var _super = _createSuper(ModalAssignRole);\n\n  function ModalAssignRole() {\n    var _this;\n\n    _classCallCheck(this, ModalAssignRole);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      visible: false\n    };\n    _this.listRoles = [{\n      name: \"User Group\",\n      code: 'R_NODE_USER'\n    }, {\n      name: \"Mod Group\",\n      code: 'R_NODE_MOD'\n    }, {\n      name: \"Admin Group\",\n      code: 'R_NODE_ADMIN'\n    }];\n\n    _this.showModal = function () {\n      _this.setState({\n        visible: true\n      });\n    };\n\n    _this.handleOk = function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          _assertThisInitialize2 = _assertThisInitialize.props,\n          queryNode = _assertThisInitialize2.queryNode,\n          node = _assertThisInitialize2.node,\n          user = _assertThisInitialize2.user;\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          var roleCode = values.roleCode;\n          client.mutate({\n            mutation: M_UPDATE_ROLE_NODE,\n            variables: {\n              nodeId: node._id,\n              userId: user._id,\n              roleCode: roleCode\n            }\n          }).then(function (_ref) {\n            var data = _ref.data;\n\n            if (!data.updateRoleNode) {\n              throw new Error('group.updateRoleNodeError');\n            }\n\n            newNotification(_this.props.i18n.t('group.updateRoleNodeSuccess'), 'success');\n            queryNode(node._id);\n\n            _this.handleCancel();\n          }).catch(function (err) {\n            newNotification(_this.props.i18n.t(parseError(err)), 'danger');\n          });\n        }\n      });\n    };\n\n    _this.handleCancel = function () {\n      _this.setState({\n        visible: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ModalAssignRole, [{\n    key: \"render\",\n    value: function render() {\n      var _getProfile,\n          _getProfile$role,\n          _this2 = this;\n\n      var _this$props = this.props,\n          labelButton = _this$props.labelButton,\n          i18n = _this$props.i18n,\n          user = _this$props.user,\n          node = _this$props.node;\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var roleCode = (_getProfile = getProfile({\n        profiles: user.profiles,\n        nodeId: node._id\n      })) === null || _getProfile === void 0 ? void 0 : (_getProfile$role = _getProfile.role) === null || _getProfile$role === void 0 ? void 0 : _getProfile$role.code;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_Button, {\n        type: \"primary\",\n        ghost: true,\n        className: \"btn-assign-role\",\n        onClick: this.showModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, labelButton), /*#__PURE__*/React.createElement(_Modal, {\n        visible: this.state.visible,\n        onOk: this.handleOk,\n        onCancel: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(_Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(_Form.Item, {\n        label: i18n.t('user.username'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      }, getFieldDecorator('username', {\n        initialValue: user.username\n      })( /*#__PURE__*/React.createElement(_Input, {\n        disabled: true,\n        placeholder: i18n.t('user.username'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 18\n        }\n      }))), /*#__PURE__*/React.createElement(_Form.Item, {\n        label: i18n.t('group.labelSelectRole'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, getFieldDecorator('roleCode', {\n        initialValue: roleCode,\n        rules: [{\n          required: true,\n          message: i18n.t('group.pleaseSelectRole')\n        }]\n      })( /*#__PURE__*/React.createElement(_Select, {\n        style: {\n          width: '100%'\n        },\n        placeholder: i18n.t('group.labelSelectRole'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, this.listRoles.map(function (obj) {\n        return /*#__PURE__*/React.createElement(Option, {\n          value: obj.code,\n          key: obj.code,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }\n        }, obj.name);\n      })))))));\n    }\n  }]);\n\n  return ModalAssignRole;\n}(React.PureComponent);\n\nexport default withTranslation()(_Form.create({\n  name: 'assign-role'\n})(ModalAssignRole));","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/dashboard/groupDetail2/components/ModalEditRole/ModalAssignRole.jsx"],"names":["React","withTranslation","getProfile","newNotification","parseError","client","M_UPDATE_ROLE_NODE","Option","ModalAssignRole","state","visible","listRoles","name","code","showModal","setState","handleOk","props","queryNode","node","user","form","validateFields","err","values","roleCode","mutate","mutation","variables","nodeId","_id","userId","then","data","updateRoleNode","Error","i18n","t","handleCancel","catch","labelButton","getFieldDecorator","profiles","role","initialValue","username","rules","required","message","width","map","obj","PureComponent","create"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Button, Modal, Input, Form, Select } from 'antd'\nimport './ModalAssignRole.less'\nimport { getProfile, newNotification, parseError } from '@utils'\nimport client, { M_UPDATE_ROLE_NODE } from '@graphql'\nconst { Option } = Select\n\nclass ModalAssignRole extends React.PureComponent {\n  state = { visible: false }\n\n  listRoles = [\n    {\n      name: \"User Group\",\n      code: 'R_NODE_USER'\n    },\n    {\n      name: \"Mod Group\",\n      code: 'R_NODE_MOD'\n    },\n    {\n      name: \"Admin Group\",\n      code: 'R_NODE_ADMIN'\n    }\n  ]\n\n  showModal = () => {\n    this.setState({\n      visible: true\n    })\n  }\n\n  handleOk = () => {\n    const {\n      props: { queryNode, node, user },\n    } = this\n\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        const { roleCode } = values\n        client\n          .mutate({\n            mutation: M_UPDATE_ROLE_NODE,\n            variables: {\n              nodeId: node._id,\n              userId: user._id,\n              roleCode\n            }\n          }).then(({ data }) => {\n            if (!data.updateRoleNode) {\n              throw new Error('group.updateRoleNodeError')\n            }\n\n            newNotification(this.props.i18n.t('group.updateRoleNodeSuccess'), 'success')\n            queryNode(node._id)\n            this.handleCancel()\n          }).catch(err => {\n            newNotification(this.props.i18n.t(parseError(err)), 'danger')\n          })\n      }\n    })\n  }\n\n  handleCancel = () => {\n    this.setState({\n      visible: false\n    })\n  }\n\n  render() {\n    const {\n      props: { labelButton, i18n, user, node }\n    } = this\n\n    const { getFieldDecorator } = this.props.form\n\n    const roleCode = getProfile({ profiles: user.profiles, nodeId: node._id })?.role?.code\n\n    return (\n      <>\n\n        <Button type='primary' ghost className='btn-assign-role' onClick={this.showModal}>\n          {labelButton}\n        </Button>\n\n\n        <Modal\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <Form>\n            <Form.Item label={i18n.t('user.username')}>\n              {getFieldDecorator('username', {\n                initialValue: user.username\n              })(<Input disabled placeholder={i18n.t('user.username')} />)}\n            </Form.Item>\n\n            <Form.Item label={i18n.t('group.labelSelectRole')}>\n              {getFieldDecorator('roleCode', {\n                initialValue: roleCode,\n                rules: [\n                  {\n                    required: true,\n                    message: i18n.t('group.pleaseSelectRole')\n                  }\n                ]\n              })(\n\n                <Select\n                  style={{ width: '100%' }}\n                  placeholder={i18n.t('group.labelSelectRole')}\n                >\n                  {this.listRoles.map(obj => (\n                    <Option value={obj.code} key={obj.code}>\n                      {obj.name}\n                    </Option>\n                  ))}\n                </Select>\n              )}\n            </Form.Item>\n          </Form>\n\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withTranslation()(Form.create({ name: 'assign-role' })(ModalAssignRole))\n"]},"metadata":{},"sourceType":"module"}