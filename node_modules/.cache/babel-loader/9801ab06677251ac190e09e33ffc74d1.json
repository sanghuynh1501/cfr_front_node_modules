{"ast":null,"code":"import _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/ChatCollapse/index.jsx\";\n\nimport React from 'react';\nimport moment from 'moment';\nimport { inject, observer } from 'mobx-react';\nimport { returnError } from '@utils';\nimport { AvatarComponent } from '@components';\nimport { client, Q_MESSAGE_LIST, S_ON_MESSAGE_LIST } from '@graphql';\nvar ChatCollapse = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChatCollapse, _React$Component);\n\n  var _super = _createSuper(ChatCollapse);\n\n  function ChatCollapse(props) {\n    var _this;\n\n    _classCallCheck(this, ChatCollapse);\n\n    _this = _super.call(this, props);\n\n    _this.queryMessageList = function () {\n      return client.query({\n        query: Q_MESSAGE_LIST,\n        variables: {\n          conferenceId: _this.props.conferenceState.conference._id\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref2) {\n        var messageList = _ref2.data.messageList;\n\n        _this.setState({\n          messageList: messageList\n        });\n      }).catch(function (error) {\n        return returnError('messageList', {\n          error: error,\n          errorMessage: 'Failed to get message list, try again later!'\n        });\n      });\n    };\n\n    _this.handleOpenChatBox = function (data) {\n      var conferenceState = _this.props.conferenceState;\n      conferenceState.setState({\n        idChatUser: data._id,\n        isShowBoxChat: true,\n        infoChatUser: data\n      });\n\n      _this.setState(function (prevState) {\n        return {\n          messageList: _toConsumableArray(prevState.messageList.map(function (item) {\n            if (item.with._id === data._id) {\n              conferenceState.setState({\n                unreadMessage: conferenceState.unreadMessage - item.unread < 0 ? 0 : conferenceState.unreadMessage - item.unread\n              });\n              return _objectSpread({}, item, {\n                unread: 0\n              });\n            }\n\n            return item;\n          }))\n        };\n      });\n    };\n\n    _this.handleSearch = function (e) {\n      _this.setState({\n        textSearch: e.currentTarget.value\n      });\n    };\n\n    _this.convertDataSearch = function () {\n      return _this.state.messageList.filter(function (item) {\n        return item.with.name.toLowerCase().search(_this.state.textSearch.toLowerCase()) !== -1;\n      });\n    };\n\n    _this.state = {\n      messageList: [],\n      positionMessage: 0,\n      textSearch: '',\n      value: ''\n    };\n    return _this;\n  }\n\n  _createClass(ChatCollapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.queryMessageList();\n      this.subscriber = client.subscribe({\n        query: S_ON_MESSAGE_LIST,\n        variables: {\n          conferenceId: this.props.conferenceState.conference._id\n        },\n        fetchPolicy: 'network-only'\n      }).subscribe(function (_ref3) {\n        var onMessageList = _ref3.data.onMessageList;\n\n        _this2.setState(function (prevState) {\n          return {\n            messageList: [].concat(_toConsumableArray(prevState.messageList.filter(function (_ref4) {\n              var _id = _ref4.with._id;\n              return _id === onMessageList.sender;\n            }).map(function (wth) {\n              return _objectSpread({}, wth, {\n                latestMessage: onMessageList,\n                unread: onMessageList.sender === _this2.props.conferenceState.idChatUser ? 0 : wth.unread + 1\n              });\n            })), _toConsumableArray(prevState.messageList.filter(function (_ref5) {\n              var _id = _ref5.with._id;\n              return _id !== onMessageList.sender;\n            })))\n          };\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var conferenceState = this.props.conferenceState,\n          _this$state = this.state,\n          textSearch = _this$state.textSearch,\n          messageList = _this$state.messageList;\n      var selectedTabs = [conferenceState.isShowPoll, conferenceState.isShowPollManagement, conferenceState.isShowParticipants, conferenceState.isShowMessages, conferenceState.isShowAttendancesManagement, conferenceState.isShowQnAManagement, conferenceState.isShowQnA].filter(function (e) {\n        return e;\n      }).length;\n      var data = textSearch.length ? this.convertDataSearch() : messageList;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chats-container\",\n        style: {\n          position: 'relative',\n          height: \"calc(100vh - \".concat(selectedTabs * 20 + 1, \"px)\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper-search-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"search\",\n        name: \"search\",\n        placeholder: \"Search\",\n        onKeyUp: this.handleSearch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper-list-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, data.map(function (item) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"chat-item\",\n          key: item.with._id,\n          onClick: function onClick() {\n            return _this3.handleOpenChatBox(item.with);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"wrapper-avatar\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(AvatarComponent, Object.assign({}, item.with, {\n          isShowTooltip: false,\n          size: 50,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 19\n          }\n        })), item.unread > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"unread\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 38\n          }\n        }, item.unread) : /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 84\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"wrapper-content \".concat(item.latestMessage ? 'display-has-message' : 'display-not-message'),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"header-chat-item\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"name\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }\n        }, item.with.name), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"time\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }\n        }, item.latestMessage ? moment(item.latestMessage.sentAt).fromNow() : '')), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"content-chat-item\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 19\n          }\n        }, item.latestMessage ? /*#__PURE__*/React.createElement(\"p\", {\n          className: item.unread > 0 ? 'type-unread' : '',\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 23\n          }\n        }, item.latestMessage.content) : /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }\n        }))));\n      })));\n    }\n  }]);\n\n  return ChatCollapse;\n}(React.Component), _temp)) || _class) || _class);\nexport default ChatCollapse;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/ChatCollapse/index.jsx"],"names":["React","moment","inject","observer","returnError","AvatarComponent","client","Q_MESSAGE_LIST","S_ON_MESSAGE_LIST","ChatCollapse","stores","props","queryMessageList","query","variables","conferenceId","conferenceState","conference","_id","fetchPolicy","then","messageList","data","setState","catch","error","errorMessage","handleOpenChatBox","idChatUser","isShowBoxChat","infoChatUser","prevState","map","item","with","unreadMessage","unread","handleSearch","e","textSearch","currentTarget","value","convertDataSearch","state","filter","name","toLowerCase","search","positionMessage","subscriber","subscribe","onMessageList","sender","wth","latestMessage","selectedTabs","isShowPoll","isShowPollManagement","isShowParticipants","isShowMessages","isShowAttendancesManagement","isShowQnAManagement","isShowQnA","length","position","height","sentAt","fromNow","content","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport moment from 'moment'\nimport { inject, observer } from 'mobx-react'\n\nimport { returnError } from '@utils'\nimport { AvatarComponent } from '@components'\nimport { client, Q_MESSAGE_LIST, S_ON_MESSAGE_LIST } from '@graphql'\n\n@inject(({ stores }) => stores)\n@observer\nclass ChatCollapse extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      messageList: [],\n      positionMessage: 0,\n      textSearch: '',\n      value: ''\n    }\n  }\n\n  componentDidMount() {\n    this.queryMessageList()\n\n    this.subscriber = client\n      .subscribe({\n        query: S_ON_MESSAGE_LIST,\n        variables: { conferenceId: this.props.conferenceState.conference._id },\n        fetchPolicy: 'network-only'\n      })\n      .subscribe(({ data: { onMessageList } }) => {\n        this.setState(prevState => ({\n          messageList: [\n            ...prevState.messageList\n              .filter(({ with: { _id } }) => _id === onMessageList.sender)\n              .map(wth => ({\n                ...wth,\n                latestMessage: onMessageList,\n                unread: onMessageList.sender === this.props.conferenceState.idChatUser ? 0 : wth.unread + 1\n              })),\n            ...prevState.messageList.filter(({ with: { _id } }) => _id !== onMessageList.sender)\n          ]\n        }))\n      })\n  }\n\n  queryMessageList = () =>\n    client\n      .query({\n        query: Q_MESSAGE_LIST,\n        variables: { conferenceId: this.props.conferenceState.conference._id },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { messageList } }) => {\n        this.setState({\n          messageList\n        })\n      })\n      .catch(error =>\n        returnError('messageList', {\n          error,\n          errorMessage: 'Failed to get message list, try again later!'\n        })\n      )\n\n  handleOpenChatBox = data => {\n    const { conferenceState } = this.props\n\n    conferenceState.setState({\n      idChatUser: data._id,\n      isShowBoxChat: true,\n      infoChatUser: data\n    })\n\n    this.setState(prevState => ({\n      messageList: [\n        ...prevState.messageList.map(item => {\n          if (item.with._id === data._id) {\n            conferenceState.setState({\n              unreadMessage:\n                conferenceState.unreadMessage - item.unread < 0 ? 0 : conferenceState.unreadMessage - item.unread\n            })\n\n            return {\n              ...item,\n              unread: 0\n            }\n          }\n          return item\n        })\n      ]\n    }))\n  }\n\n  handleSearch = e => {\n    this.setState({ textSearch: e.currentTarget.value })\n  }\n\n  convertDataSearch = () => {\n    return this.state.messageList.filter(\n      item => item.with.name.toLowerCase().search(this.state.textSearch.toLowerCase()) !== -1\n    )\n  }\n\n  render() {\n    const {\n      props: { conferenceState },\n      state: { textSearch, messageList }\n    } = this\n    const selectedTabs = [\n      conferenceState.isShowPoll,\n      conferenceState.isShowPollManagement,\n      conferenceState.isShowParticipants,\n      conferenceState.isShowMessages,\n      conferenceState.isShowAttendancesManagement,\n      conferenceState.isShowQnAManagement,\n      conferenceState.isShowQnA\n    ].filter(e => e).length\n\n    const data = textSearch.length ? this.convertDataSearch() : messageList\n\n    return (\n      <div\n        className='chats-container'\n        style={{\n          position: 'relative',\n          height: `calc(100vh - ${selectedTabs * 20 + 1}px)`\n        }}\n      >\n        <div className='wrapper-search-bar'>\n          <input type='search' name='search' placeholder='Search' onKeyUp={this.handleSearch} />\n        </div>\n        <div className='wrapper-list-user'>\n          {data.map(item => {\n            return (\n              <div className='chat-item' key={item.with._id} onClick={() => this.handleOpenChatBox(item.with)}>\n                <div className='wrapper-avatar'>\n                  <AvatarComponent {...item.with} isShowTooltip={false} size={50} />\n                  {item.unread > 0 ? <div className='unread'>{item.unread}</div> : <React.Fragment />}\n                </div>\n                <div\n                  className={`wrapper-content ${item.latestMessage ? 'display-has-message' : 'display-not-message'}`}\n                >\n                  <div className='header-chat-item'>\n                    <span className='name'>{item.with.name}</span>\n                    <span className='time'>\n                      {item.latestMessage ? moment(item.latestMessage.sentAt).fromNow() : ''}\n                    </span>\n                  </div>\n                  <div className='content-chat-item'>\n                    {item.latestMessage ? (\n                      <p className={item.unread > 0 ? 'type-unread' : ''}>{item.latestMessage.content}</p>\n                    ) : (\n                        <React.Fragment />\n                      )}\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ChatCollapse\n"]},"metadata":{},"sourceType":"module"}