{"ast":null,"code":"import \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/QnACollapse/SubmitQuestion.jsx\";\nimport React from 'react';\nimport { client, M_SUBMIT_QNA } from '@graphql';\nimport { newNotification } from '@utils';\n\nvar SubmitQuestion = /*#__PURE__*/function (_React$Component) {\n  _inherits(SubmitQuestion, _React$Component);\n\n  var _super = _createSuper(SubmitQuestion);\n\n  function SubmitQuestion(props) {\n    var _this;\n\n    _classCallCheck(this, SubmitQuestion);\n\n    _this = _super.call(this, props);\n\n    _this.handleSubmitQNA = function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          _assertThisInitialize2 = _assertThisInitialize.state,\n          question = _assertThisInitialize2.inputState,\n          isAnonymous = _assertThisInitialize2.isAnonymous,\n          activeQnA = _assertThisInitialize.props.activeQnA;\n\n      client.mutate({\n        mutation: M_SUBMIT_QNA,\n        variables: {\n          newQNAInput: {\n            qnaSessionId: activeQnA._id,\n            question: question,\n            isAnonymous: isAnonymous\n          }\n        }\n      }).then(function (_ref) {\n        var createQNA = _ref.data.createQNA;\n\n        if (createQNA) {\n          _this.setState({\n            inputState: ''\n          }, function () {\n            return newNotification('Thành công! ', 'success', {\n              animationIn: ['animated', 'fadeIn']\n            });\n          });\n        }\n      }).catch(function (error) {\n        return newNotification('Please try again later!', 'danger');\n      });\n    };\n\n    _this.state = {\n      inputState: '',\n      isAnonymous: false\n    };\n    return _this;\n  }\n\n  _createClass(SubmitQuestion, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          isAnonymous = _this$state.isAnonymous,\n          inputState = _this$state.inputState;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"submit-question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputHolder\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(_Input, {\n        value: inputState,\n        onChange: function onChange(_ref2) {\n          var inputState = _ref2.target.value;\n          return _this2.setState({\n            inputState: inputState\n          });\n        },\n        onPressEnter: this.handleSubmitQNA,\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(_Button, {\n        size: \"small\",\n        type: \"primary\",\n        onClick: this.handleSubmitQNA,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, \"G\\u1EEDi c\\xE2u h\\u1ECFi \", /*#__PURE__*/React.createElement(_Icon, {\n        type: \"upload\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(_Checkbox, {\n        checked: isAnonymous,\n        onChange: function onChange(_ref3) {\n          var isAnonymous = _ref3.target.checked;\n          return _this2.setState({\n            isAnonymous: isAnonymous\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }, \"C\\xE2u h\\u1ECFi \\u1EA9n danh\"));\n    }\n  }]);\n\n  return SubmitQuestion;\n}(React.Component);\n\nexport default SubmitQuestion;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/QnACollapse/SubmitQuestion.jsx"],"names":["React","client","M_SUBMIT_QNA","newNotification","SubmitQuestion","props","handleSubmitQNA","state","question","inputState","isAnonymous","activeQnA","mutate","mutation","variables","newQNAInput","qnaSessionId","_id","then","createQNA","data","setState","animationIn","catch","error","target","value","checked","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button, Checkbox, Icon, Input } from 'antd'\nimport { client, M_SUBMIT_QNA } from '@graphql'\nimport { newNotification } from '@utils'\n\nclass SubmitQuestion extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputState: '',\n      isAnonymous: false\n    }\n  }\n\n  handleSubmitQNA = () => {\n    const {\n      state: { inputState: question, isAnonymous },\n      props: { activeQnA }\n    } = this\n\n    client\n      .mutate({\n        mutation: M_SUBMIT_QNA,\n        variables: {\n          newQNAInput: {\n            qnaSessionId: activeQnA._id,\n            question,\n            isAnonymous\n          }\n        }\n      })\n      .then(({ data: { createQNA } }) => {\n        if (createQNA) {\n          this.setState({ inputState: '' }, () =>\n            newNotification('Thành công! ', 'success', {\n              animationIn: ['animated', 'fadeIn']\n            })\n          )\n        }\n      })\n      .catch(error => {\n        return newNotification('Please try again later!', 'danger')\n      })\n  }\n\n  render() {\n    const {\n      state: { isAnonymous, inputState }\n    } = this\n\n    return (\n      <div className='submit-question'>\n        <div className='inputHolder'>\n          <Input\n            value={inputState}\n            onChange={({ target: { value: inputState } }) => this.setState({ inputState })}\n            onPressEnter={this.handleSubmitQNA}\n            size='small'\n          />\n          <Button size='small' type='primary' onClick={this.handleSubmitQNA}>\n            Gửi câu hỏi <Icon type='upload' />\n          </Button>\n        </div>\n        <Checkbox\n          checked={isAnonymous}\n          onChange={({ target: { checked: isAnonymous } }) => this.setState({ isAnonymous })}\n        >\n          Câu hỏi ẩn danh\n        </Checkbox>\n      </div>\n    )\n  }\n}\n\nexport default SubmitQuestion\n"]},"metadata":{},"sourceType":"module"}