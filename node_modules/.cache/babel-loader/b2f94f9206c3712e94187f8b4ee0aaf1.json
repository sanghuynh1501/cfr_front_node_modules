{"ast":null,"code":"import _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/components/Canvas.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Stage, Layer } from 'react-konva';\nimport { FreePathDrawable, ArrowDrawable, CircleDrawable, RectDrawable } from './ImageDraw';\nimport { _drawType } from '@constants';\nvar Canvas = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Canvas, _React$PureComponent);\n\n  var _super = _createSuper(Canvas);\n\n  function Canvas(props) {\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    _this = _super.call(this, props);\n\n    _this._canDrag = function () {\n      var _this$props$conferenc = _this.props.conferenceState,\n          myUserId = _this$props$conferenc.myUserId,\n          fileOpen = _this$props$conferenc.fileOpen;\n      return myUserId === fileOpen.uploadedBy._id;\n    };\n\n    _this._getNewDrawableBasedOnType = function (x, y, type, heightLine, colorLine, points, draggable, id) {\n      var drawableClasses = {\n        FreePathDrawable: FreePathDrawable,\n        ArrowDrawable: ArrowDrawable,\n        CircleDrawable: CircleDrawable,\n        RectDrawable: RectDrawable\n      };\n      return new drawableClasses[type](x, y, heightLine, colorLine, points, draggable, _this._handleDragEnd, id);\n    };\n\n    _this._handleMouseDown = function (e) {\n      var _this$props$conferenc2 = _this.props.conferenceState,\n          newDrawable = _this$props$conferenc2.newDrawable,\n          newDrawableType = _this$props$conferenc2.newDrawableType,\n          heightLine = _this$props$conferenc2.heightLine,\n          colorLine = _this$props$conferenc2.colorLine,\n          myUserId = _this$props$conferenc2.myUserId,\n          fileOpen = _this$props$conferenc2.fileOpen,\n          activeDraw = _this$props$conferenc2.activeDraw,\n          setState = _this$props$conferenc2.setState;\n\n      if (newDrawable.length === 0 && fileOpen.uploadedBy._id === myUserId && activeDraw && newDrawableType !== _drawType.CURSOR) {\n        var _e$target$getStage$ge = e.target.getStage().getPointerPosition(),\n            x = _e$target$getStage$ge.x,\n            y = _e$target$getStage$ge.y;\n\n        var newDrawableToDraw = _this._getNewDrawableBasedOnType(x, y, newDrawableType, heightLine, colorLine, _this._canDrag());\n\n        setState({\n          newDrawable: [newDrawableToDraw]\n        });\n      }\n\n      if (_this._canDrag()) {\n        // const clickedOnEmpty = e.target === e.target.getStage();\n        console.log();\n      }\n    };\n\n    _this._handleMouseUp = function (e) {\n      var _this$props$conferenc3 = _this.props.conferenceState,\n          newDrawable = _this$props$conferenc3.newDrawable,\n          drawables = _this$props$conferenc3.drawables,\n          setState = _this$props$conferenc3.setState,\n          myUserId = _this$props$conferenc3.myUserId,\n          fileOpen = _this$props$conferenc3.fileOpen,\n          activeDraw = _this$props$conferenc3.activeDraw,\n          newDrawableType = _this$props$conferenc3.newDrawableType;\n\n      if (newDrawable.length === 1 && fileOpen.uploadedBy._id === myUserId && activeDraw && newDrawableType !== _drawType.CURSOR) {\n        var _e$target$getStage$ge2 = e.target.getStage().getPointerPosition(),\n            x = _e$target$getStage$ge2.x,\n            y = _e$target$getStage$ge2.y;\n\n        var drawableToAdd = newDrawable[0];\n        drawableToAdd.registerMovement(x, y);\n        drawables.push(drawableToAdd);\n\n        _this.props.sendDraw(drawables.map(function (drawable) {\n          return JSON.stringify(drawable);\n        }));\n\n        setState({\n          newDrawable: [],\n          drawables: drawables\n        });\n      }\n    };\n\n    _this._handleMouseMove = function (e) {\n      var _this$props$conferenc4 = _this.props.conferenceState,\n          newDrawable = _this$props$conferenc4.newDrawable,\n          setState = _this$props$conferenc4.setState,\n          myUserId = _this$props$conferenc4.myUserId,\n          fileOpen = _this$props$conferenc4.fileOpen,\n          activeDraw = _this$props$conferenc4.activeDraw,\n          newDrawableType = _this$props$conferenc4.newDrawableType;\n\n      if (newDrawable.length === 1 && fileOpen.uploadedBy._id === myUserId && activeDraw && newDrawableType !== _drawType.CURSOR) {\n        var _e$target$getStage$ge3 = e.target.getStage().getPointerPosition(),\n            x = _e$target$getStage$ge3.x,\n            y = _e$target$getStage$ge3.y;\n\n        var updatedNewDrawable = newDrawable[0];\n        updatedNewDrawable.registerMovement(x, y);\n        setState({\n          newDrawable: [updatedNewDrawable]\n        });\n      }\n    };\n\n    _this._handleDragEnd = function (e) {\n      var drawables = _this.props.conferenceState.drawables;\n      drawables.map(function (draw) {\n        if (draw.id === e.target.attrs.id) {\n          if (draw.type !== _drawType.FREEPATH) {\n            draw.startx = draw.startx + e.target.attrs.x;\n            draw.starty = draw.starty + e.target.attrs.y;\n            draw.x = draw.x + e.target.attrs.x;\n            draw.y = draw.y + e.target.attrs.y;\n            return draw;\n          }\n\n          return draw;\n        }\n\n        return draw;\n      });\n\n      _this.props.sendDraw(drawables.map(function (drawable) {\n        return JSON.stringify(drawable);\n      }));\n    };\n\n    _this.state = {\n      drawing: true\n    };\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props$conferenc5 = this.props.conferenceState,\n          fileOpen = _this$props$conferenc5.fileOpen,\n          drawData = _this$props$conferenc5.drawData,\n          setState = _this$props$conferenc5.setState;\n      var fileLine = drawData.find(function (draw) {\n        return draw.imageUrl === fileOpen.resources[0];\n      });\n\n      if (fileLine && fileLine.line.length !== 0) {\n        var newDrawables = [];\n        fileLine.line.map(function (line) {\n          var objectLine = JSON.parse(line);\n\n          var newDrawable = _this2._getNewDrawableBasedOnType(objectLine.startx, objectLine.starty, objectLine.type, objectLine.heightLine, objectLine.colorLine, null, _this2._canDrag(), objectLine.id);\n\n          if (objectLine.type === _drawType.FREEPATH) {\n            newDrawable.renderPoints(objectLine.points);\n          } else {\n            newDrawable.registerMovement(objectLine.x, objectLine.y);\n          }\n\n          newDrawables.push(newDrawable);\n          return true;\n        });\n        setState({\n          drawables: newDrawables\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this3 = this;\n\n      var _this$props$conferenc6 = this.props.conferenceState,\n          drawables = _this$props$conferenc6.drawables,\n          fileOpen = _this$props$conferenc6.fileOpen,\n          drawData = _this$props$conferenc6.drawData,\n          setState = _this$props$conferenc6.setState;\n      var fileLine = drawData.find(function (draw) {\n        return draw.imageUrl === fileOpen.resources[0];\n      });\n      if (!fileLine && drawables.length !== 0) return setState({\n        drawables: []\n      });\n      if (fileLine && fileLine.line.length === 0 && drawables.length !== 0) return setState({\n        drawables: []\n      });\n\n      if (fileLine && fileLine.line.length !== drawables.length) {\n        if (fileLine.line.length !== 0) {\n          var newDrawables = [];\n          fileLine.line.map(function (line) {\n            var objectLine = JSON.parse(line);\n\n            var newDrawable = _this3._getNewDrawableBasedOnType(objectLine.startx, objectLine.starty, objectLine.type, objectLine.heightLine, objectLine.colorLine, null, _this3._canDrag(), objectLine.id);\n\n            if (objectLine.type === _drawType.FREEPATH) {\n              newDrawable.renderPoints(objectLine.points);\n            } else {\n              newDrawable.registerMovement(objectLine.x, objectLine.y);\n            }\n\n            newDrawables.push(newDrawable);\n            return true;\n          });\n          setState({\n            drawables: newDrawables\n          });\n          return true;\n        }\n\n        return false;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props$conferenc7 = this.props.conferenceState,\n          widthImage = _this$props$conferenc7.widthImage,\n          heightImage = _this$props$conferenc7.heightImage,\n          drawables = _this$props$conferenc7.drawables,\n          newDrawable = _this$props$conferenc7.newDrawable,\n          drawData = _this$props$conferenc7.drawData,\n          fileOpen = _this$props$conferenc7.fileOpen;\n\n      var _lineRender = drawData.find(function (draw) {\n        return draw.imageUrl === fileOpen.resources[0];\n      });\n\n      var drawRender = [].concat(_toConsumableArray(drawables), _toConsumableArray(newDrawable));\n      return /*#__PURE__*/React.createElement(Stage, {\n        key: _lineRender ? _lineRender.imageUrl : 'none',\n        ref: function ref(cb) {\n          return _this4.stageDraw = cb;\n        },\n        width: widthImage,\n        height: heightImage,\n        onMouseDown: this._handleMouseDown,\n        onMouseUp: this._handleMouseUp,\n        onMouseMove: this._handleMouseMove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        ref: function ref(cb) {\n          return _this4.layerDraw = cb;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 9\n        }\n      }, drawRender.map(function (drawable) {\n        return drawable.render();\n      })));\n    }\n  }]);\n\n  return Canvas;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default Canvas;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/components/Canvas.jsx"],"names":["React","inject","observer","Stage","Layer","FreePathDrawable","ArrowDrawable","CircleDrawable","RectDrawable","_drawType","Canvas","stores","props","_canDrag","conferenceState","myUserId","fileOpen","uploadedBy","_id","_getNewDrawableBasedOnType","x","y","type","heightLine","colorLine","points","draggable","id","drawableClasses","_handleDragEnd","_handleMouseDown","e","newDrawable","newDrawableType","activeDraw","setState","length","CURSOR","target","getStage","getPointerPosition","newDrawableToDraw","console","log","_handleMouseUp","drawables","drawableToAdd","registerMovement","push","sendDraw","map","drawable","JSON","stringify","_handleMouseMove","updatedNewDrawable","draw","attrs","FREEPATH","startx","starty","state","drawing","drawData","fileLine","find","imageUrl","resources","line","newDrawables","objectLine","parse","renderPoints","widthImage","heightImage","_lineRender","drawRender","cb","stageDraw","layerDraw","render","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Stage, Layer } from 'react-konva'\n\nimport { FreePathDrawable, ArrowDrawable, CircleDrawable, RectDrawable } from './ImageDraw'\nimport { _drawType } from '@constants'\n\n@inject(({ stores }) => stores)\n@observer\nclass Canvas extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      drawing: true,\n    }\n  }\n\n  componentDidMount() {\n    const {\n      conferenceState: { fileOpen, drawData, setState }\n    } = this.props\n\n    let fileLine = drawData.find(draw => draw.imageUrl === fileOpen.resources[0])\n    if (fileLine && fileLine.line.length !== 0) {\n      let newDrawables = []\n      fileLine.line.map(line => {\n        let objectLine = JSON.parse(line)\n        const newDrawable = this._getNewDrawableBasedOnType(\n          objectLine.startx,\n          objectLine.starty,\n          objectLine.type,\n          objectLine.heightLine, objectLine.colorLine,\n          null,\n          this._canDrag(),\n          objectLine.id\n        );\n\n\n        if (objectLine.type === _drawType.FREEPATH) {\n          newDrawable.renderPoints(objectLine.points)\n        } else {\n          newDrawable.registerMovement(objectLine.x, objectLine.y)\n        }\n        newDrawables.push(newDrawable)\n        return true\n      })\n      setState({ drawables: newDrawables })\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      conferenceState: { drawables, fileOpen, drawData, setState }\n    } = this.props\n\n\n\n    let fileLine = drawData.find(draw => draw.imageUrl === fileOpen.resources[0])\n    if (!fileLine && drawables.length !== 0) return setState({ drawables: [] })\n    if (fileLine && fileLine.line.length === 0 && drawables.length !== 0) return setState({ drawables: [] })\n    if (fileLine && fileLine.line.length !== drawables.length) {\n      if (fileLine.line.length !== 0) {\n        let newDrawables = []\n        fileLine.line.map(line => {\n          let objectLine = JSON.parse(line)\n          const newDrawable = this._getNewDrawableBasedOnType(\n            objectLine.startx,\n            objectLine.starty,\n            objectLine.type,\n            objectLine.heightLine, objectLine.colorLine,\n            null,\n            this._canDrag(),\n            objectLine.id\n          );\n\n          if (objectLine.type === _drawType.FREEPATH) {\n            newDrawable.renderPoints(objectLine.points)\n          } else {\n            newDrawable.registerMovement(objectLine.x, objectLine.y)\n          }\n\n          newDrawables.push(newDrawable)\n          return true\n        })\n        setState({ drawables: newDrawables })\n        return true\n      }\n      return false\n    }\n  }\n\n  _canDrag = () => {\n    const { myUserId, fileOpen } = this.props.conferenceState\n    return myUserId === fileOpen.uploadedBy._id\n  }\n\n  _getNewDrawableBasedOnType = (x, y, type, heightLine, colorLine, points, draggable, id) => {\n    const drawableClasses = {\n      FreePathDrawable,\n      ArrowDrawable,\n      CircleDrawable,\n      RectDrawable\n    };\n    return new drawableClasses[type](x, y, heightLine,\n      colorLine, points, draggable, this._handleDragEnd, id);\n  };\n\n  _handleMouseDown = e => {\n    const { newDrawable, newDrawableType, heightLine, colorLine, myUserId, fileOpen, activeDraw, setState } = this.props.conferenceState;\n    if (newDrawable.length === 0 && fileOpen.uploadedBy._id === myUserId && activeDraw && newDrawableType !== _drawType.CURSOR) {\n      const { x, y } = e.target.getStage().getPointerPosition();\n      const newDrawableToDraw = this._getNewDrawableBasedOnType(\n        x,\n        y,\n        newDrawableType,\n        heightLine, colorLine,\n        this._canDrag()\n      );\n      setState({\n        newDrawable: [newDrawableToDraw]\n      });\n    }\n\n    if (this._canDrag()) {\n      // const clickedOnEmpty = e.target === e.target.getStage();\n      console.log()\n    }\n  };\n\n  _handleMouseUp = e => {\n    const { newDrawable, drawables, setState, myUserId, fileOpen, activeDraw, newDrawableType } = this.props.conferenceState;\n    if (newDrawable.length === 1 && fileOpen.uploadedBy._id === myUserId && activeDraw && newDrawableType !== _drawType.CURSOR) {\n      const { x, y } = e.target.getStage().getPointerPosition();\n      const drawableToAdd = newDrawable[0];\n      drawableToAdd.registerMovement(x, y);\n      drawables.push(drawableToAdd);\n      this.props.sendDraw(drawables.map(drawable => {\n        return JSON.stringify(drawable)\n      }))\n      setState({\n        newDrawable: [],\n        drawables\n      });\n    }\n  };\n\n  _handleMouseMove = e => {\n    const { newDrawable, setState, myUserId, fileOpen, activeDraw, newDrawableType } = this.props.conferenceState;\n    if (newDrawable.length === 1 && fileOpen.uploadedBy._id === myUserId && activeDraw && newDrawableType !== _drawType.CURSOR) {\n      const { x, y } = e.target.getStage().getPointerPosition();\n      const updatedNewDrawable = newDrawable[0];\n      updatedNewDrawable.registerMovement(x, y);\n      setState({\n        newDrawable: [updatedNewDrawable]\n      });\n    }\n  };\n\n  _handleDragEnd = e => {\n    const { drawables } = this.props.conferenceState\n    drawables.map(draw => {\n      if (draw.id === e.target.attrs.id) {\n        if (draw.type !== _drawType.FREEPATH) {\n          draw.startx = draw.startx + e.target.attrs.x\n          draw.starty = draw.starty + e.target.attrs.y\n          draw.x = draw.x + e.target.attrs.x\n          draw.y = draw.y + e.target.attrs.y\n\n          return draw\n        }\n        return draw\n      }\n      return draw\n    })\n\n    this.props.sendDraw(drawables.map(drawable => {\n      return JSON.stringify(drawable)\n    }))\n  }\n\n  render() {\n    const {\n      conferenceState: { widthImage, heightImage, drawables, newDrawable, drawData, fileOpen }\n    } = this.props\n\n    let _lineRender = drawData.find(draw => draw.imageUrl === fileOpen.resources[0])\n\n    const drawRender = [...drawables, ...newDrawable];\n\n    return (\n      <Stage\n        key={_lineRender ? _lineRender.imageUrl : 'none'}\n        ref={cb => this.stageDraw = cb}\n        width={widthImage}\n        height={heightImage}\n        onMouseDown={this._handleMouseDown}\n        onMouseUp={this._handleMouseUp}\n        onMouseMove={this._handleMouseMove}\n      >\n        <Layer ref={cb => this.layerDraw = cb}>\n          {drawRender.map(drawable => {\n            return drawable.render();\n          })}\n        </Layer>\n      </Stage>\n    )\n  }\n}\n\nexport default Canvas\n"]},"metadata":{},"sourceType":"module"}