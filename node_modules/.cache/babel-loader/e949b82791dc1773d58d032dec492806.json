{"ast":null,"code":"import _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/PollCollapse/NewQuestionForm.jsx\";\n\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { inject, observer } from 'mobx-react';\nimport { _pollType } from '@constants';\nimport NewQuestion from './NewQuestion';\nimport { Reorder, getItemStyle, getQuestionListStyle } from './_funcs';\nvar NewQuestionForm = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(NewQuestionForm, _React$Component);\n\n  var _super = _createSuper(NewQuestionForm);\n\n  function NewQuestionForm(props) {\n    var _this;\n\n    _classCallCheck(this, NewQuestionForm);\n\n    _this = _super.call(this, props);\n\n    _this.packData = function () {\n      return _this.setState(function (preState) {\n        return {\n          questionsPack: [].concat(_toConsumableArray(preState.questionsPack), [{\n            question: 'Câu hỏi',\n            answers: _this.props.currentType === _pollType.OPEN_ANSWER ? [] : ['Lựa chọn 1'],\n            type: _pollType.SINGLE\n          }])\n        };\n      }, _this.scrollBottom());\n    };\n\n    _this.scrollBottom = function () {\n      var objDiv = document.getElementById('scrollTarget');\n      objDiv.scrollTop = objDiv.clientHeight - objDiv.scrollHeight;\n    };\n\n    _this.handleShowEditInput = function (pollIndex, answerIndex, currentEditingState) {// console.log('a')\n      // this.setState({ editingPollIndex: pollIndex, editingAnswerIndex: answerIndex, currentEditingState })\n    };\n\n    _this.onChange = function (pollIndex, answerIndex, _ref2) {\n      var value = _ref2.target.value;\n\n      _this.setState(function (prevState) {\n        var tempQuestionPack = _toConsumableArray(prevState.questionsPack);\n\n        for (var i = 0; i < tempQuestionPack.length; i++) {\n          if (answerIndex !== null) for (var k = 0; k < tempQuestionPack[i].answers.length; k++) {\n            if (i === pollIndex && k === answerIndex) {\n              tempQuestionPack[i].answers[k] = value;\n            }\n          } else {\n            if (i === pollIndex) {\n              tempQuestionPack[i].question = value;\n            }\n          }\n        } //NOTE: editing previous question pack\n\n\n        return {\n          questionsPack: tempQuestionPack\n        };\n      });\n    };\n\n    _this.handleDeleteItem = function (pollIndex, answerIndex) {\n      _this.setState(function (prevState) {\n        var temp = _toConsumableArray(prevState.questionsPack);\n\n        if (answerIndex === null) {\n          temp.splice(pollIndex, 1);\n        } else {\n          temp[pollIndex].answers.splice(answerIndex, 1);\n        }\n\n        return {\n          questionsPack: temp\n        };\n      });\n    };\n\n    _this.setCurrentEditingState = function (currentEditingState) {\n      return _this.setState({\n        currentEditingState: currentEditingState\n      });\n    };\n\n    _this.handleFocusPoll = function (currentFocusingIndex) {\n      return _this.setState({\n        currentFocusingIndex: currentFocusingIndex\n      });\n    };\n\n    _this.handleAddAnswer = function (pollIndex) {\n      _this.setState(function (prevState) {\n        var tempQuestionPack = _toConsumableArray(prevState.questionsPack);\n\n        for (var i = 0; i < tempQuestionPack.length; i++) {\n          if (i === pollIndex) {\n            tempQuestionPack[i].answers.push(\"L\\u1EF1a ch\\u1ECDn \".concat(tempQuestionPack[i].answers.length + 1));\n          }\n        }\n\n        return {\n          questionsPack: tempQuestionPack\n        };\n      });\n    };\n\n    _this.handleChangeSelectType = function (pollIndex, value) {\n      _this.setState(function (prevState) {\n        var tempQuestionPack = _toConsumableArray(prevState.questionsPack);\n\n        for (var i = 0; i < tempQuestionPack.length; i++) {\n          if (i === pollIndex) {\n            tempQuestionPack[i].type = value;\n          }\n        }\n\n        return {\n          questionsPack: tempQuestionPack\n        };\n      });\n    };\n\n    _this.onDragEnd = function (result) {\n      var source = result.source,\n          destination = result.destination;\n\n      if (!destination) {\n        return;\n      }\n\n      var tempQuestionPack = Reorder(_this.state.questionsPack, source.index, destination.index);\n\n      _this.setState({\n        questionsPack: tempQuestionPack,\n        currentFocusingIndex: destination.index\n      });\n    };\n\n    _this.state = {\n      questionsPack: [],\n      //NOTE: for editing purpose\n      currentFocusingIndex: null\n    };\n    _this.subFormRef = React.createRef();\n    _this.newQuestionRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(NewQuestionForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          questionsPack = _this$state.questionsPack,\n          currentFocusingIndex = _this$state.currentFocusingIndex;\n      return /*#__PURE__*/React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        type: \"QUESTIONS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, function (provided, snapshot) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: \"scrollTarget\",\n          className: \"newQuestionFormWrapper\",\n          style: _objectSpread({\n            overflowY: 'scroll',\n            paddingLeft: ' 0.5rem',\n            marginTop: '0.5rem'\n          }, getQuestionListStyle(snapshot.isDraggingOver)),\n          ref: provided.innerRef,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }\n        }, questionsPack && questionsPack.map(function (poll, pollIndex) {\n          return /*#__PURE__*/React.createElement(Draggable, {\n            key: pollIndex.toString(),\n            draggableId: pollIndex.toString(),\n            index: pollIndex,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }\n          }, function (provided, snapshot) {\n            return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.draggableProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 23\n              }\n            }), /*#__PURE__*/React.createElement(NewQuestion, {\n              key: pollIndex,\n              ref: _this2.newQuestionRef,\n              poll: poll,\n              pollIndex: pollIndex,\n              handleDeleteItem: _this2.handleDeleteItem,\n              onChange: _this2.onChange,\n              handleShowEditInput: _this2.handleShowEditInput,\n              handleFocusPoll: _this2.handleFocusPoll,\n              currentFocusingIndex: currentFocusingIndex,\n              handleAddAnswer: _this2.handleAddAnswer,\n              handleChangeSelectType: _this2.handleChangeSelectType,\n              dragHandleProps: provided.dragHandleProps,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 25\n              }\n            }));\n          });\n        }), provided.placeholder);\n      }));\n    }\n  }]);\n\n  return NewQuestionForm;\n}(React.Component), _temp)) || _class) || _class);\nexport default NewQuestionForm;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/PollCollapse/NewQuestionForm.jsx"],"names":["React","DragDropContext","Droppable","Draggable","inject","observer","_pollType","NewQuestion","Reorder","getItemStyle","getQuestionListStyle","NewQuestionForm","stores","props","packData","setState","preState","questionsPack","question","answers","currentType","OPEN_ANSWER","type","SINGLE","scrollBottom","objDiv","document","getElementById","scrollTop","clientHeight","scrollHeight","handleShowEditInput","pollIndex","answerIndex","currentEditingState","onChange","value","target","prevState","tempQuestionPack","i","length","k","handleDeleteItem","temp","splice","setCurrentEditingState","handleFocusPoll","currentFocusingIndex","handleAddAnswer","push","handleChangeSelectType","onDragEnd","result","source","destination","state","index","subFormRef","createRef","newQuestionRef","provided","snapshot","overflowY","paddingLeft","marginTop","isDraggingOver","innerRef","map","poll","toString","draggableProps","isDragging","style","dragHandleProps","placeholder","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport { inject, observer } from 'mobx-react'\nimport { _pollType } from '@constants'\nimport NewQuestion from './NewQuestion'\n\nimport { Reorder, getItemStyle, getQuestionListStyle } from './_funcs'\n@inject(({ stores }) => stores)\n@observer\nclass NewQuestionForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      questionsPack: [],\n\n      //NOTE: for editing purpose\n      currentFocusingIndex: null\n    }\n    this.subFormRef = React.createRef()\n    this.newQuestionRef = React.createRef()\n  }\n\n  packData = () => {\n    return this.setState(\n      preState => ({\n        questionsPack: [\n          ...preState.questionsPack,\n          {\n            question: 'Câu hỏi',\n            answers: this.props.currentType === _pollType.OPEN_ANSWER ? [] : ['Lựa chọn 1'],\n            type: _pollType.SINGLE\n          }\n        ]\n      }),\n      this.scrollBottom()\n    )\n  }\n\n  scrollBottom = () => {\n    let objDiv = document.getElementById('scrollTarget')\n\n    objDiv.scrollTop = objDiv.clientHeight - objDiv.scrollHeight\n  }\n\n  handleShowEditInput = (pollIndex, answerIndex, currentEditingState) => {\n    // console.log('a')\n    // this.setState({ editingPollIndex: pollIndex, editingAnswerIndex: answerIndex, currentEditingState })\n  }\n\n  onChange = (pollIndex, answerIndex, { target: { value } }) => {\n    this.setState(prevState => {\n      let tempQuestionPack = [...prevState.questionsPack]\n\n      for (let i = 0; i < tempQuestionPack.length; i++) {\n        if (answerIndex !== null)\n          for (let k = 0; k < tempQuestionPack[i].answers.length; k++) {\n            if (i === pollIndex && k === answerIndex) {\n              tempQuestionPack[i].answers[k] = value\n            }\n          }\n        else {\n          if (i === pollIndex) {\n            tempQuestionPack[i].question = value\n          }\n        }\n      }\n      //NOTE: editing previous question pack\n      return { questionsPack: tempQuestionPack }\n    })\n  }\n\n  handleDeleteItem = (pollIndex, answerIndex) => {\n    this.setState(prevState => {\n      let temp = [...prevState.questionsPack]\n      if (answerIndex === null) {\n        temp.splice(pollIndex, 1)\n      } else {\n        temp[pollIndex].answers.splice(answerIndex, 1)\n      }\n\n      return { questionsPack: temp }\n    })\n  }\n\n  setCurrentEditingState = currentEditingState => this.setState({ currentEditingState })\n\n  handleFocusPoll = currentFocusingIndex => {\n    return this.setState({ currentFocusingIndex })\n  }\n\n  handleAddAnswer = pollIndex => {\n    this.setState(prevState => {\n      let tempQuestionPack = [...prevState.questionsPack]\n\n      for (let i = 0; i < tempQuestionPack.length; i++) {\n        if (i === pollIndex) {\n          tempQuestionPack[i].answers.push(`Lựa chọn ${tempQuestionPack[i].answers.length + 1}`)\n        }\n      }\n\n      return { questionsPack: tempQuestionPack }\n    })\n  }\n\n  handleChangeSelectType = (pollIndex, value) => {\n    this.setState(prevState => {\n      let tempQuestionPack = [...prevState.questionsPack]\n\n      for (let i = 0; i < tempQuestionPack.length; i++) {\n        if (i === pollIndex) {\n          tempQuestionPack[i].type = value\n        }\n      }\n\n      return { questionsPack: tempQuestionPack }\n    })\n  }\n  onDragEnd = result => {\n    const { source, destination } = result\n    if (!destination) {\n      return\n    }\n\n    const tempQuestionPack = Reorder(this.state.questionsPack, source.index, destination.index)\n\n    this.setState({\n      questionsPack: tempQuestionPack,\n      currentFocusingIndex: destination.index\n    })\n  }\n\n  render() {\n    const {\n      state: { questionsPack, currentFocusingIndex }\n    } = this\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId='droppable' type='QUESTIONS'>\n          {(provided, snapshot) => (\n            <div\n              id='scrollTarget'\n              className='newQuestionFormWrapper'\n              style={{\n                overflowY: 'scroll',\n                paddingLeft: ' 0.5rem',\n                marginTop: '0.5rem',\n                ...getQuestionListStyle(snapshot.isDraggingOver)\n              }}\n              ref={provided.innerRef}\n            >\n              {questionsPack &&\n                questionsPack.map((poll, pollIndex) => (\n                  <Draggable key={pollIndex.toString()} draggableId={pollIndex.toString()} index={pollIndex}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n                      >\n                        <NewQuestion\n                          key={pollIndex}\n                          ref={this.newQuestionRef}\n                          poll={poll}\n                          pollIndex={pollIndex}\n                          handleDeleteItem={this.handleDeleteItem}\n                          onChange={this.onChange}\n                          handleShowEditInput={this.handleShowEditInput}\n                          handleFocusPoll={this.handleFocusPoll}\n                          currentFocusingIndex={currentFocusingIndex}\n                          handleAddAnswer={this.handleAddAnswer}\n                          handleChangeSelectType={this.handleChangeSelectType}\n                          dragHandleProps={provided.dragHandleProps}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    )\n  }\n}\n\nexport default NewQuestionForm\n"]},"metadata":{},"sourceType":"module"}