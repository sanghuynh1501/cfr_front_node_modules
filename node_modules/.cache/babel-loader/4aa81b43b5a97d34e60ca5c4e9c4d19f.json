{"ast":null,"code":"/**\n * Begins a request to get available DesktopCapturerSources.\n *\n * @param {Array} types - An array with DesktopCapturerSource type strings.\n * @param {Object} options - Additional configuration for getting a list of\n * sources.\n * @param {Object} options.thumbnailSize - The desired height and width of the\n * return native image object used for the preview image of the source.\n * @returns {Function}\n */\nexport function obtainDesktopSources(types) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var capturerOptions = {\n    types: types\n  };\n\n  if (options.thumbnailSize) {\n    capturerOptions.thumbnailSize = options.thumbnailSize;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var _window = window,\n        JitsiMeetElectron = _window.JitsiMeetElectron;\n\n    if (JitsiMeetElectron && JitsiMeetElectron.obtainDesktopStreams) {\n      JitsiMeetElectron.obtainDesktopStreams(function (sources) {\n        return resolve(_seperateSourcesByType(sources));\n      }, function (error) {\n        console.error(\"Error while obtaining desktop sources: \".concat(error));\n        reject(error);\n      }, capturerOptions);\n    } else {\n      var reason = 'Called JitsiMeetElectron.obtainDesktopStreams but it is not defined';\n      return Promise.reject(new Error(reason));\n    }\n  });\n}\n/**\n * Converts an array of DesktopCapturerSources to an object with types for keys\n * and values being an array with sources of the key's type.\n *\n * @param {Array} sources - DesktopCapturerSources.\n * @private\n * @returns {Object} An object with the sources split into seperate arrays based\n * on source type.\n */\n\nfunction _seperateSourcesByType() {\n  var sources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var sourcesByType = {\n    screen: [],\n    window: []\n  };\n  sources.forEach(function (source) {\n    var idParts = source.id.split(':');\n    var type = idParts[0];\n\n    if (sourcesByType[type]) {\n      sourcesByType[type].push(source);\n    }\n  });\n  return sourcesByType;\n}","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/desktopicker.jsx"],"names":["obtainDesktopSources","types","options","capturerOptions","thumbnailSize","Promise","resolve","reject","window","JitsiMeetElectron","obtainDesktopStreams","sources","_seperateSourcesByType","error","console","reason","Error","sourcesByType","screen","forEach","source","idParts","id","split","type","push"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,SAASA,oBAAT,CAA8BC,KAA9B,EAAmD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACxD,MAAMC,eAAe,GAAG;AAAEF,IAAAA,KAAK,EAALA;AAAF,GAAxB;;AAEA,MAAIC,OAAO,CAACE,aAAZ,EAA2B;AACzBD,IAAAA,eAAe,CAACC,aAAhB,GAAgCF,OAAO,CAACE,aAAxC;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,kBACRC,MADQ;AAAA,QAC9BC,iBAD8B,WAC9BA,iBAD8B;;AAGtC,QAAIA,iBAAiB,IAAIA,iBAAiB,CAACC,oBAA3C,EAAiE;AAC/DD,MAAAA,iBAAiB,CAACC,oBAAlB,CACE,UAAAC,OAAO;AAAA,eAAIL,OAAO,CAACM,sBAAsB,CAACD,OAAD,CAAvB,CAAX;AAAA,OADT,EAEE,UAAAE,KAAK,EAAI;AACPC,QAAAA,OAAO,CAACD,KAAR,kDAAwDA,KAAxD;AACAN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACD,OALH,EAMEV,eANF;AAQD,KATD,MASO;AACL,UAAMY,MAAM,GAAG,qEAAf;AACA,aAAOV,OAAO,CAACE,MAAR,CAAe,IAAIS,KAAJ,CAAUD,MAAV,CAAf,CAAP;AACD;AACF,GAhBM,CAAP;AAiBD;AAED;;;;;;;;;;AASA,SAASH,sBAAT,GAA8C;AAAA,MAAdD,OAAc,uEAAJ,EAAI;AAC5C,MAAMM,aAAa,GAAG;AACpBC,IAAAA,MAAM,EAAE,EADY;AAEpBV,IAAAA,MAAM,EAAE;AAFY,GAAtB;AAKAG,EAAAA,OAAO,CAACQ,OAAR,CAAgB,UAAAC,MAAM,EAAI;AACxB,QAAMC,OAAO,GAAGD,MAAM,CAACE,EAAP,CAAUC,KAAV,CAAgB,GAAhB,CAAhB;AACA,QAAMC,IAAI,GAAGH,OAAO,CAAC,CAAD,CAApB;;AAEA,QAAIJ,aAAa,CAACO,IAAD,CAAjB,EAAyB;AACvBP,MAAAA,aAAa,CAACO,IAAD,CAAb,CAAoBC,IAApB,CAAyBL,MAAzB;AACD;AACF,GAPD;AASA,SAAOH,aAAP;AACD","sourcesContent":["/**\n * Begins a request to get available DesktopCapturerSources.\n *\n * @param {Array} types - An array with DesktopCapturerSource type strings.\n * @param {Object} options - Additional configuration for getting a list of\n * sources.\n * @param {Object} options.thumbnailSize - The desired height and width of the\n * return native image object used for the preview image of the source.\n * @returns {Function}\n */\nexport function obtainDesktopSources(types, options = {}) {\n  const capturerOptions = { types }\n\n  if (options.thumbnailSize) {\n    capturerOptions.thumbnailSize = options.thumbnailSize\n  }\n\n  return new Promise((resolve, reject) => {\n    const { JitsiMeetElectron } = window\n\n    if (JitsiMeetElectron && JitsiMeetElectron.obtainDesktopStreams) {\n      JitsiMeetElectron.obtainDesktopStreams(\n        sources => resolve(_seperateSourcesByType(sources)),\n        error => {\n          console.error(`Error while obtaining desktop sources: ${error}`)\n          reject(error)\n        },\n        capturerOptions\n      )\n    } else {\n      const reason = 'Called JitsiMeetElectron.obtainDesktopStreams but it is not defined'\n      return Promise.reject(new Error(reason))\n    }\n  })\n}\n\n/**\n * Converts an array of DesktopCapturerSources to an object with types for keys\n * and values being an array with sources of the key's type.\n *\n * @param {Array} sources - DesktopCapturerSources.\n * @private\n * @returns {Object} An object with the sources split into seperate arrays based\n * on source type.\n */\nfunction _seperateSourcesByType(sources = []) {\n  const sourcesByType = {\n    screen: [],\n    window: []\n  }\n\n  sources.forEach(source => {\n    const idParts = source.id.split(':')\n    const type = idParts[0]\n\n    if (sourcesByType[type]) {\n      sourcesByType[type].push(source)\n    }\n  })\n\n  return sourcesByType\n}\n"]},"metadata":{},"sourceType":"module"}