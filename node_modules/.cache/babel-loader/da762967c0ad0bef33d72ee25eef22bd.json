{"ast":null,"code":"import _regeneratorRuntime from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/subscribers/Notification.jsx\";\n\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\nimport { setTimeout } from 'timers';\nimport { appConstants, _tabs, _userStatus, _queryPollsType } from '@constants';\nimport { client, S_ON_CONFERENCE_NOTIFICATIONS, Q_CONFERENCE_ROLE, Q_CONFERENCE_USERS } from '@graphql';\nimport { newNotification, returnError } from '@utils';\nimport { withTranslation } from 'react-i18next';\nvar confirm = _Modal.confirm;\nvar MUTE_POLICY = appConstants.MUTE_POLICY,\n    ROLE = appConstants.ROLE;\nvar notificationCodes = {\n  // *: Conference User\n  USER_JOINED: 'USER_JOINED',\n  USER_LEFT: 'USER_LEFT',\n  USER_WAITING: 'USER_WAITING',\n  CONFERENCE_USER_UPDATE: 'CONFERENCE_USER_UPDATE',\n  HAS_BEEN_KICKED: 'HAS_BEEN_KICKED',\n  ADMIT_USER: 'ADMIT_USER',\n  REMOVE_USER: 'REMOVE_USER',\n  // *: Messages\n  NEW_UNREAD_MESSAGE: 'NEW_UNREAD_MESSAGE',\n  // *: Conference Setting\n  MUTE_POLICY_UPDATED: 'MUTE_POLICY_UPDATED',\n  CONFERENCE_RECORD_UPDATE: 'CONFERENCE_RECORD_UPDATE',\n  CONFERENCE_STREAM_UPDATE: 'CONFERENCE_STREAM_UPDATE',\n  LOCK_UPDATED: 'LOCK_UPDATED',\n  // *: Conference Speaker\n  PINNED_MAIN_USER: 'PINNED_MAIN_USER',\n  UNPINNED_MAIN_USER: 'UNPINNED_MAIN_USER',\n  PINNED_SUB_USER: 'PINNED_SUB_USER',\n  UNPINNED_SUB_USER: 'UNPINNED_SUB_USER',\n  // *: Authorization\n  AUTHORIZATION_UPDATED: 'AUTHORIZATION_UPDATED',\n  USER_ROLE_UPDATED: 'USER_ROLE_UPDATED',\n  // *: Poll\n  CREATE_POLL: 'CREATE_POLL',\n  END_POLL: 'END_POLL',\n  TOGGLE_PUBLIC: 'TOGGLE_PUBLIC',\n  TOGGLE_PERSONAL_PUBLIC: 'TOGGLE_PERSONAL_PUBLIC',\n  TOGGLE_LOCK: 'TOGGLE_LOCK',\n  // *: Attendance\n  CREATE_ATTENDANCE: 'CREATE_ATTENDANCE',\n  END_ATTENDANCE: 'END_ATTENDANCE',\n  // *: Resource\n  NEXT_SLIDE: 'NEXT_SLIDE',\n  PREVIOUS_SLIDE: 'PREVIOUS_SLIDE',\n  CREATE_SLIDE: 'CREATE_SLIDE',\n  // SHARE FILE\n  SHARE_FILE: 'SHARE_FILE',\n  // *: Draw line\n  DRAW_DATA: 'DRAW_DATA',\n  KICK_USER: 'KICK_USER',\n  // NOTE: Q&A\n  START_QNA_SESSION: 'START_QNA_SESSION',\n  END_QNA_SESSION: 'END_QNA_SESSION',\n  CREATE_QNA: 'CREATE_QNA',\n  ANSWER_QNA: 'ANSWER_QNA'\n};\nvar NotificationSubscriber = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(NotificationSubscriber, _React$PureComponent);\n\n  var _super = _createSuper(NotificationSubscriber);\n\n  function NotificationSubscriber() {\n    var _this;\n\n    _classCallCheck(this, NotificationSubscriber);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      hasPolling: false\n    };\n    _this.subscriber = null;\n    _this.subscriberPoll = null;\n\n    _this.queryConferenceRole = function () {\n      return client.query({\n        query: Q_CONFERENCE_ROLE,\n        variables: {\n          roleId: _this.props.conferenceState.myRole\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref2) {\n        var conferenceRole = _ref2.data.conferenceRole;\n\n        if (conferenceRole && conferenceRole._id) {\n          var setState = _this.props.conferenceState.setState;\n          setState({\n            myRole: conferenceRole._id,\n            myPermissions: conferenceRole.permissions.map(function (per) {\n              return per._id;\n            })\n          });\n        }\n      }).catch(function (error) {\n        // *: Friendly errors\n        returnError('conferenceRole', {\n          error: error,\n          errorMessage: 'Failed to get your account information!'\n        });\n      });\n    };\n\n    _this.queryConferenceUsers = function () {\n      return client.query({\n        query: Q_CONFERENCE_USERS,\n        variables: {\n          conferenceId: _this.props.conferenceId\n        },\n        fetchPolicy: 'no-cache'\n      }).then(function (_ref3) {\n        var conferenceUsers = _ref3.data.conferenceUsers;\n\n        if (conferenceUsers) {\n          var _this$props$conferenc = _this.props.conferenceState,\n              setState = _this$props$conferenc.setState,\n              myUserId = _this$props$conferenc.myUserId;\n\n          var _conferenceUsers$filt = conferenceUsers.filter(function (_ref4) {\n            var user = _ref4.user;\n            return user && user._id === myUserId;\n          }),\n              _conferenceUsers$filt2 = _slicedToArray(_conferenceUsers$filt, 1),\n              me = _conferenceUsers$filt2[0];\n\n          if (me && me.role) {\n            setState({\n              myRole: me.role._id,\n              myPermissions: me.role.permissions.map(function (per) {\n                return per._id;\n              }),\n              conferenceUsers: conferenceUsers\n            });\n            return true;\n          }\n\n          setState({\n            conferenceUsers: conferenceUsers\n          });\n          return true;\n        }\n      }).catch(function (error) {\n        return returnError('conferenceUsers', {\n          error: error,\n          errorMessage: \"Failed to get conference's users\"\n        });\n      });\n    };\n\n    _this.onLeave = function () {\n      return _this.props.conferenceState.onLeaveJitsiConference().then(function (leaveResult) {\n        if (leaveResult) {\n          return _this.props.conferenceState.onDisconnectJitsi().then(function (disconnectResult) {\n            if (disconnectResult) {\n              _this.props.conferenceState.clearStore(); // *: Clear settings from localStorage\n\n\n              localStorage.removeItem(appConstants.LSKey.cameraKey);\n              localStorage.removeItem(appConstants.LSKey.screenKey);\n              localStorage.removeItem(appConstants.LSKey.audioKey);\n\n              _this.props.history.push('/leave');\n            }\n          });\n        }\n      });\n    };\n\n    _this._updateMyRole = function () {\n      var _this$props$conferenc2 = _this.props.conferenceState,\n          setState = _this$props$conferenc2.setState,\n          myUserId = _this$props$conferenc2.myUserId,\n          conferenceUsers = _this$props$conferenc2.conferenceUsers;\n\n      var _conferenceUsers$filt3 = conferenceUsers.filter(function (_ref5) {\n        var user = _ref5.user;\n        return user && user._id === myUserId;\n      }),\n          _conferenceUsers$filt4 = _slicedToArray(_conferenceUsers$filt3, 1),\n          me = _conferenceUsers$filt4[0];\n\n      if (me && me.role) {\n        setState({\n          myRole: me.role._id,\n          myPermissions: me.role.permissions.map(function (per) {\n            return per._id;\n          })\n        });\n      }\n    };\n\n    _this.parseData = function (data) {\n      return JSON.parse(data);\n    };\n\n    return _this;\n  }\n\n  _createClass(NotificationSubscriber, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // PUBSUB:\n      this.subscriber = client.subscribe({\n        query: S_ON_CONFERENCE_NOTIFICATIONS,\n        variables: {\n          conferenceId: this.props.conferenceId\n        },\n        fetchPolicy: 'no-cache'\n      }).subscribe( /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref6) {\n          var onConferenceNotification, conferenceState, code, data, pubsubCreatedBy, _this2$props, _conferenceState, i18n, history, _this2$parseData, userId, kickedBy, _this2$parseData2, sender, content, _jitsiStore$_conferen, _this2$props2, _conferenceState2, jitsiStore, myUserIds, _conferenceState2$con, _this2$parseData3, key, value, pinnedBy, _conferenceState$conf, _this2$parseData4, _key2, _value, _pinnedBy, _jitsiStore, _jitsiStore$_conferen2, _conferenceState$conf2, _myUserIds, _this2$parseData5, _userId, updatedBy, roleId, _conferenceState3$con, _this2$props3, _conferenceState3, _jitsiStore2, myInfo, myRole, _jitsiStore2$_confere, _conferenceState3$con2, _myUserIds2;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  onConferenceNotification = _ref6.data.onConferenceNotification;\n                  conferenceState = _this2.props.conferenceState;\n\n                  if (!onConferenceNotification) {\n                    _context.next = 113;\n                    break;\n                  }\n\n                  code = onConferenceNotification.code, data = onConferenceNotification.data, pubsubCreatedBy = onConferenceNotification.pubsubCreatedBy;\n                  _context.t0 = code;\n                  _context.next = _context.t0 === notificationCodes.KICK_USER ? 7 : _context.t0 === notificationCodes.USER_JOINED ? 9 : _context.t0 === notificationCodes.USER_LEFT ? 13 : _context.t0 === notificationCodes.USER_WAITING ? 17 : _context.t0 === notificationCodes.ADMIT_USER ? 21 : _context.t0 === notificationCodes.REMOVE_USER ? 26 : _context.t0 === notificationCodes.CONFERENCE_USER_UPDATE ? 30 : _context.t0 === notificationCodes.CONFERENCE_STREAM_UPDATE ? 32 : _context.t0 === notificationCodes.CONFERENCE_RECORD_UPDATE ? 34 : _context.t0 === notificationCodes.HAS_BEEN_KICKED ? 36 : _context.t0 === notificationCodes.NEW_UNREAD_MESSAGE ? 41 : _context.t0 === notificationCodes.MUTE_POLICY_UPDATED ? 47 : _context.t0 === notificationCodes.LOCK_UPDATED ? 49 : _context.t0 === notificationCodes.PINNED_MAIN_USER ? 51 : _context.t0 === notificationCodes.UNPINNED_MAIN_USER ? 57 : _context.t0 === notificationCodes.AUTHORIZATION_UPDATED ? 65 : _context.t0 === notificationCodes.USER_ROLE_UPDATED ? 69 : _context.t0 === notificationCodes.CREATE_POLL ? 80 : _context.t0 === notificationCodes.END_POLL ? 82 : _context.t0 === notificationCodes.TOGGLE_PUBLIC ? 84 : _context.t0 === notificationCodes.TOGGLE_LOCK ? 86 : _context.t0 === notificationCodes.CREATE_ATTENDANCE ? 88 : _context.t0 === notificationCodes.END_ATTENDANCE ? 90 : _context.t0 === notificationCodes.CREATE_SLIDE ? 92 : _context.t0 === notificationCodes.NEXT_SLIDE ? 94 : _context.t0 === notificationCodes.PREVIOUS_SLIDE ? 96 : _context.t0 === notificationCodes.DRAW_DATA ? 98 : _context.t0 === notificationCodes.START_QNA_SESSION ? 100 : _context.t0 === notificationCodes.END_QNA_SESSION ? 102 : _context.t0 === notificationCodes.CREATE_QNA ? 104 : _context.t0 === notificationCodes.ANSWER_QNA ? 106 : _context.t0 === notificationCodes.SHARE_FILE ? 108 : 112;\n                  break;\n\n                case 7:\n                  try {\n                    if (data === conferenceState.myUserId) {\n                      _this2$props = _this2.props, _conferenceState = _this2$props.conferenceState, i18n = _this2$props.i18n, history = _this2$props.history;\n\n                      _conferenceState.LEAVE({\n                        disableMutateLeave: true\n                      });\n\n                      confirm({\n                        centered: true,\n                        title: i18n.t('conference.notification'),\n                        content: i18n.t('conference.noti_kicked_out_stop_session'),\n                        onOk: function onOk() {\n                          history.push('/leave');\n                        },\n                        onCancel: function onCancel() {\n                          history.push('/leave');\n                        }\n                      });\n                    }\n                  } catch (err) {\n                    console.log(err);\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 9:\n                  if (!(pubsubCreatedBy !== conferenceState.myUserId && conferenceState.statusConference !== _userStatus.WAITING)) {\n                    _context.next = 12;\n                    break;\n                  }\n\n                  _this2.queryConferenceUsers();\n\n                  return _context.abrupt(\"return\", newNotification(\"\".concat(data, \" has joined!\"), 'info'));\n\n                case 12:\n                  return _context.abrupt(\"break\", 113);\n\n                case 13:\n                  if (!(pubsubCreatedBy !== conferenceState.myUserId && conferenceState.statusConference !== _userStatus.WAITING)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  _this2.queryConferenceUsers();\n\n                  return _context.abrupt(\"return\", newNotification(\"\".concat(data, \" has left!\"), 'info'));\n\n                case 16:\n                  return _context.abrupt(\"break\", 113);\n\n                case 17:\n                  if (!(conferenceState.conference.createdBy._id === conferenceState.myUserId)) {\n                    _context.next = 20;\n                    break;\n                  }\n\n                  _this2.queryConferenceUsers();\n\n                  return _context.abrupt(\"return\", newNotification(\"\".concat(data, \" has join waiting room\"), 'info'));\n\n                case 20:\n                  return _context.abrupt(\"break\", 113);\n\n                case 21:\n                  if (!(data === conferenceState.myUserId)) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  _this2.props.setLoading();\n\n                  return _context.abrupt(\"return\", _this2.props.queryConferenceData());\n\n                case 24:\n                  _this2.queryConferenceUsers();\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 26:\n                  if (!(data === conferenceState.myUserId)) {\n                    _context.next = 28;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", _this2.props.history.push('/leave'));\n\n                case 28:\n                  _this2.queryConferenceUsers();\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 30:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.queryConferenceUsers();\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 32:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryConference();\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 34:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryRecording();\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 36:\n                  _this2$parseData = _this2.parseData(data), userId = _this2$parseData.userGetKicked, kickedBy = _this2$parseData.kickedBy;\n\n                  if (!(conferenceState.myUserId === userId)) {\n                    _context.next = 40;\n                    break;\n                  }\n\n                  setTimeout(function () {\n                    return _this2.onLeave();\n                  }, 1000);\n                  return _context.abrupt(\"return\", newNotification(\"You've been kicked out of the conference by \".concat(kickedBy, \".\"), 'danger', {\n                    dismiss: {\n                      duration: 1000,\n                      onScreen: true\n                    }\n                  }));\n\n                case 40:\n                  return _context.abrupt(\"break\", 113);\n\n                case 41:\n                  _this2$parseData2 = _this2.parseData(data), sender = _this2$parseData2.sender, content = _this2$parseData2.content;\n\n                  if (!(conferenceState.myUserId !== pubsubCreatedBy)) {\n                    _context.next = 46;\n                    break;\n                  }\n\n                  if (sender._id !== conferenceState.idChatUser) {\n                    conferenceState.setState({\n                      unreadMessage: conferenceState.unreadMessage + 1\n                    });\n                  }\n\n                  if (!(!conferenceState.isShowMessages && sender._id !== conferenceState.idChatUser)) {\n                    _context.next = 46;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", newNotification(content, 'info', {\n                    title: \"New Message from \".concat(sender.name),\n                    container: 'top-right',\n                    className: 'notification-message',\n                    dismiss: {\n                      duration: 1500\n                    }\n                  }));\n\n                case 46:\n                  return _context.abrupt(\"break\", 113);\n\n                case 47:\n                  if (pubsubCreatedBy !== conferenceState.myUserId) {\n                    _this2.props.queryConference();\n\n                    if (onConferenceNotification.data === MUTE_POLICY.PRIORITY) {\n                      _this2$props2 = _this2.props, _conferenceState2 = _this2$props2.conferenceState, jitsiStore = _this2$props2.jitsiStore;\n                      myUserIds = [jitsiStore.conference.myUserId(), jitsiStore === null || jitsiStore === void 0 ? void 0 : (_jitsiStore$_conferen = jitsiStore._conference) === null || _jitsiStore$_conferen === void 0 ? void 0 : _jitsiStore$_conferen.myUserId()];\n\n                      if ((_conferenceState2 === null || _conferenceState2 === void 0 ? void 0 : _conferenceState2.myRole) === ROLE.PARTICIPANT) {\n                        if (!((_conferenceState2 === null || _conferenceState2 === void 0 ? void 0 : (_conferenceState2$con = _conferenceState2.conference) === null || _conferenceState2$con === void 0 ? void 0 : _conferenceState2$con.pinnedUser) && myUserIds.includes(_conferenceState2.conference.pinnedUser))) {\n                          if (_conferenceState2.offAudio) {\n                            _conferenceState2.offAudio();\n                          }\n                        }\n                      }\n                    } else {\n                      if (conferenceState.offAudio) {\n                        conferenceState.offAudio();\n                      }\n                    }\n                  }\n\n                  return _context.abrupt(\"return\", newNotification('Mute policy updated'));\n\n                case 49:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryConference();\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 51:\n                  if (!(conferenceState.statusConference !== _userStatus.WAITING)) {\n                    _context.next = 56;\n                    break;\n                  }\n\n                  _this2$parseData3 = _this2.parseData(data), key = _this2$parseData3.updateType, value = _this2$parseData3.userId, pinnedBy = _this2$parseData3.pinnedBy;\n                  conferenceState.setState({\n                    conference: _objectSpread({}, conferenceState.conference, _defineProperty({}, key, value))\n                  });\n\n                  try {\n                    conferenceState.setPinnedMode(value);\n                    conferenceState.reOrderUserAtFirstPlace(value);\n                    conferenceState.setSpeakerByUID(value);\n                  } catch (_unused) {}\n\n                  return _context.abrupt(\"return\", newNotification(\"An user has been pinned by \".concat(pinnedBy)));\n\n                case 56:\n                  return _context.abrupt(\"break\", 113);\n\n                case 57:\n                  if (!(conferenceState.statusConference !== _userStatus.WAITING)) {\n                    _context.next = 64;\n                    break;\n                  }\n\n                  _this2$parseData4 = _this2.parseData(data), _key2 = _this2$parseData4.updateType, _value = _this2$parseData4.userId, _pinnedBy = _this2$parseData4.pinnedBy;\n                  conferenceState.setState({\n                    conference: _objectSpread({}, conferenceState.conference, _defineProperty({}, _key2, _value))\n                  });\n\n                  try {\n                    conferenceState.setPinnedMode(_value);\n                    conferenceState.reOrderUserAtFirstPlace(_value);\n                  } catch (_unused2) {}\n\n                  _jitsiStore = _this2.props.jitsiStore;\n\n                  if ((conferenceState === null || conferenceState === void 0 ? void 0 : (_conferenceState$conf = conferenceState.conference) === null || _conferenceState$conf === void 0 ? void 0 : _conferenceState$conf.mutePolicy) === MUTE_POLICY.PRIORITY) {\n                    if ((conferenceState === null || conferenceState === void 0 ? void 0 : conferenceState.myRole) === ROLE.PARTICIPANT) {\n                      _myUserIds = [_jitsiStore.conference.myUserId(), _jitsiStore === null || _jitsiStore === void 0 ? void 0 : (_jitsiStore$_conferen2 = _jitsiStore._conference) === null || _jitsiStore$_conferen2 === void 0 ? void 0 : _jitsiStore$_conferen2.myUserId()];\n\n                      if (!((conferenceState === null || conferenceState === void 0 ? void 0 : (_conferenceState$conf2 = conferenceState.conference) === null || _conferenceState$conf2 === void 0 ? void 0 : _conferenceState$conf2.pinnedUser) && _myUserIds.includes(conferenceState.conference.pinnedUser))) {\n                        if (conferenceState.offAudio) {\n                          conferenceState.offAudio();\n                        }\n                      }\n                    }\n                  }\n\n                  return _context.abrupt(\"return\", newNotification(\"An user has been unpinned by \".concat(_pinnedBy)));\n\n                case 64:\n                  return _context.abrupt(\"break\", 113);\n\n                case 65:\n                  if (!(conferenceState.statusConference !== _userStatus.WAITING)) {\n                    _context.next = 68;\n                    break;\n                  }\n\n                  _this2.props.queryConference().then(function (queryConferenceResult) {\n                    if (queryConferenceResult) _this2._updateMyRole();\n                  });\n\n                  return _context.abrupt(\"return\", newNotification('Conference authorization updated'));\n\n                case 68:\n                  return _context.abrupt(\"break\", 113);\n\n                case 69:\n                  _this2$parseData5 = _this2.parseData(data), _userId = _this2$parseData5.userId, updatedBy = _this2$parseData5.username, roleId = _this2$parseData5.roleId;\n\n                  if (!(conferenceState.statusConference !== _userStatus.WAITING)) {\n                    _context.next = 79;\n                    break;\n                  }\n\n                  _context.next = 73;\n                  return _this2.props.queryConference();\n\n                case 73:\n                  if (!(conferenceState.myUserId === _userId)) {\n                    _context.next = 79;\n                    break;\n                  }\n\n                  _this2$props3 = _this2.props, _conferenceState3 = _this2$props3.conferenceState, _jitsiStore2 = _this2$props3.jitsiStore;\n\n                  _this2._updateMyRole();\n\n                  try {\n                    myInfo = _conferenceState3.myInfo, myRole = _conferenceState3.myRole;\n\n                    _conferenceState3.setJitsiDisplayName(\"\".concat(myInfo._id, \"|\").concat(myInfo.firstname, \" \").concat(myInfo.lastname, \"|\").concat(myRole));\n                  } catch (_unused3) {}\n\n                  if ((_conferenceState3 === null || _conferenceState3 === void 0 ? void 0 : (_conferenceState3$con = _conferenceState3.conference) === null || _conferenceState3$con === void 0 ? void 0 : _conferenceState3$con.mutePolicy) === MUTE_POLICY.PRIORITY) {\n                    if ((_conferenceState3 === null || _conferenceState3 === void 0 ? void 0 : _conferenceState3.myRole) === ROLE.PARTICIPANT) {\n                      _myUserIds2 = [_jitsiStore2.conference.myUserId(), _jitsiStore2 === null || _jitsiStore2 === void 0 ? void 0 : (_jitsiStore2$_confere = _jitsiStore2._conference) === null || _jitsiStore2$_confere === void 0 ? void 0 : _jitsiStore2$_confere.myUserId()];\n\n                      if (!((_conferenceState3 === null || _conferenceState3 === void 0 ? void 0 : (_conferenceState3$con2 = _conferenceState3.conference) === null || _conferenceState3$con2 === void 0 ? void 0 : _conferenceState3$con2.pinnedUser) && _myUserIds2.includes(_conferenceState3.conference.pinnedUser))) {\n                        if (_conferenceState3.offAudio) {\n                          _conferenceState3.offAudio();\n                        }\n                      }\n                    }\n                  }\n\n                  return _context.abrupt(\"return\", newNotification(\"You have been \".concat(roleId === ROLE.MODERATOR ? 'promoted' : 'demoted', \" to \").concat(roleId === 'MODERATOR' ? 'PRESENTER' : roleId, \" by \").concat(updatedBy)));\n\n                case 79:\n                  return _context.abrupt(\"break\", 113);\n\n                case 80:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryPolls(_queryPollsType.CREATE).then(function () {\n                      if (conferenceState.pollsInfo.length) {\n                        var pollIds = conferenceState.pollsInfo.map(function (pollInfo) {\n                          return pollInfo._id;\n                        });\n\n                        _this2.props.pubsubVoting(pollIds);\n\n                        conferenceState.setState({\n                          hasPolling: true\n                        });\n                        newNotification('Bắt đầu khảo sát', 'success');\n\n                        if (conferenceState.hasPolling && !conferenceState.isShowPoll) {\n                          if (!conferenceState.isShowParticipants && !conferenceState.isShowMessages && !conferenceState.isShowPollManagement) {\n                            conferenceState.setState({\n                              isPanelOpen: true\n                            });\n                          }\n\n                          conferenceState.setState({\n                            isShowPoll: true,\n                            currentTab: _tabs.POLL\n                          });\n                        }\n                      }\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 82:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryPolls(_queryPollsType.END).then(function () {\n                      conferenceState.setState({\n                        isShowPollResult: false\n                      });\n                      conferenceState.setState({\n                        hasPolling: false\n                      });\n                      newNotification('Kết thúc khảo sát', 'success');\n                      if (conferenceState.isShowPoll) conferenceState.setState({\n                        isShowPoll: false\n                      });\n\n                      if (!conferenceState.isShowParticipants && !conferenceState.isShowMessages && !conferenceState.isShowPollManagement) {\n                        conferenceState.setState({\n                          isPanelOpen: !conferenceState.isPanelOpen\n                        });\n                      }\n                    }); // localStorage.removeItem('ED_POLLS')\n\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 84:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryPolls(_queryPollsType.PUBLIC).then(function () {\n                      if (conferenceState.pollsInfo.length) {\n                        var pollIds = conferenceState.pollsInfo.map(function (pollInfo) {\n                          return pollInfo._id;\n                        });\n\n                        _this2.props.pubsubVoting(pollIds);\n\n                        conferenceState.setState({\n                          isShowPollResult: conferenceState.pollsInfo[0].isPublic\n                        });\n                      }\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 86:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryPolls(_queryPollsType.LOCK).then(function () {\n                      if (conferenceState.pollsInfo.length) {\n                        var pollIds = conferenceState.pollsInfo.map(function (pollInfo) {\n                          return pollInfo._id;\n                        });\n\n                        _this2.props.pubsubVoting(pollIds);\n                      }\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 88:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryAttendances().then(function () {\n                      if (conferenceState.attendanceInfo) {\n                        _this2.props.pubsubAttending(conferenceState.attendanceInfo._id);\n\n                        newNotification('Bắt đầu điểm danh', 'info'); // setTimeout(() => conferenceState.setState({ hasAttendance: true }), 1000)\n\n                        conferenceState.setState({\n                          hasAttendance: true\n                        });\n                      }\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 90:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryAttendances().then(function () {\n                      newNotification('Kết thúc điểm danh', 'info');\n                      conferenceState.setState({\n                        hasAttendance: false\n                      });\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 92:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryResources();\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 94:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryResource(data);\n\n                    if (conferenceState.fileOpen && conferenceState.fileOpen.isSlide) {\n                      conferenceState.setState({\n                        positionSlide: conferenceState.positionSlide + 1\n                      });\n\n                      if (conferenceState.carousel) {\n                        conferenceState.carousel.slick.slickNext();\n                      }\n                    }\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 96:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryResource(data);\n\n                    if (conferenceState.fileOpen && conferenceState.fileOpen.isSlide) {\n                      conferenceState.setState({\n                        positionSlide: conferenceState.positionSlide - 1\n                      });\n\n                      if (conferenceState.carousel) {\n                        conferenceState.carousel.slick.slickPrev();\n                      }\n                    }\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 98:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryDraw();\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 100:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    _this2.props.queryActiveQnASession();\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 102:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    conferenceState.setState({\n                      hasQnA: false,\n                      activeQnA: {}\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 104:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    conferenceState.setState({\n                      activeQnA: JSON.parse(data)\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 106:\n                  if (conferenceState.statusConference !== _userStatus.WAITING) {\n                    conferenceState.setState({\n                      activeQnA: JSON.parse(data)\n                    });\n                  }\n\n                  return _context.abrupt(\"break\", 113);\n\n                case 108:\n                  if (data === 'share_file') {\n                    newNotification(_this2.props.i18n.t('conference.newFileShared'), 'info');\n                  }\n\n                  conferenceState.refetchMyFiles();\n                  conferenceState.refetchAllFiles();\n                  return _context.abrupt(\"break\", 113);\n\n                case 112:\n                  return _context.abrupt(\"break\", 113);\n\n                case 113:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // PUBSUB:\n      if (this.subscriber) {\n        this.subscriber.unsubscribe();\n        this.subscriber = null;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps) {\n      if (_prevProps.conferenceState.hasPolling === false && this.props.conferenceState.hasPolling === true) {\n        if (!this.props.conferenceState.isShowPoll) this.onClickPoll();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return NotificationSubscriber;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default withTranslation()(withRouter(NotificationSubscriber));","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/subscribers/Notification.jsx"],"names":["React","withRouter","inject","observer","setTimeout","appConstants","_tabs","_userStatus","_queryPollsType","client","S_ON_CONFERENCE_NOTIFICATIONS","Q_CONFERENCE_ROLE","Q_CONFERENCE_USERS","newNotification","returnError","withTranslation","confirm","MUTE_POLICY","ROLE","notificationCodes","USER_JOINED","USER_LEFT","USER_WAITING","CONFERENCE_USER_UPDATE","HAS_BEEN_KICKED","ADMIT_USER","REMOVE_USER","NEW_UNREAD_MESSAGE","MUTE_POLICY_UPDATED","CONFERENCE_RECORD_UPDATE","CONFERENCE_STREAM_UPDATE","LOCK_UPDATED","PINNED_MAIN_USER","UNPINNED_MAIN_USER","PINNED_SUB_USER","UNPINNED_SUB_USER","AUTHORIZATION_UPDATED","USER_ROLE_UPDATED","CREATE_POLL","END_POLL","TOGGLE_PUBLIC","TOGGLE_PERSONAL_PUBLIC","TOGGLE_LOCK","CREATE_ATTENDANCE","END_ATTENDANCE","NEXT_SLIDE","PREVIOUS_SLIDE","CREATE_SLIDE","SHARE_FILE","DRAW_DATA","KICK_USER","START_QNA_SESSION","END_QNA_SESSION","CREATE_QNA","ANSWER_QNA","NotificationSubscriber","stores","state","hasPolling","subscriber","subscriberPoll","queryConferenceRole","query","variables","roleId","props","conferenceState","myRole","fetchPolicy","then","conferenceRole","data","_id","setState","myPermissions","permissions","map","per","catch","error","errorMessage","queryConferenceUsers","conferenceId","conferenceUsers","myUserId","filter","user","me","role","onLeave","onLeaveJitsiConference","leaveResult","onDisconnectJitsi","disconnectResult","clearStore","localStorage","removeItem","LSKey","cameraKey","screenKey","audioKey","history","push","_updateMyRole","parseData","JSON","parse","subscribe","onConferenceNotification","code","pubsubCreatedBy","i18n","LEAVE","disableMutateLeave","centered","title","t","content","onOk","onCancel","err","console","log","statusConference","WAITING","conference","createdBy","setLoading","queryConferenceData","queryConference","queryRecording","userId","userGetKicked","kickedBy","dismiss","duration","onScreen","sender","idChatUser","unreadMessage","isShowMessages","name","container","className","PRIORITY","jitsiStore","myUserIds","_conference","PARTICIPANT","pinnedUser","includes","offAudio","key","updateType","value","pinnedBy","setPinnedMode","reOrderUserAtFirstPlace","setSpeakerByUID","mutePolicy","queryConferenceResult","updatedBy","username","myInfo","setJitsiDisplayName","firstname","lastname","MODERATOR","queryPolls","CREATE","pollsInfo","length","pollIds","pollInfo","pubsubVoting","isShowPoll","isShowParticipants","isShowPollManagement","isPanelOpen","currentTab","POLL","END","isShowPollResult","PUBLIC","isPublic","LOCK","queryAttendances","attendanceInfo","pubsubAttending","hasAttendance","queryResources","queryResource","fileOpen","isSlide","positionSlide","carousel","slick","slickNext","slickPrev","queryDraw","queryActiveQnASession","hasQnA","activeQnA","refetchMyFiles","refetchAllFiles","unsubscribe","_prevProps","onClickPoll","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\nimport { setTimeout } from 'timers'\n\nimport { appConstants, _tabs, _userStatus, _queryPollsType } from '@constants'\nimport { client, S_ON_CONFERENCE_NOTIFICATIONS, Q_CONFERENCE_ROLE, Q_CONFERENCE_USERS } from '@graphql'\nimport { newNotification, returnError } from '@utils'\nimport { Modal } from 'antd'\nimport { withTranslation } from 'react-i18next'\nconst { confirm } = Modal\nconst { MUTE_POLICY, ROLE } = appConstants\n\nconst notificationCodes = {\n  // *: Conference User\n  USER_JOINED: 'USER_JOINED',\n  USER_LEFT: 'USER_LEFT',\n  USER_WAITING: 'USER_WAITING',\n  CONFERENCE_USER_UPDATE: 'CONFERENCE_USER_UPDATE',\n  HAS_BEEN_KICKED: 'HAS_BEEN_KICKED',\n  ADMIT_USER: 'ADMIT_USER',\n  REMOVE_USER: 'REMOVE_USER',\n\n  // *: Messages\n  NEW_UNREAD_MESSAGE: 'NEW_UNREAD_MESSAGE',\n\n  // *: Conference Setting\n  MUTE_POLICY_UPDATED: 'MUTE_POLICY_UPDATED',\n  CONFERENCE_RECORD_UPDATE: 'CONFERENCE_RECORD_UPDATE',\n  CONFERENCE_STREAM_UPDATE: 'CONFERENCE_STREAM_UPDATE',\n  LOCK_UPDATED: 'LOCK_UPDATED',\n\n  // *: Conference Speaker\n  PINNED_MAIN_USER: 'PINNED_MAIN_USER',\n  UNPINNED_MAIN_USER: 'UNPINNED_MAIN_USER',\n  PINNED_SUB_USER: 'PINNED_SUB_USER',\n  UNPINNED_SUB_USER: 'UNPINNED_SUB_USER',\n\n  // *: Authorization\n  AUTHORIZATION_UPDATED: 'AUTHORIZATION_UPDATED',\n  USER_ROLE_UPDATED: 'USER_ROLE_UPDATED',\n\n  // *: Poll\n  CREATE_POLL: 'CREATE_POLL',\n  END_POLL: 'END_POLL',\n  TOGGLE_PUBLIC: 'TOGGLE_PUBLIC',\n  TOGGLE_PERSONAL_PUBLIC: 'TOGGLE_PERSONAL_PUBLIC',\n  TOGGLE_LOCK: 'TOGGLE_LOCK',\n\n  // *: Attendance\n  CREATE_ATTENDANCE: 'CREATE_ATTENDANCE',\n  END_ATTENDANCE: 'END_ATTENDANCE',\n\n  // *: Resource\n  NEXT_SLIDE: 'NEXT_SLIDE',\n  PREVIOUS_SLIDE: 'PREVIOUS_SLIDE',\n  CREATE_SLIDE: 'CREATE_SLIDE',\n\n  // SHARE FILE\n  SHARE_FILE: 'SHARE_FILE',\n\n  // *: Draw line\n  DRAW_DATA: 'DRAW_DATA',\n\n  KICK_USER: 'KICK_USER',\n\n  // NOTE: Q&A\n  START_QNA_SESSION: 'START_QNA_SESSION',\n  END_QNA_SESSION: 'END_QNA_SESSION',\n  CREATE_QNA: 'CREATE_QNA',\n  ANSWER_QNA: 'ANSWER_QNA'\n}\n\n@inject(({ stores }) => stores)\n@observer\nclass NotificationSubscriber extends React.PureComponent {\n  // PUBSUB:\n  state = {\n    hasPolling: false\n  }\n  subscriber = null\n  subscriberPoll = null\n\n  queryConferenceRole = () =>\n    client\n      .query({\n        query: Q_CONFERENCE_ROLE,\n        variables: { roleId: this.props.conferenceState.myRole },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { conferenceRole } }) => {\n        if (conferenceRole && conferenceRole._id) {\n          const { setState } = this.props.conferenceState\n          setState({\n            myRole: conferenceRole._id,\n            myPermissions: conferenceRole.permissions.map(per => per._id)\n          })\n        }\n      })\n      .catch(error => {\n        // *: Friendly errors\n        returnError('conferenceRole', {\n          error,\n          errorMessage: 'Failed to get your account information!'\n        })\n      })\n\n  queryConferenceUsers = () =>\n    client\n      .query({\n        query: Q_CONFERENCE_USERS,\n        variables: { conferenceId: this.props.conferenceId },\n        fetchPolicy: 'no-cache'\n      })\n      .then(({ data: { conferenceUsers } }) => {\n        if (conferenceUsers) {\n          const { setState, myUserId } = this.props.conferenceState\n\n          const [me] = conferenceUsers.filter(({ user }) => user && user._id === myUserId)\n\n          if (me && me.role) {\n            setState({\n              myRole: me.role._id,\n              myPermissions: me.role.permissions.map(per => per._id),\n              conferenceUsers: conferenceUsers\n            })\n            return true\n          }\n\n          setState({ conferenceUsers: conferenceUsers })\n          return true\n        }\n      })\n      .catch(error =>\n        returnError('conferenceUsers', {\n          error,\n          errorMessage: `Failed to get conference's users`\n        })\n      )\n\n  onLeave = () => {\n    return this.props.conferenceState.onLeaveJitsiConference().then(leaveResult => {\n      if (leaveResult) {\n        return this.props.conferenceState.onDisconnectJitsi().then(disconnectResult => {\n          if (disconnectResult) {\n            this.props.conferenceState.clearStore()\n\n            // *: Clear settings from localStorage\n            localStorage.removeItem(appConstants.LSKey.cameraKey)\n            localStorage.removeItem(appConstants.LSKey.screenKey)\n            localStorage.removeItem(appConstants.LSKey.audioKey)\n\n            this.props.history.push('/leave')\n          }\n        })\n      }\n    })\n  }\n\n  _updateMyRole = () => {\n    const { setState, myUserId, conferenceUsers } = this.props.conferenceState\n    const [me] = conferenceUsers.filter(({ user }) => user && user._id === myUserId)\n\n    if (me && me.role) {\n      setState({\n        myRole: me.role._id,\n        myPermissions: me.role.permissions.map(per => per._id)\n      })\n    }\n  }\n\n  parseData = data => JSON.parse(data)\n\n  componentDidMount() {\n    // PUBSUB:\n    this.subscriber = client\n      .subscribe({\n        query: S_ON_CONFERENCE_NOTIFICATIONS,\n        variables: { conferenceId: this.props.conferenceId },\n        fetchPolicy: 'no-cache'\n      })\n      .subscribe(async ({ data: { onConferenceNotification } }) => {\n        const { conferenceState } = this.props\n\n        if (onConferenceNotification) {\n          const { code, data, pubsubCreatedBy } = onConferenceNotification\n\n          switch (code) {\n            // *_: Kick user when open many tab\n            case notificationCodes.KICK_USER: {\n              try {\n                if (data === conferenceState.myUserId) {\n                  const { conferenceState, i18n, history } = this.props\n                  conferenceState.LEAVE({ disableMutateLeave: true })\n\n                  confirm({\n                    centered: true,\n                    title: i18n.t('conference.notification'),\n                    content: i18n.t('conference.noti_kicked_out_stop_session'),\n                    onOk() {\n                      history.push('/leave')\n                    },\n                    onCancel() {\n                      history.push('/leave')\n                    }\n                  })\n                }\n              } catch (err) {\n                console.log(err)\n              }\n\n              break\n            }\n\n            // *_: New user joined\n            case notificationCodes.USER_JOINED: {\n              if (\n                pubsubCreatedBy !== conferenceState.myUserId &&\n                conferenceState.statusConference !== _userStatus.WAITING\n              ) {\n                this.queryConferenceUsers()\n                return newNotification(`${data} has joined!`, 'info')\n              }\n\n              break\n            }\n\n            // *_: User left\n            case notificationCodes.USER_LEFT: {\n              if (\n                pubsubCreatedBy !== conferenceState.myUserId &&\n                conferenceState.statusConference !== _userStatus.WAITING\n              ) {\n                this.queryConferenceUsers()\n                return newNotification(`${data} has left!`, 'info')\n              }\n\n              break\n            }\n\n            // *_: User join waiting room\n            case notificationCodes.USER_WAITING: {\n              if (conferenceState.conference.createdBy._id === conferenceState.myUserId) {\n                this.queryConferenceUsers()\n                return newNotification(`${data} has join waiting room`, 'info')\n              }\n              break\n            }\n\n            // *_: Admit User\n            case notificationCodes.ADMIT_USER: {\n              if (data === conferenceState.myUserId) {\n                this.props.setLoading()\n                return this.props.queryConferenceData()\n              }\n              this.queryConferenceUsers()\n              break\n            }\n\n            // *_: Remove User\n            case notificationCodes.REMOVE_USER: {\n              if (data === conferenceState.myUserId) {\n                return this.props.history.push('/leave')\n              }\n              this.queryConferenceUsers()\n              break\n            }\n\n            // *_: Update Conference Users\n            case notificationCodes.CONFERENCE_USER_UPDATE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.queryConferenceUsers()\n              }\n\n              break\n            }\n\n            // *_: ?? :D ??\n            case notificationCodes.CONFERENCE_STREAM_UPDATE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryConference()\n              }\n              break\n            }\n            // Record update\n            case notificationCodes.CONFERENCE_RECORD_UPDATE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryRecording()\n              }\n              break\n            }\n\n            // *_: Get kicked\n            case notificationCodes.HAS_BEEN_KICKED: {\n              const { userGetKicked: userId, kickedBy } = this.parseData(data)\n\n              if (conferenceState.myUserId === userId) {\n                setTimeout(() => this.onLeave(), 1000)\n                return newNotification(`You've been kicked out of the conference by ${kickedBy}.`, 'danger', {\n                  dismiss: { duration: 1000, onScreen: true }\n                })\n              }\n\n              break\n            }\n\n            // *_: New message\n            case notificationCodes.NEW_UNREAD_MESSAGE: {\n              const { sender, content } = this.parseData(data)\n\n              if (conferenceState.myUserId !== pubsubCreatedBy) {\n                if (sender._id !== conferenceState.idChatUser) {\n                  conferenceState.setState({ unreadMessage: conferenceState.unreadMessage + 1 })\n                }\n                if (!conferenceState.isShowMessages && sender._id !== conferenceState.idChatUser) {\n                  return newNotification(content, 'info', {\n                    title: `New Message from ${sender.name}`,\n                    container: 'top-right',\n                    className: 'notification-message',\n                    dismiss: { duration: 1500 }\n                  })\n                }\n              }\n\n              break\n            }\n\n            // NOTE:\n            case notificationCodes.MUTE_POLICY_UPDATED: {\n              if (pubsubCreatedBy !== conferenceState.myUserId) {\n                this.props.queryConference()\n\n                if (onConferenceNotification.data === MUTE_POLICY.PRIORITY) {\n                  const { conferenceState, jitsiStore } = this.props\n\n                  const myUserIds = [jitsiStore.conference.myUserId(), jitsiStore?._conference?.myUserId()]\n                  if (conferenceState?.myRole === ROLE.PARTICIPANT) {\n                    if (\n                      !(\n                        conferenceState?.conference?.pinnedUser &&\n                        myUserIds.includes(conferenceState.conference.pinnedUser)\n                      )\n                    ) {\n                      if (conferenceState.offAudio) {\n                        conferenceState.offAudio()\n                      }\n                    }\n                  }\n                } else {\n                  if (conferenceState.offAudio) {\n                    conferenceState.offAudio()\n                  }\n                }\n              }\n\n              return newNotification('Mute policy updated')\n            }\n\n            // NOTE: Update lock conference\n            case notificationCodes.LOCK_UPDATED: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryConference()\n              }\n              break\n            }\n\n            // NOTE: Pin main speaker\n            case notificationCodes.PINNED_MAIN_USER: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                const { updateType: key, userId: value, pinnedBy } = this.parseData(data)\n                conferenceState.setState({ conference: { ...conferenceState.conference, [key]: value } })\n                try {\n                  conferenceState.setPinnedMode(value)\n                  conferenceState.reOrderUserAtFirstPlace(value)\n                  conferenceState.setSpeakerByUID(value)\n                } catch { }\n\n                return newNotification(`An user has been pinned by ${pinnedBy}`)\n              }\n              break\n            }\n\n            // NOTE: Unpin main speaker\n            case notificationCodes.UNPINNED_MAIN_USER: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                const { updateType: key, userId: value, pinnedBy } = this.parseData(data)\n                conferenceState.setState({ conference: { ...conferenceState.conference, [key]: value } })\n\n                try {\n                  conferenceState.setPinnedMode(value)\n                  conferenceState.reOrderUserAtFirstPlace(value)\n                } catch { }\n\n                const { jitsiStore } = this.props\n\n                if (conferenceState?.conference?.mutePolicy === MUTE_POLICY.PRIORITY) {\n                  if (conferenceState?.myRole === ROLE.PARTICIPANT) {\n                    const myUserIds = [jitsiStore.conference.myUserId(), jitsiStore?._conference?.myUserId()]\n                    if (\n                      !(\n                        conferenceState?.conference?.pinnedUser &&\n                        myUserIds.includes(conferenceState.conference.pinnedUser)\n                      )\n                    ) {\n                      if (conferenceState.offAudio) {\n                        conferenceState.offAudio()\n                      }\n                    }\n                  }\n                }\n\n                return newNotification(`An user has been unpinned by ${pinnedBy}`)\n              }\n              break\n            }\n\n            // NOTE: Authorization updated\n            case notificationCodes.AUTHORIZATION_UPDATED: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryConference().then(queryConferenceResult => {\n                  if (queryConferenceResult) this._updateMyRole()\n                })\n                return newNotification('Conference authorization updated')\n              }\n              break\n            }\n\n            case notificationCodes.USER_ROLE_UPDATED: {\n              const { userId, username: updatedBy, roleId } = this.parseData(data)\n\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                await this.props.queryConference()\n\n                if (conferenceState.myUserId === userId) {\n                  const { conferenceState, jitsiStore } = this.props\n\n                  this._updateMyRole()\n\n                  try {\n                    const { myInfo, myRole } = conferenceState\n                    conferenceState.setJitsiDisplayName(\n                      `${myInfo._id}|${myInfo.firstname} ${myInfo.lastname}|${myRole}`\n                    )\n                  } catch { }\n\n                  if (conferenceState?.conference?.mutePolicy === MUTE_POLICY.PRIORITY) {\n                    if (conferenceState?.myRole === ROLE.PARTICIPANT) {\n                      const myUserIds = [jitsiStore.conference.myUserId(), jitsiStore?._conference?.myUserId()]\n                      if (\n                        !(\n                          conferenceState?.conference?.pinnedUser &&\n                          myUserIds.includes(conferenceState.conference.pinnedUser)\n                        )\n                      ) {\n                        if (conferenceState.offAudio) {\n                          conferenceState.offAudio()\n                        }\n                      }\n                    }\n                  }\n\n                  return newNotification(\n                    `You have been ${roleId === ROLE.MODERATOR ? 'promoted' : 'demoted'} to ${\n                    roleId === 'MODERATOR' ? 'PRESENTER' : roleId\n                    } by ${updatedBy}`\n                  )\n                }\n              }\n              break\n            }\n\n            // NOTE: Poll <3\n            case notificationCodes.CREATE_POLL: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryPolls(_queryPollsType.CREATE).then(() => {\n                  if (conferenceState.pollsInfo.length) {\n                    const pollIds = conferenceState.pollsInfo.map(pollInfo => pollInfo._id)\n                    this.props.pubsubVoting(pollIds)\n                    conferenceState.setState({ hasPolling: true })\n                    newNotification('Bắt đầu khảo sát', 'success')\n                    if (conferenceState.hasPolling && !conferenceState.isShowPoll) {\n                      if (\n                        !conferenceState.isShowParticipants &&\n                        !conferenceState.isShowMessages &&\n                        !conferenceState.isShowPollManagement\n                      ) {\n                        conferenceState.setState({ isPanelOpen: true })\n                      }\n                      conferenceState.setState({ isShowPoll: true, currentTab: _tabs.POLL })\n                    }\n                  }\n                })\n              }\n\n              break\n            }\n\n            case notificationCodes.END_POLL: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryPolls(_queryPollsType.END).then(() => {\n                  conferenceState.setState({ isShowPollResult: false })\n                  conferenceState.setState({ hasPolling: false })\n                  newNotification('Kết thúc khảo sát', 'success')\n                  if (conferenceState.isShowPoll) conferenceState.setState({ isShowPoll: false })\n                  if (\n                    !conferenceState.isShowParticipants &&\n                    !conferenceState.isShowMessages &&\n                    !conferenceState.isShowPollManagement\n                  ) {\n                    conferenceState.setState({ isPanelOpen: !conferenceState.isPanelOpen })\n                  }\n                })\n\n                // localStorage.removeItem('ED_POLLS')\n              }\n\n              break\n            }\n\n            case notificationCodes.TOGGLE_PUBLIC: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryPolls(_queryPollsType.PUBLIC).then(() => {\n                  if (conferenceState.pollsInfo.length) {\n                    const pollIds = conferenceState.pollsInfo.map(pollInfo => pollInfo._id)\n                    this.props.pubsubVoting(pollIds)\n                    conferenceState.setState({ isShowPollResult: conferenceState.pollsInfo[0].isPublic })\n                  }\n                })\n              }\n              break\n            }\n\n            case notificationCodes.TOGGLE_LOCK: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryPolls(_queryPollsType.LOCK).then(() => {\n                  if (conferenceState.pollsInfo.length) {\n                    const pollIds = conferenceState.pollsInfo.map(pollInfo => pollInfo._id)\n                    this.props.pubsubVoting(pollIds)\n                  }\n                })\n              }\n              break\n            }\n\n            // NOTE: Attendance <3\n            case notificationCodes.CREATE_ATTENDANCE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryAttendances().then(() => {\n                  if (conferenceState.attendanceInfo) {\n                    this.props.pubsubAttending(conferenceState.attendanceInfo._id)\n                    newNotification('Bắt đầu điểm danh', 'info')\n                    // setTimeout(() => conferenceState.setState({ hasAttendance: true }), 1000)\n                    conferenceState.setState({ hasAttendance: true })\n                  }\n                })\n              }\n              break\n            }\n\n            case notificationCodes.END_ATTENDANCE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryAttendances().then(() => {\n                  newNotification('Kết thúc điểm danh', 'info')\n                  conferenceState.setState({ hasAttendance: false })\n                })\n              }\n\n              break\n            }\n\n            // *_: Upload Slide Share\n            case notificationCodes.CREATE_SLIDE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryResources()\n              }\n              break\n            }\n\n            // *_: NEXT Slide\n            case notificationCodes.NEXT_SLIDE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryResource(data)\n                if (conferenceState.fileOpen && conferenceState.fileOpen.isSlide) {\n                  conferenceState.setState({ positionSlide: conferenceState.positionSlide + 1 })\n                  if (conferenceState.carousel) {\n                    conferenceState.carousel.slick.slickNext()\n                  }\n                }\n              }\n              break\n            }\n\n            // *_: PREVIOUS Slide\n            case notificationCodes.PREVIOUS_SLIDE: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryResource(data)\n                if (conferenceState.fileOpen && conferenceState.fileOpen.isSlide) {\n                  conferenceState.setState({ positionSlide: conferenceState.positionSlide - 1 })\n                  if (conferenceState.carousel) {\n                    conferenceState.carousel.slick.slickPrev()\n                  }\n                }\n              }\n              break\n            }\n\n            // *_: ?????\n            case notificationCodes.DRAW_DATA: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryDraw()\n              }\n              break\n            }\n\n            // *_: Q&A\n            case notificationCodes.START_QNA_SESSION: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                this.props.queryActiveQnASession()\n              }\n\n              break\n            }\n\n            case notificationCodes.END_QNA_SESSION: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                conferenceState.setState({ hasQnA: false, activeQnA: {} })\n              }\n\n              break\n            }\n\n            case notificationCodes.CREATE_QNA: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                conferenceState.setState({ activeQnA: JSON.parse(data) })\n              }\n\n              break\n            }\n\n            case notificationCodes.ANSWER_QNA: {\n              if (conferenceState.statusConference !== _userStatus.WAITING) {\n                conferenceState.setState({ activeQnA: JSON.parse(data) })\n              }\n\n              break\n            }\n\n\n            // Record update\n            case notificationCodes.SHARE_FILE: {\n              if (data === 'share_file') {\n                newNotification(this.props.i18n.t('conference.newFileShared'), 'info')\n              }\n              conferenceState.refetchMyFiles()\n              conferenceState.refetchAllFiles()\n              break\n            }\n\n            default: {\n              break\n            }\n          }\n        }\n      })\n  }\n\n  componentWillUnmount() {\n    // PUBSUB:\n    if (this.subscriber) {\n      this.subscriber.unsubscribe()\n      this.subscriber = null\n    }\n  }\n\n  componentDidUpdate(_prevProps) {\n    if (_prevProps.conferenceState.hasPolling === false && this.props.conferenceState.hasPolling === true) {\n      if (!this.props.conferenceState.isShowPoll) this.onClickPoll()\n    }\n  }\n\n  render() {\n    return <React.Fragment />\n  }\n}\n\nexport default withTranslation()(withRouter(NotificationSubscriber))\n"]},"metadata":{},"sourceType":"module"}