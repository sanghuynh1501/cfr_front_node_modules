{"ast":null,"code":"import _slicedToArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { _pollType } from '@constants';\nimport moment from 'moment';\nexport var generateHTML = function generateHTML(conferenceState) {\n  var _conferenceState$conf = conferenceState.conference,\n      name = _conferenceState$conf.name,\n      _conferenceState$conf2 = _conferenceState$conf.createdBy,\n      firstname = _conferenceState$conf2.firstname,\n      lastname = _conferenceState$conf2.lastname,\n      conferenceUsers = conferenceState.conferenceUsers,\n      pollsInfo = conferenceState.pollsInfo;\n\n  var formatTimer = function formatTimer(e) {\n    var sec = e / 1000;\n    var min = parseInt(sec / 60);\n    sec = sec % 60;\n\n    var formatNum = function formatNum(num) {\n      return num < 10 ? '0' + Math.floor(num).toString() : Math.floor(num).toString();\n    };\n\n    return formatNum(min) + ':' + formatNum(sec);\n  }; // format data\n\n\n  var dataToShow = function dataToShow(items, key, type) {\n    var groupBy = function groupBy(items, key, type) {\n      // console.log('items', items)\n      if (type === _pollType.MULTIPLE) {\n        var multipleGroupedItems = [];\n        items.forEach(function (e) {\n          if (e.key === null) return;\n          e.key.forEach(function (i, index) {\n            multipleGroupedItems.push(_objectSpread({}, e, {\n              key: e.key[index]\n            }));\n          });\n        });\n        return multipleGroupedItems.reduce(function (result, item) {\n          return _objectSpread({}, result, _defineProperty({}, item[key], [].concat(_toConsumableArray(result[item[key]] || []), [item])));\n        }, {});\n      }\n\n      var groupedItems = items.reduce(function (result, item) {\n        return _objectSpread({}, result, _defineProperty({}, item[key], [].concat(_toConsumableArray(result[item[key]] || []), [item])));\n      }, {}); // console.log('groupedItems', groupedItems)\n\n      return groupedItems;\n    };\n\n    var obj = groupBy(items, key, type);\n    var res = []; // console.log('obj', obj)\n\n    for (var _key in obj) {\n      // console.log(key)\n      var a = {\n        key: _key,\n        values: obj[_key],\n        type: type\n      };\n      res.push(a);\n    }\n\n    return res;\n  };\n\n  var date = moment(pollsInfo[0].createdAt).format('MMMM Do YYYY');\n  var time = moment(pollsInfo[0].createdAt).format(' h:mm:ss a');\n  var realityTime = pollsInfo[0].duration ? formatTimer(moment() - pollsInfo[0].createdAt) : 'Không có';\n  var duration = pollsInfo[0].duration ? formatTimer(pollsInfo[0].duration) : 'Không có';\n  var temp = \"\\n      <!DOCTYPE html>\\n      <html>\\n\\n      <head>\\n        <style>\\n          @import url('https://fonts.googleapis.com/css?family=Open+Sans:400,600&display=swap');\\n\\n          body {\\n            font-family: 'Open Sans';\\n            padding: 0 300px;\\n          }\\n\\n          h1 {\\n            color: maroon;\\n            margin-left: 40px;\\n          }\\n\\n          th {\\n            text-align: center !important;\\n          }\\n\\n          table.data-table,\\n          table.attendeesTable {\\n            border-collapse: collapse;\\n            width: 100%;\\n          }\\n\\n          table.attendeesTable {\\n            margin-top: 1rem\\n          }\\n\\n          td.td-data,\\n          th.th-data,\\n          td.attendeesTd,\\n          th.attendeesTh {\\n            border: 1px solid #5D9C5A;\\n            \\n            padding: 8px;\\n          }\\n\\n          th.attendeesTh {\\n            background-color: #CCCCCC;\\n          }\\n\\n          th.key {\\n            background-color: #5D9C5A;\\n            color: white\\n          }\\n\\n          th.th-data {\\n            background-color: #CCCCCC;\\n          }\\n\\n          td.key {\\n            background-color: #5D9C5A;\\n          }\\n\\n          .span-10{\\n            width: 10%;\\n          }\\n\\n          .span-70{\\n            width:70%;\\n          }\\n          table.infoTable {\\n            width: 100%;\\n            margin-left: 1rem;\\n          }\\n\\n          td.infoTdLeft {\\n            width: 35%;\\n            font-family: \\\"Open Sans\\\"a;\\n            font-weight: 600;\\n            font-style: normal;\\n          }\\n\\n          td.infoTdRight {\\n            width: 65%;\\n          }\\n\\n          div.title {\\n            background-color: #A6C8A6;\\n            color: #313942;\\n            font-size: 18px;\\n            padding: 1px\\n          }\\n\\n          .center{\\n            text-align:center !important;\\n          }\\n\\n          .left{\\n            text-align:left !important;\\n          }\\n        </style>\\n      </head>\\n\\n      <body>\\n\\n        <div class=\\\"header\\\">\\n          <div class=\\\"title\\\">\\n            K\\u1EBFt qu\\u1EA3 th\\u0103m d\\xF2 c\\xE1 nh\\xE2n\\n          </div>\\n\\n          <div class=\\\"conferenceInfo\\\">\\n            <p>H\\u1ED9i tho\\u1EA1i: </p>\\n            <table class=\\\"infoTable\\\">\\n              <tr>\\n                <td class=infoTdLeft>\\n                  \\u0110\\u1EC1 t\\xE0i:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                 \".concat(name, \"\\n                </td>\\n              </tr>\\n\\n              <tr>\\n                <td class=infoTdLeft>\\n                  Ch\\u1EE7 ph\\xF2ng:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                  \").concat(lastname + ' ' + firstname, \"\\n                </td>\\n              </tr>\\n\\n              <tr>\\n                <td class=infoTdLeft>\\n                  S\\u1ED1 ng\\u01B0\\u1EDDi tham d\\u1EF1:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                  \").concat(conferenceUsers.length, \"\\n                </td>\\n              </tr>\\n            </table>\\n          </div>\\n\\n          <div class=\\\"pollsInfo\\\">\\n            <p>Kh\\u1EA3o s\\xE1t: </p>\\n            <table class=\\\"infoTable\\\">\\n              <tr>\\n                <td class=infoTdLeft>\\n                  Lo\\u1EA1i:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                  K\\u1EBFt qu\\u1EA3 c\\xE1 nh\\xE2n\\n                </td>\\n              </tr>\\n\\n              <tr>\\n                <td class=infoTdLeft>\\n                  Ng\\xE0y:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                  \").concat(date, \"\\n                </td>\\n              </tr>\\n\\n              <tr>\\n                <td class=infoTdLeft>\\n                  Th\\u1EDDi gian b\\u1EAFt \\u0111\\u1EA7u:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                  \").concat(time, \"\\n                </td>\\n              </tr>\\n\\n              <tr>\\n                <td class=infoTdLeft>\\n                  Th\\u1EDDi gian th\\u1EF1c t\\u1EBF:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                  \").concat(realityTime, \"\\n                </td>\\n              </tr>\\n\\n              <tr>\\n                <td class=infoTdLeft>\\n                  Th\\u1EDDi gian gi\\u1EDBi h\\u1EA1n:\\n                </td>\\n\\n                <td class=\\\"infoTdRight\\\">\\n                  \").concat(duration, \"\\n                </td>\\n              </tr>\\n            </table>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"content\\\">\\n        \") + pollsInfo.slice().sort(function (a, b) {\n    return a.createdAt - b.createdAt;\n  }).map(function (publicPoll, index) {\n    var userVotes = publicPoll.userVotes,\n        answers = publicPoll.answers,\n        type = publicPoll.type;\n    var mappedUserVotes = userVotes.filter(function (e) {\n      return e.key !== null;\n    }); //Mapped data from data to show\n\n    var mappedData = dataToShow(mappedUserVotes, 'key', type); //Final data for displaying\n\n    var finalData = answers.map(function (e) {\n      return _objectSpread({}, e, {\n        values: mappedData.filter(function (k) {\n          return k.key === e.key;\n        }).pop() ? mappedData.filter(function (k) {\n          return k.key === e.key;\n        }).pop().values : []\n      });\n    });\n    return \"\\n            <div>\\n              <p>C\\xE2u \".concat(index + 1, \": \").concat(publicPoll.question, \"</p>\\n\\n              <table class=\\\"data-table\\\">\\n                <tr class=\\\"tr-data\\\">\\n                  <th class=\\\"th-data span-10\\\"></th>\\n                  <th class=\\\"th-data span-70 left\\\">Answers</th>\\n                  <th class=\\\"th-data span-10\\\">Results</th>\\n                  <th class=\\\"th-data span-10 \\\">%</th>\\n                </tr>\\n              \").concat(type === _pollType.OPEN_ANSWER ? userVotes.filter(function (e) {\n      return e.key;\n    }).map(function (e, i) {\n      return \"<tr class=\\\"tr-data\\\">\\n                        <td class=\\\"td-data key span-10 center\\\"></td>\\n                        <td class=\\\"td-data span-70 \\\">\".concat(e.key, \"</td>\\n                        <td class=\\\"td-data span-10 center\\\"></td>\\n                        <td class=\\\"td-data span-10 center\\\"></td>\\n                      </tr>\");\n    }).join('') : finalData.sort(function (a, b) {\n      return a.key.charCodeAt() - b.key.charCodeAt();\n    }).map(function (e, i) {\n      return \"\\n                      <tr class=\\\"tr-data\\\">\\n                        <td class=\\\"td-data key span-10 center\\\">\".concat(e.key, \"</td>\\n                        <td class=\\\"td-data span-70 \\\">\").concat(e.value, \"</td>\\n                        <td class=\\\"td-data span-10 center\\\">\").concat(mappedUserVotes.filter(function (m) {\n        return m.key.includes(e.key);\n      }).length, \"/\").concat(conferenceUsers.length, \"</td>\\n                        <td class=\\\"td-data span-10 center\\\">\").concat(Math.round(mappedUserVotes.filter(function (m) {\n        return m.key.includes(e.key);\n      }).length / conferenceUsers.length * 100), \"%</td>\\n                      </tr>\\n                    \");\n    }).join(''), \"\\n                <tr class=\\\"tr-data\\\">\\n                  <td class=\\\"td-data key span-10 center\\\"> </td>\\n                    <td class=\\\"td-data span-70 \\\">No answers</td>\\n                    <td class=\\\"td-data span-10 center\\\">\\n                      \").concat(type === _pollType.OPEN_ANSWER ? conferenceUsers.length - userVotes.filter(function (e) {\n      return e.key !== null && e.key[0].length !== 0;\n    }).length : conferenceUsers.length - mappedUserVotes.length, \"/\").concat(conferenceUsers.length, \"\\n                    </td>\\n                    <td class=\\\"td-data span-10 center\\\">\\n                    \").concat(Math.round((type === _pollType.OPEN_ANSWER ? conferenceUsers.length - userVotes.filter(function (e) {\n      return e.key !== null && e.key[0].length !== 0;\n    }).length : conferenceUsers.length - mappedUserVotes.length) / conferenceUsers.length * 100), \"\\n                    %\\n                  </td>\\n                </tr>\\n              </table>\\n\\n              <table class=\\\"attendeesTable\\\">\\n                <tr class=\\\"attendeesTr\\\">\\n                  <th class=\\\"attendeesTh\\\">Attendees</th>\\n                  \").concat(type === _pollType.OPEN_ANSWER ? \"<th class=\\\"attendeesTh\\\">Results</th>\" : answers.map(function (answer) {\n      return \"<th class=\\\"attendeesTh\\\">\".concat(answer.key, \"</th>\");\n    }).join(''), \" \\n                </tr>\\n\\n                \").concat(conferenceUsers.map(function (conferenceUser) {\n      var mappedUserVotes = userVotes.find(function (userVote) {\n        return userVote.user._id === conferenceUser.user._id;\n      });\n      return \"\\n                    <tr class=\\\"attendeesTr\\\">\\n                      <td class=\\\"attendeesTd\\\">\".concat(conferenceUser.user.firstname + ' ' + conferenceUser.user.lastname, \"</td>\\n                      \").concat(type !== _pollType.OPEN_ANSWER ? answers.map(function (answer) {\n        return \"<td class=\\\"attendeesTd\\\">\".concat(type === _pollType.SINGLE ? \"<input disabled \".concat(mappedUserVotes ? mappedUserVotes.key.includes(answer.key) ? 'checked' : '' : '', \" type=\\\"radio\\\">\") : \"<input disabled \".concat(mappedUserVotes ? mappedUserVotes.key.includes(answer.key) ? 'checked' : '' : '', \" type=\\\"checkbox\\\">\"), \"</td>\");\n      }).join('') : \"<td class=\\\"attendeesTd\\\">\".concat(mappedUserVotes ? mappedUserVotes.key : '', \"</td>\"), \"\\n                    </tr>\\n                  \");\n    }).join(''), \"\\n              </table>\\n            </div>\\n          \");\n  }).join('') + \"\\n        </div>\\n\\n      </body>\\n      </html>\\n    \";\n  return temp;\n}; // a little function to help us with reordering the result\n\nexport var Reorder = function Reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nexport var getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    userSelect: 'none'\n  }, draggableStyle, {\n    left: '0.5rem' // background: isDragging ? 'rgba(0,0,0,0.1)' : ''\n\n  });\n};\nexport var getQuestionListStyle = function getQuestionListStyle(isDraggingOver) {\n  return {};\n};\nexport var getAnswerListStyle = function getAnswerListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? 'lightblue' : 'lightgrey'\n  };\n};","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/PollCollapse/_funcs.jsx"],"names":["_pollType","moment","generateHTML","conferenceState","conference","name","createdBy","firstname","lastname","conferenceUsers","pollsInfo","formatTimer","e","sec","min","parseInt","formatNum","num","Math","floor","toString","dataToShow","items","key","type","groupBy","MULTIPLE","multipleGroupedItems","forEach","i","index","push","reduce","result","item","groupedItems","obj","res","a","values","date","createdAt","format","time","realityTime","duration","temp","length","slice","sort","b","map","publicPoll","userVotes","answers","mappedUserVotes","filter","mappedData","finalData","k","pop","question","OPEN_ANSWER","join","charCodeAt","value","m","includes","round","answer","conferenceUser","find","userVote","user","_id","SINGLE","Reorder","list","startIndex","endIndex","Array","from","splice","removed","getItemStyle","isDragging","draggableStyle","userSelect","left","getQuestionListStyle","isDraggingOver","getAnswerListStyle","background"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,eAAe,EAAI;AAAA,8BAQzCA,eARyC,CAE3CC,UAF2C;AAAA,MAGzCC,IAHyC,yBAGzCA,IAHyC;AAAA,qDAIzCC,SAJyC;AAAA,MAI5BC,SAJ4B,0BAI5BA,SAJ4B;AAAA,MAIjBC,QAJiB,0BAIjBA,QAJiB;AAAA,MAM3CC,eAN2C,GAQzCN,eARyC,CAM3CM,eAN2C;AAAA,MAO3CC,SAP2C,GAQzCP,eARyC,CAO3CO,SAP2C;;AAU7C,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,CAAC,EAAI;AACvB,QAAIC,GAAG,GAAGD,CAAC,GAAG,IAAd;AACA,QAAIE,GAAG,GAAGC,QAAQ,CAACF,GAAG,GAAG,EAAP,CAAlB;AACAA,IAAAA,GAAG,GAAGA,GAAG,GAAG,EAAZ;;AAEA,QAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AACvB,aAAOA,GAAG,GAAG,EAAN,GAAW,MAAMC,IAAI,CAACC,KAAL,CAAWF,GAAX,EAAgBG,QAAhB,EAAjB,GAA8CF,IAAI,CAACC,KAAL,CAAWF,GAAX,EAAgBG,QAAhB,EAArD;AACD,KAFD;;AAIA,WAAOJ,SAAS,CAACF,GAAD,CAAT,GAAiB,GAAjB,GAAuBE,SAAS,CAACH,GAAD,CAAvC;AACD,GAVD,CAV6C,CAsB7C;;;AACA,MAAMQ,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,GAAR,EAAaC,IAAb,EAAsB;AACvC,QAAMC,OAAO,GAAG,SAAVA,OAAU,CAACH,KAAD,EAAQC,GAAR,EAAaC,IAAb,EAAsB;AACpC;AACA,UAAIA,IAAI,KAAKxB,SAAS,CAAC0B,QAAvB,EAAiC;AAC/B,YAAIC,oBAAoB,GAAG,EAA3B;AAEAL,QAAAA,KAAK,CAACM,OAAN,CAAc,UAAAhB,CAAC,EAAI;AACjB,cAAIA,CAAC,CAACW,GAAF,KAAU,IAAd,EAAoB;AACpBX,UAAAA,CAAC,CAACW,GAAF,CAAMK,OAAN,CAAc,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC1BH,YAAAA,oBAAoB,CAACI,IAArB,mBAA+BnB,CAA/B;AAAkCW,cAAAA,GAAG,EAAEX,CAAC,CAACW,GAAF,CAAMO,KAAN;AAAvC;AACD,WAFD;AAGD,SALD;AAMA,eAAOH,oBAAoB,CAACK,MAArB,CACL,UAACC,MAAD,EAASC,IAAT;AAAA,mCACKD,MADL,sBAEGC,IAAI,CAACX,GAAD,CAFP,+BAEoBU,MAAM,CAACC,IAAI,CAACX,GAAD,CAAL,CAAN,IAAqB,EAFzC,IAE8CW,IAF9C;AAAA,SADK,EAKL,EALK,CAAP;AAOD;;AACD,UAAMC,YAAY,GAAGb,KAAK,CAACU,MAAN,CACnB,UAACC,MAAD,EAASC,IAAT;AAAA,iCACKD,MADL,sBAEGC,IAAI,CAACX,GAAD,CAFP,+BAEoBU,MAAM,CAACC,IAAI,CAACX,GAAD,CAAL,CAAN,IAAqB,EAFzC,IAE8CW,IAF9C;AAAA,OADmB,EAKnB,EALmB,CAArB,CAnBoC,CA2BpC;;AACA,aAAOC,YAAP;AACD,KA7BD;;AA+BA,QAAIC,GAAG,GAAGX,OAAO,CAACH,KAAD,EAAQC,GAAR,EAAaC,IAAb,CAAjB;AACA,QAAIa,GAAG,GAAG,EAAV,CAjCuC,CAkCvC;;AACA,SAAK,IAAId,IAAT,IAAgBa,GAAhB,EAAqB;AACnB;AACA,UAAIE,CAAC,GAAG;AACNf,QAAAA,GAAG,EAAHA,IADM;AAENgB,QAAAA,MAAM,EAAEH,GAAG,CAACb,IAAD,CAFL;AAGNC,QAAAA,IAAI,EAAJA;AAHM,OAAR;AAKAa,MAAAA,GAAG,CAACN,IAAJ,CAASO,CAAT;AACD;;AACD,WAAOD,GAAP;AACD,GA7CD;;AA+CA,MAAMG,IAAI,GAAGvC,MAAM,CAACS,SAAS,CAAC,CAAD,CAAT,CAAa+B,SAAd,CAAN,CAA+BC,MAA/B,CAAsC,cAAtC,CAAb;AACA,MAAMC,IAAI,GAAG1C,MAAM,CAACS,SAAS,CAAC,CAAD,CAAT,CAAa+B,SAAd,CAAN,CAA+BC,MAA/B,CAAsC,YAAtC,CAAb;AAEA,MAAME,WAAW,GAAGlC,SAAS,CAAC,CAAD,CAAT,CAAamC,QAAb,GAAwBlC,WAAW,CAACV,MAAM,KAAKS,SAAS,CAAC,CAAD,CAAT,CAAa+B,SAAzB,CAAnC,GAAyE,UAA7F;AACA,MAAMI,QAAQ,GAAGnC,SAAS,CAAC,CAAD,CAAT,CAAamC,QAAb,GAAwBlC,WAAW,CAACD,SAAS,CAAC,CAAD,CAAT,CAAamC,QAAd,CAAnC,GAA6D,UAA9E;AAEA,MAAIC,IAAI,GACN,27EAkHezC,IAlHf,qPA4HgBG,QAAQ,GAAG,GAAX,GAAiBD,SA5HjC,wQAsIgBE,eAAe,CAACsC,MAtIhC,uoBA+JgBP,IA/JhB,yQAyKgBG,IAzKhB,oQAmLgBC,WAnLhB,qQA6LgBC,QA7LhB,yJAsMAnC,SAAS,CACNsC,KADH,GAEGC,IAFH,CAEQ,UAACX,CAAD,EAAIY,CAAJ;AAAA,WAAUZ,CAAC,CAACG,SAAF,GAAcS,CAAC,CAACT,SAA1B;AAAA,GAFR,EAGGU,GAHH,CAGO,UAACC,UAAD,EAAatB,KAAb,EAAuB;AAAA,QAClBuB,SADkB,GACWD,UADX,CAClBC,SADkB;AAAA,QACPC,OADO,GACWF,UADX,CACPE,OADO;AAAA,QACE9B,IADF,GACW4B,UADX,CACE5B,IADF;AAG1B,QAAM+B,eAAe,GAAGF,SAAS,CAACG,MAAV,CAAiB,UAAA5C,CAAC;AAAA,aAAIA,CAAC,CAACW,GAAF,KAAU,IAAd;AAAA,KAAlB,CAAxB,CAH0B,CAK1B;;AACA,QAAMkC,UAAU,GAAGpC,UAAU,CAACkC,eAAD,EAAkB,KAAlB,EAAyB/B,IAAzB,CAA7B,CAN0B,CAQ1B;;AACA,QAAMkC,SAAS,GAAGJ,OAAO,CAACH,GAAR,CAAY,UAAAvC,CAAC;AAAA,+BAC1BA,CAD0B;AAE7B2B,QAAAA,MAAM,EAAEkB,UAAU,CAACD,MAAX,CAAkB,UAAAG,CAAC;AAAA,iBAAIA,CAAC,CAACpC,GAAF,KAAUX,CAAC,CAACW,GAAhB;AAAA,SAAnB,EAAwCqC,GAAxC,KACJH,UAAU,CAACD,MAAX,CAAkB,UAAAG,CAAC;AAAA,iBAAIA,CAAC,CAACpC,GAAF,KAAUX,CAAC,CAACW,GAAhB;AAAA,SAAnB,EAAwCqC,GAAxC,GAA8CrB,MAD1C,GAEJ;AAJyB;AAAA,KAAb,CAAlB;AAMA,kEAEeT,KAAK,GAAG,CAFvB,eAE6BsB,UAAU,CAACS,QAFxC,+XAYErC,IAAI,KAAKxB,SAAS,CAAC8D,WAAnB,GACIT,SAAS,CACRG,MADD,CACQ,UAAA5C,CAAC;AAAA,aAAIA,CAAC,CAACW,GAAN;AAAA,KADT,EAEC4B,GAFD,CAGE,UAACvC,CAAD,EAAIiB,CAAJ;AAAA,8KAEuCjB,CAAC,CAACW,GAFzC;AAAA,KAHF,EAUCwC,IAVD,CAUM,EAVN,CADJ,GAYIL,SAAS,CACRT,IADD,CACM,UAACX,CAAD,EAAIY,CAAJ;AAAA,aAAUZ,CAAC,CAACf,GAAF,CAAMyC,UAAN,KAAqBd,CAAC,CAAC3B,GAAF,CAAMyC,UAAN,EAA/B;AAAA,KADN,EAECb,GAFD,CAGE,UAACvC,CAAD,EAAIiB,CAAJ;AAAA,wIAEiDjB,CAAC,CAACW,GAFnD,2EAGuCX,CAAC,CAACqD,KAHzC,iFAKEV,eAAe,CAACC,MAAhB,CAAuB,UAAAU,CAAC;AAAA,eAAIA,CAAC,CAAC3C,GAAF,CAAM4C,QAAN,CAAevD,CAAC,CAACW,GAAjB,CAAJ;AAAA,OAAxB,EAAmDwB,MALrD,cAMMtC,eAAe,CAACsC,MANtB,iFAO6C7B,IAAI,CAACkD,KAAL,CACxCb,eAAe,CAACC,MAAhB,CAAuB,UAAAU,CAAC;AAAA,eAAIA,CAAC,CAAC3C,GAAF,CAAM4C,QAAN,CAAevD,CAAC,CAACW,GAAjB,CAAJ;AAAA,OAAxB,EAAmDwB,MAAnD,GAA4DtC,eAAe,CAACsC,MAA7E,GAAuF,GAD9C,CAP7C;AAAA,KAHF,EAgBCgB,IAhBD,CAgBM,EAhBN,CAxBN,+QA+CEvC,IAAI,KAAKxB,SAAS,CAAC8D,WAAnB,GACIrD,eAAe,CAACsC,MAAhB,GACFM,SAAS,CAACG,MAAV,CAAiB,UAAA5C,CAAC;AAAA,aAAIA,CAAC,CAACW,GAAF,KAAU,IAAV,IAAkBX,CAAC,CAACW,GAAF,CAAM,CAAN,EAASwB,MAAT,KAAoB,CAA1C;AAAA,KAAlB,EAA+DA,MAFjE,GAGItC,eAAe,CAACsC,MAAhB,GAAyBQ,eAAe,CAACR,MAlD/C,cAmDMtC,eAAe,CAACsC,MAnDtB,yHAsDc7B,IAAI,CAACkD,KAAL,CACT,CAAC5C,IAAI,KAAKxB,SAAS,CAAC8D,WAAnB,GACErD,eAAe,CAACsC,MAAhB,GAAyBM,SAAS,CAACG,MAAV,CAAiB,UAAA5C,CAAC;AAAA,aAAIA,CAAC,CAACW,GAAF,KAAU,IAAV,IAAkBX,CAAC,CAACW,GAAF,CAAM,CAAN,EAASwB,MAAT,KAAoB,CAA1C;AAAA,KAAlB,EAA+DA,MAD1F,GAEEtC,eAAe,CAACsC,MAAhB,GAAyBQ,eAAe,CAACR,MAF5C,IAGCtC,eAAe,CAACsC,MAHlB,GAIA,GALU,CAtDd,0RAsEEvB,IAAI,KAAKxB,SAAS,CAAC8D,WAAnB,8CAEIR,OAAO,CAACH,GAAR,CAAY,UAAAkB,MAAM;AAAA,iDAA+BA,MAAM,CAAC9C,GAAtC;AAAA,KAAlB,EAAoEwC,IAApE,CAAyE,EAAzE,CAxEN,yDA4EUtD,eAAe,CACpB0C,GADK,CACD,UAAAmB,cAAc,EAAI;AACrB,UAAMf,eAAe,GAAGF,SAAS,CAACkB,IAAV,CAAe,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,CAAcC,GAAd,KAAsBJ,cAAc,CAACG,IAAf,CAAoBC,GAA9C;AAAA,OAAvB,CAAxB;AACA,yHAEkCJ,cAAc,CAACG,IAAf,CAAoBlE,SAApB,GAAgC,GAAhC,GAAsC+D,cAAc,CAACG,IAAf,CAAoBjE,QAF5F,0CAIEgB,IAAI,KAAKxB,SAAS,CAAC8D,WAAnB,GACIR,OAAO,CACNH,GADD,CACK,UAAAkB,MAAM,EAAI;AACb,mDACE7C,IAAI,KAAKxB,SAAS,CAAC2E,MAAnB,6BAEEpB,eAAe,GACXA,eAAe,CAAChC,GAAhB,CAAoB4C,QAApB,CAA6BE,MAAM,CAAC9C,GAApC,IACE,SADF,GAEE,EAHS,GAIX,EANN,kDASEgC,eAAe,GACXA,eAAe,CAAChC,GAAhB,CAAoB4C,QAApB,CAA6BE,MAAM,CAAC9C,GAApC,IACE,SADF,GAEE,EAHS,GAIX,EAbN,wBADF;AAiBD,OAnBD,EAoBCwC,IApBD,CAoBM,EApBN,CADJ,uCAsB+BR,eAAe,GAAGA,eAAe,CAAChC,GAAnB,GAAyB,EAtBvE,UAJF;AA8BD,KAjCK,EAkCLwC,IAlCK,CAkCA,EAlCA,CA5EV;AAkHD,GApIH,EAqIGA,IArIH,CAqIQ,EArIR,CAtMA,2DADF;AAoVA,SAAOjB,IAAP;AACD,CAjaM,C,CAmaP;;AACA,OAAO,IAAM8B,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAAgC;AACrD,MAAM9C,MAAM,GAAG+C,KAAK,CAACC,IAAN,CAAWJ,IAAX,CAAf;;AADqD,uBAEnC5C,MAAM,CAACiD,MAAP,CAAcJ,UAAd,EAA0B,CAA1B,CAFmC;AAAA;AAAA,MAE9CK,OAF8C;;AAGrDlD,EAAAA,MAAM,CAACiD,MAAP,CAAcH,QAAd,EAAwB,CAAxB,EAA2BI,OAA3B;AAEA,SAAOlD,MAAP;AACD,CANM;AAQP,OAAO,IAAMmD,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAaC,cAAb,EAAgC;AAC1D;AACEC,IAAAA,UAAU,EAAE;AADd,KAEKD,cAFL;AAGEE,IAAAA,IAAI,EAAE,QAHR,CAIE;;AAJF;AAMD,CAPM;AASP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,cAAc;AAAA,SAAK,EAAL;AAAA,CAA3C;AAEP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAD,cAAc;AAAA,SAAK;AACnDE,IAAAA,UAAU,EAAEF,cAAc,GAAG,WAAH,GAAiB;AADQ,GAAL;AAAA,CAAzC","sourcesContent":["import { _pollType } from '@constants'\nimport moment from 'moment'\n\nexport const generateHTML = conferenceState => {\n  const {\n    conference: {\n      name,\n      createdBy: { firstname, lastname }\n    },\n    conferenceUsers,\n    pollsInfo\n  } = conferenceState\n\n  const formatTimer = e => {\n    let sec = e / 1000\n    let min = parseInt(sec / 60)\n    sec = sec % 60\n\n    const formatNum = num => {\n      return num < 10 ? '0' + Math.floor(num).toString() : Math.floor(num).toString()\n    }\n\n    return formatNum(min) + ':' + formatNum(sec)\n  }\n\n  // format data\n  const dataToShow = (items, key, type) => {\n    const groupBy = (items, key, type) => {\n      // console.log('items', items)\n      if (type === _pollType.MULTIPLE) {\n        let multipleGroupedItems = []\n\n        items.forEach(e => {\n          if (e.key === null) return\n          e.key.forEach((i, index) => {\n            multipleGroupedItems.push({ ...e, key: e.key[index] })\n          })\n        })\n        return multipleGroupedItems.reduce(\n          (result, item) => ({\n            ...result,\n            [item[key]]: [...(result[item[key]] || []), item]\n          }),\n          {}\n        )\n      }\n      const groupedItems = items.reduce(\n        (result, item) => ({\n          ...result,\n          [item[key]]: [...(result[item[key]] || []), item]\n        }),\n        {}\n      )\n\n      // console.log('groupedItems', groupedItems)\n      return groupedItems\n    }\n\n    let obj = groupBy(items, key, type)\n    let res = []\n    // console.log('obj', obj)\n    for (let key in obj) {\n      // console.log(key)\n      let a = {\n        key,\n        values: obj[key],\n        type\n      }\n      res.push(a)\n    }\n    return res\n  }\n\n  const date = moment(pollsInfo[0].createdAt).format('MMMM Do YYYY')\n  const time = moment(pollsInfo[0].createdAt).format(' h:mm:ss a')\n\n  const realityTime = pollsInfo[0].duration ? formatTimer(moment() - pollsInfo[0].createdAt) : 'Không có'\n  const duration = pollsInfo[0].duration ? formatTimer(pollsInfo[0].duration) : 'Không có'\n\n  let temp =\n    `\n      <!DOCTYPE html>\n      <html>\n\n      <head>\n        <style>\n          @import url('https://fonts.googleapis.com/css?family=Open+Sans:400,600&display=swap');\n\n          body {\n            font-family: 'Open Sans';\n            padding: 0 300px;\n          }\n\n          h1 {\n            color: maroon;\n            margin-left: 40px;\n          }\n\n          th {\n            text-align: center !important;\n          }\n\n          table.data-table,\n          table.attendeesTable {\n            border-collapse: collapse;\n            width: 100%;\n          }\n\n          table.attendeesTable {\n            margin-top: 1rem\n          }\n\n          td.td-data,\n          th.th-data,\n          td.attendeesTd,\n          th.attendeesTh {\n            border: 1px solid #5D9C5A;\n            \n            padding: 8px;\n          }\n\n          th.attendeesTh {\n            background-color: #CCCCCC;\n          }\n\n          th.key {\n            background-color: #5D9C5A;\n            color: white\n          }\n\n          th.th-data {\n            background-color: #CCCCCC;\n          }\n\n          td.key {\n            background-color: #5D9C5A;\n          }\n\n          .span-10{\n            width: 10%;\n          }\n\n          .span-70{\n            width:70%;\n          }\n          table.infoTable {\n            width: 100%;\n            margin-left: 1rem;\n          }\n\n          td.infoTdLeft {\n            width: 35%;\n            font-family: \"Open Sans\"a;\n            font-weight: 600;\n            font-style: normal;\n          }\n\n          td.infoTdRight {\n            width: 65%;\n          }\n\n          div.title {\n            background-color: #A6C8A6;\n            color: #313942;\n            font-size: 18px;\n            padding: 1px\n          }\n\n          .center{\n            text-align:center !important;\n          }\n\n          .left{\n            text-align:left !important;\n          }\n        </style>\n      </head>\n\n      <body>\n\n        <div class=\"header\">\n          <div class=\"title\">\n            Kết quả thăm dò cá nhân\n          </div>\n\n          <div class=\"conferenceInfo\">\n            <p>Hội thoại: </p>\n            <table class=\"infoTable\">\n              <tr>\n                <td class=infoTdLeft>\n                  Đề tài:\n                </td>\n\n                <td class=\"infoTdRight\">\n                 ${name}\n                </td>\n              </tr>\n\n              <tr>\n                <td class=infoTdLeft>\n                  Chủ phòng:\n                </td>\n\n                <td class=\"infoTdRight\">\n                  ${lastname + ' ' + firstname}\n                </td>\n              </tr>\n\n              <tr>\n                <td class=infoTdLeft>\n                  Số người tham dự:\n                </td>\n\n                <td class=\"infoTdRight\">\n                  ${conferenceUsers.length}\n                </td>\n              </tr>\n            </table>\n          </div>\n\n          <div class=\"pollsInfo\">\n            <p>Khảo sát: </p>\n            <table class=\"infoTable\">\n              <tr>\n                <td class=infoTdLeft>\n                  Loại:\n                </td>\n\n                <td class=\"infoTdRight\">\n                  Kết quả cá nhân\n                </td>\n              </tr>\n\n              <tr>\n                <td class=infoTdLeft>\n                  Ngày:\n                </td>\n\n                <td class=\"infoTdRight\">\n                  ${date}\n                </td>\n              </tr>\n\n              <tr>\n                <td class=infoTdLeft>\n                  Thời gian bắt đầu:\n                </td>\n\n                <td class=\"infoTdRight\">\n                  ${time}\n                </td>\n              </tr>\n\n              <tr>\n                <td class=infoTdLeft>\n                  Thời gian thực tế:\n                </td>\n\n                <td class=\"infoTdRight\">\n                  ${realityTime}\n                </td>\n              </tr>\n\n              <tr>\n                <td class=infoTdLeft>\n                  Thời gian giới hạn:\n                </td>\n\n                <td class=\"infoTdRight\">\n                  ${duration}\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n\n        <div class=\"content\">\n        ` +\n    pollsInfo\n      .slice()\n      .sort((a, b) => a.createdAt - b.createdAt)\n      .map((publicPoll, index) => {\n        const { userVotes, answers, type } = publicPoll\n\n        const mappedUserVotes = userVotes.filter(e => e.key !== null)\n\n        //Mapped data from data to show\n        const mappedData = dataToShow(mappedUserVotes, 'key', type)\n\n        //Final data for displaying\n        const finalData = answers.map(e => ({\n          ...e,\n          values: mappedData.filter(k => k.key === e.key).pop()\n            ? mappedData.filter(k => k.key === e.key).pop().values\n            : []\n        }))\n        return `\n            <div>\n              <p>Câu ${index + 1}: ${publicPoll.question}</p>\n\n              <table class=\"data-table\">\n                <tr class=\"tr-data\">\n                  <th class=\"th-data span-10\"></th>\n                  <th class=\"th-data span-70 left\">Answers</th>\n                  <th class=\"th-data span-10\">Results</th>\n                  <th class=\"th-data span-10 \">%</th>\n                </tr>\n              ${\n          type === _pollType.OPEN_ANSWER\n            ? userVotes\n              .filter(e => e.key)\n              .map(\n                (e, i) => `<tr class=\"tr-data\">\n                        <td class=\"td-data key span-10 center\"></td>\n                        <td class=\"td-data span-70 \">${e.key}</td>\n                        <td class=\"td-data span-10 center\"></td>\n                        <td class=\"td-data span-10 center\"></td>\n                      </tr>`\n              )\n              .join('')\n            : finalData\n              .sort((a, b) => a.key.charCodeAt() - b.key.charCodeAt())\n              .map(\n                (e, i) => `\n                      <tr class=\"tr-data\">\n                        <td class=\"td-data key span-10 center\">${e.key}</td>\n                        <td class=\"td-data span-70 \">${e.value}</td>\n                        <td class=\"td-data span-10 center\">${\n                  mappedUserVotes.filter(m => m.key.includes(e.key)).length\n                  }/${conferenceUsers.length}</td>\n                        <td class=\"td-data span-10 center\">${Math.round(\n                    (mappedUserVotes.filter(m => m.key.includes(e.key)).length / conferenceUsers.length) * 100\n                  )}%</td>\n                      </tr>\n                    `\n              )\n              .join('')\n          }\n                <tr class=\"tr-data\">\n                  <td class=\"td-data key span-10 center\"> </td>\n                    <td class=\"td-data span-70 \">No answers</td>\n                    <td class=\"td-data span-10 center\">\n                      ${\n          type === _pollType.OPEN_ANSWER\n            ? conferenceUsers.length -\n            userVotes.filter(e => e.key !== null && e.key[0].length !== 0).length\n            : conferenceUsers.length - mappedUserVotes.length\n          }/${conferenceUsers.length}\n                    </td>\n                    <td class=\"td-data span-10 center\">\n                    ${Math.round(\n            ((type === _pollType.OPEN_ANSWER\n              ? conferenceUsers.length - userVotes.filter(e => e.key !== null && e.key[0].length !== 0).length\n              : conferenceUsers.length - mappedUserVotes.length) /\n              conferenceUsers.length) *\n            100\n          )}\n                    %\n                  </td>\n                </tr>\n              </table>\n\n              <table class=\"attendeesTable\">\n                <tr class=\"attendeesTr\">\n                  <th class=\"attendeesTh\">Attendees</th>\n                  ${\n          type === _pollType.OPEN_ANSWER\n            ? `<th class=\"attendeesTh\">Results</th>`\n            : answers.map(answer => `<th class=\"attendeesTh\">${answer.key}</th>`).join('')\n          } \n                </tr>\n\n                ${conferenceUsers\n            .map(conferenceUser => {\n              const mappedUserVotes = userVotes.find(userVote => userVote.user._id === conferenceUser.user._id)\n              return `\n                    <tr class=\"attendeesTr\">\n                      <td class=\"attendeesTd\">${conferenceUser.user.firstname + ' ' + conferenceUser.user.lastname}</td>\n                      ${\n                type !== _pollType.OPEN_ANSWER\n                  ? answers\n                    .map(answer => {\n                      return `<td class=\"attendeesTd\">${\n                        type === _pollType.SINGLE\n                          ? `<input disabled ${\n                          mappedUserVotes\n                            ? mappedUserVotes.key.includes(answer.key)\n                              ? 'checked'\n                              : ''\n                            : ''\n                          } type=\"radio\">`\n                          : `<input disabled ${\n                          mappedUserVotes\n                            ? mappedUserVotes.key.includes(answer.key)\n                              ? 'checked'\n                              : ''\n                            : ''\n                          } type=\"checkbox\">`\n                        }</td>`\n                    })\n                    .join('')\n                  : `<td class=\"attendeesTd\">${mappedUserVotes ? mappedUserVotes.key : ''}</td>`\n                }\n                    </tr>\n                  `\n            })\n            .join('')}\n              </table>\n            </div>\n          `\n      })\n      .join('') +\n    `\n        </div>\n\n      </body>\n      </html>\n    `\n\n  return temp\n}\n\n// a little function to help us with reordering the result\nexport const Reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n\n  return result\n}\n\nexport const getItemStyle = (isDragging, draggableStyle) => {\n  return {\n    userSelect: 'none',\n    ...draggableStyle,\n    left: '0.5rem'\n    // background: isDragging ? 'rgba(0,0,0,0.1)' : ''\n  }\n}\n\nexport const getQuestionListStyle = isDraggingOver => ({})\n\nexport const getAnswerListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey'\n})\n"]},"metadata":{},"sourceType":"module"}