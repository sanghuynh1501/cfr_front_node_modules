{"ast":null,"code":"import _objectWithoutProperties from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/dashboard/settings/ServerSetting/EditableCell.jsx\";\nimport React from 'react';\n\nvar EditableCell = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(EditableCell, _React$PureComponent);\n\n  var _super = _createSuper(EditableCell);\n\n  function EditableCell() {\n    var _this;\n\n    _classCallCheck(this, EditableCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.input = React.createRef();\n    _this.state = {\n      editing: false\n    };\n\n    _this.toggleEdit = function () {\n      var editing = !_this.state.editing;\n\n      _this.setState({\n        editing: editing\n      }, function () {\n        if (editing) _this.input.focus();\n      });\n    };\n\n    _this.save = function (e) {\n      _this.form.validateFields(function (error, values) {\n        if (error && error[e.currentTarget.id]) return;\n\n        _this.toggleEdit();\n\n        var newRecord;\n        var update = true;\n\n        switch (_this.props.dataIndex) {\n          case 'hosts.domain':\n            {\n              if (!values.hosts.domain) {\n                update = false;\n              } else {\n                newRecord = _objectSpread({}, _this.props.record, {\n                  hosts: _objectSpread({}, _this.props.record.hosts, {\n                    domain: values.hosts.domain\n                  })\n                });\n              }\n\n              break;\n            }\n\n          case 'hosts.muc':\n            {\n              if (!values.hosts.muc) {\n                update = false;\n              } else {\n                newRecord = _objectSpread({}, _this.props.record, {\n                  hosts: _objectSpread({}, _this.props.record.hosts, {\n                    muc: values.hosts.muc\n                  })\n                });\n              }\n\n              break;\n            }\n\n          case 'range[0]':\n            {\n              if (typeof values.range[0] === 'undefined') {\n                update = false;\n              } else {\n                newRecord = _objectSpread({}, _this.props.record, {\n                  range: [+values.range[0], _this.props.record.range[1]]\n                });\n              }\n\n              break;\n            }\n\n          case 'range[1]':\n            {\n              if (typeof values.range[1] === 'undefined') {\n                update = false;\n              } else {\n                newRecord = _objectSpread({}, _this.props.record, {\n                  range: [_this.props.record.range[0], +values.range[1]]\n                });\n              }\n\n              break;\n            }\n\n          default:\n            {\n              newRecord = _objectSpread({}, _this.props.record, {}, values);\n            }\n        }\n\n        if (update) _this.props.handleSave(newRecord);\n      });\n    };\n\n    _this.renderCell = function (form) {\n      _this.form = form;\n      var _this$props = _this.props,\n          children = _this$props.children,\n          dataIndex = _this$props.dataIndex,\n          record = _this$props.record,\n          title = _this$props.title;\n      return _this.state.editing ? /*#__PURE__*/React.createElement(_Form.Item, {\n        style: {\n          margin: 0\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, form.getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: \"\".concat(title, \" is required.\")\n        }],\n        initialValue: record[dataIndex]\n      })( /*#__PURE__*/React.createElement(_Input, Object.assign({\n        ref: function ref(node) {\n          return _this.input = node;\n        }\n      }, _this.props.dataIndex.indexOf('range') !== -1 ? {\n        type: 'number',\n        min: 0\n      } : {}, {\n        onPressEnter: _this.save,\n        onBlur: _this.save,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      })))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editable-cell-value-wrap\",\n        style: {\n          paddingRight: 24\n        },\n        onClick: _this.toggleEdit,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, children);\n    };\n\n    return _this;\n  }\n\n  _createClass(EditableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          editable = _this$props2.editable,\n          dataIndex = _this$props2.dataIndex,\n          title = _this$props2.title,\n          record = _this$props2.record,\n          index = _this$props2.index,\n          handleSave = _this$props2.handleSave,\n          form = _this$props2.form,\n          children = _this$props2.children,\n          restProps = _objectWithoutProperties(_this$props2, [\"editable\", \"dataIndex\", \"title\", \"record\", \"index\", \"handleSave\", \"form\", \"children\"]);\n\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({\n        key: record && record._id\n      }, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }), editable ? /*#__PURE__*/React.createElement(React.Fragment, null, this.renderCell(form)) : children);\n    }\n  }]);\n\n  return EditableCell;\n}(React.PureComponent);\n\nexport default _Form.create()(EditableCell);","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/dashboard/settings/ServerSetting/EditableCell.jsx"],"names":["React","EditableCell","input","createRef","state","editing","toggleEdit","setState","focus","save","e","form","validateFields","error","values","currentTarget","id","newRecord","update","props","dataIndex","hosts","domain","record","muc","range","handleSave","renderCell","children","title","margin","getFieldDecorator","rules","required","message","initialValue","node","indexOf","type","min","paddingRight","editable","index","restProps","_id","PureComponent","create"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Input, Form } from 'antd'\n\nclass EditableCell extends React.PureComponent {\n  input = React.createRef()\n\n  state = { editing: false }\n\n  toggleEdit = () => {\n    const editing = !this.state.editing\n\n    this.setState({ editing }, () => {\n      if (editing) this.input.focus()\n    })\n  }\n\n  save = e => {\n    this.form.validateFields((error, values) => {\n      if (error && error[e.currentTarget.id]) return\n\n      this.toggleEdit()\n      let newRecord\n      let update = true\n      switch (this.props.dataIndex) {\n        case 'hosts.domain': {\n          if (!values.hosts.domain) {\n            update = false\n          } else {\n            newRecord = { ...this.props.record, hosts: { ...this.props.record.hosts, domain: values.hosts.domain } }\n          }\n          break\n        }\n\n        case 'hosts.muc': {\n          if (!values.hosts.muc) {\n            update = false\n          } else {\n            newRecord = { ...this.props.record, hosts: { ...this.props.record.hosts, muc: values.hosts.muc } }\n          }\n          break\n        }\n\n        case 'range[0]': {\n          if (typeof values.range[0] === 'undefined') {\n            update = false\n          } else {\n            newRecord = { ...this.props.record, range: [+values.range[0], this.props.record.range[1]] }\n          }\n          break\n        }\n\n        case 'range[1]': {\n          if (typeof values.range[1] === 'undefined') {\n            update = false\n          } else {\n            newRecord = { ...this.props.record, range: [this.props.record.range[0], +values.range[1]] }\n          }\n          break\n        }\n\n        default: {\n          newRecord = { ...this.props.record, ...values }\n        }\n      }\n\n      if (update) this.props.handleSave(newRecord)\n    })\n  }\n\n  renderCell = form => {\n    this.form = form\n    const { children, dataIndex, record, title } = this.props\n\n    return this.state.editing ? (\n      <Form.Item style={{ margin: 0 }}>\n        {form.getFieldDecorator(dataIndex, {\n          rules: [{ required: true, message: `${title} is required.` }],\n          initialValue: record[dataIndex]\n        })(\n          <Input\n            ref={node => (this.input = node)}\n            {...(this.props.dataIndex.indexOf('range') !== -1 ? { type: 'number', min: 0 } : {})}\n            onPressEnter={this.save}\n            onBlur={this.save}\n          />\n        )}\n      </Form.Item>\n    ) : (\n        <div className='editable-cell-value-wrap' style={{ paddingRight: 24 }} onClick={this.toggleEdit}>\n          {children}\n        </div>\n      )\n  }\n\n  render() {\n    const { editable, dataIndex, title, record, index, handleSave, form, children, ...restProps } = this.props\n\n    return (\n      <td key={record && record._id} {...restProps}>\n        {editable ? <>{this.renderCell(form)}</> : children}\n      </td>\n    )\n  }\n}\n\nexport default Form.create()(EditableCell)\n"]},"metadata":{},"sourceType":"module"}