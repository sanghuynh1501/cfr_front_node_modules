{"ast":null,"code":"import _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/LocalTrack.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { AvatarComponent } from '@components';\nimport { checkPermission } from '@constants';\nimport { Video } from './media';\nimport WrapperResize from './components/WrapperResize';\nimport pinUser from \"@misc/images/ngocly/pin-icon.svg\";\nimport pinnedIcon from \"@misc/images/toolbar/pinned.svg\"; // import moveIcon from '@misc/images/toolbar/move.svg'\n\nvar LocalTrack = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(LocalTrack, _React$PureComponent);\n\n  var _super = _createSuper(LocalTrack);\n\n  function LocalTrack() {\n    _classCallCheck(this, LocalTrack);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LocalTrack, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          conferenceState = _this$props.conferenceState,\n          jitsiStore = _this$props.jitsiStore;\n      var myUserId = jitsiStore.conference.myUserId();\n\n      var _myUserId = jitsiStore._conference && jitsiStore._conference.myUserId();\n\n      var isPinned = conferenceState.conference.pinnedUser === myUserId;\n\n      var _isPinned = conferenceState.conference.pinnedUser === _myUserId;\n\n      var hasVideo = jitsiStore.isCamera || jitsiStore.isShareScreen;\n\n      var _hasVideo = jitsiStore.isCamera && jitsiStore.isShareScreen;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"local-track-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, _hasVideo ? /*#__PURE__*/React.createElement(WrapperResize, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"track-box-container \".concat(_isPinned && _hasVideo ? 'pinned' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"track-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Video, {\n        id: jitsiStore.desktopTrack.track.getId(),\n        videoTrack: jitsiStore.desktopTrack.track,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"track-box-opacity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 19\n        }\n      }, checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && _hasVideo ? /*#__PURE__*/React.createElement(\"button\", {\n        className: _isPinned && _hasVideo ? 'btn-pin pin-active' : 'btn-pin',\n        onClick: function onClick() {\n          if (checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && _hasVideo) {\n            _this.props.mutateSetPinnedUser(_isPinned ? '' : _myUserId);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: _isPinned && _hasVideo ? pinnedIcon : pinUser,\n        alt: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }\n      }))))) : /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(WrapperResize, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"track-box-container \".concat(isPinned ? 'pinned' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"track-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      }, hasVideo ? /*#__PURE__*/React.createElement(Video, {\n        id: jitsiStore.isCamera ? jitsiStore.videoTrack.track.getId() : jitsiStore.desktopTrack.track.getId(),\n        videoTrack: jitsiStore.isCamera ? jitsiStore.videoTrack.track : jitsiStore.desktopTrack.track,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }) : /*#__PURE__*/React.createElement(AvatarComponent, Object.assign({}, conferenceState.myInfo, {\n        size: 64,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"track-box-opacity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && hasVideo ? /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn-pin \".concat(isPinned ? 'pin-active' : ''),\n        onClick: function onClick() {\n          if (checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER')) {\n            _this.props.mutateSetPinnedUser(isPinned ? '' : myUserId);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: isPinned ? pinnedIcon : pinUser,\n        alt: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 23\n        }\n      })))))));\n    }\n  }]);\n\n  return LocalTrack;\n}(React.PureComponent)) || _class) || _class);\nexport default LocalTrack;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/LocalTrack.jsx"],"names":["React","inject","observer","AvatarComponent","checkPermission","Video","WrapperResize","LocalTrack","stores","props","conferenceState","jitsiStore","myUserId","conference","_myUserId","_conference","isPinned","pinnedUser","_isPinned","hasVideo","isCamera","isShareScreen","_hasVideo","desktopTrack","track","getId","myPermissions","mutateSetPinnedUser","pinnedIcon","pinUser","videoTrack","myInfo","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { AvatarComponent } from '@components'\nimport { checkPermission } from '@constants'\n\nimport { Video } from './media'\nimport WrapperResize from './components/WrapperResize'\n\nimport pinUser from '@misc/images/ngocly/pin-icon.svg'\nimport pinnedIcon from '@misc/images/toolbar/pinned.svg'\n// import moveIcon from '@misc/images/toolbar/move.svg'\n\n@inject(({ stores }) => stores)\n@observer\nclass LocalTrack extends React.PureComponent {\n\n  render() {\n\n    const { conferenceState, jitsiStore } = this.props\n    const myUserId = jitsiStore.conference.myUserId()\n    const _myUserId = jitsiStore._conference && jitsiStore._conference.myUserId()\n\n    const isPinned = conferenceState.conference.pinnedUser === myUserId\n    const _isPinned = conferenceState.conference.pinnedUser === _myUserId\n\n    const hasVideo = jitsiStore.isCamera || jitsiStore.isShareScreen\n    const _hasVideo = jitsiStore.isCamera && jitsiStore.isShareScreen\n\n    return (\n      <div>\n        <div className='local-track-container'>\n          {_hasVideo ? (\n            <WrapperResize>\n              <div className={`track-box-container ${_isPinned && _hasVideo ? 'pinned' : ''}`}>\n                <div className='track-box'>\n                  <Video id={jitsiStore.desktopTrack.track.getId()} videoTrack={jitsiStore.desktopTrack.track} />\n                </div>\n\n                <div className='track-box-opacity'>\n                  <div>\n                    {checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && _hasVideo ? (\n                      <button\n                        className={_isPinned && _hasVideo ? 'btn-pin pin-active' : 'btn-pin'}\n                        onClick={() => {\n                          if (checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && _hasVideo) {\n                            this.props.mutateSetPinnedUser(_isPinned ? '' : _myUserId)\n                          }\n                        }}\n                      >\n                        <img src={_isPinned && _hasVideo ? pinnedIcon : pinUser} alt='icon' />\n                      </button>\n                    ) : (\n                        <React.Fragment />\n                      )}\n                    {/* <button onMouseDown={(e) => this.handleMouseDown(e, 'destop')}>\n                      <img src={moveIcon} alt='move-icon' />\n                    </button> */}\n                  </div>\n                </div>\n              </div>\n            </WrapperResize>\n          ) : (\n              <React.Fragment />\n            )}\n\n          <WrapperResize>\n            <div className={`track-box-container ${isPinned ? 'pinned' : ''}`}>\n              <div className='track-box'>\n                {hasVideo ? (\n                  <Video\n                    id={\n                      jitsiStore.isCamera ? jitsiStore.videoTrack.track.getId() : jitsiStore.desktopTrack.track.getId()\n                    }\n                    videoTrack={jitsiStore.isCamera ? jitsiStore.videoTrack.track : jitsiStore.desktopTrack.track}\n                  />\n                ) : (\n                    <AvatarComponent {...conferenceState.myInfo} size={64} />\n                  )}\n              </div>\n\n              <div className='track-box-opacity'>\n                <div>\n                  {checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && hasVideo ? (\n                    <button\n                      className={`btn-pin ${isPinned ? 'pin-active' : ''}`}\n                      onClick={() => {\n                        if (checkPermission(conferenceState.myPermissions, 'PIN_MAIN_SPEAKER')) {\n                          this.props.mutateSetPinnedUser(isPinned ? '' : myUserId)\n                        }\n                      }}\n                    >\n                      <img src={isPinned ? pinnedIcon : pinUser} alt='icon' />\n                    </button>\n                  ) : <React.Fragment />\n                  }\n                  {/* <button onMouseDown={(e) => this.handleMouseDown(e, 'video')}>\n                    <img src={moveIcon} alt='move-icon' />\n                  </button> */}\n                </div>\n              </div>\n            </div>\n          </WrapperResize>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default LocalTrack\n"]},"metadata":{},"sourceType":"module"}