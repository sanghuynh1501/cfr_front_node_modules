{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/progress/style\";\nimport _Progress from \"antd/es/progress\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/components/RecommendReconnect/index.jsx\";\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport './recommendReconnect.less';\n\nvar RecommendReconnect = /*#__PURE__*/function (_React$Component) {\n  _inherits(RecommendReconnect, _React$Component);\n\n  var _super = _createSuper(RecommendReconnect);\n\n  function RecommendReconnect(props) {\n    var _this;\n\n    _classCallCheck(this, RecommendReconnect);\n\n    _this = _super.call(this, props);\n\n    _this.reload = function () {\n      return window.location.reload();\n    };\n\n    _this.state = {\n      count: 20,\n      isOnline: window.navigator.onLine\n    };\n\n    var that = _assertThisInitialized(_this);\n\n    window.addEventListener('offline', function (e) {\n      that.setState({\n        isOnline: false\n      });\n    });\n    window.addEventListener('online', function (e) {\n      that.setState({\n        isOnline: true\n      });\n    });\n    return _this;\n  }\n\n  _createClass(RecommendReconnect, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setInterval(function () {\n        _this2.setState(function (prevState) {\n          return {\n            count: prevState.count - 1\n          };\n        }, function () {\n          if (_this2.state.count < 0) {\n            if (_this2.state.isOnline) {\n              _this2.reload();\n            } else {\n              _this2.setState({\n                count: 20\n              });\n            }\n          }\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var i18n = this.props.i18n;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"overlay__container-light\",\n        id: \"overlay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"overlay__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inlay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"reload_overlay_title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, i18n.t('conference.labelDisconnected')), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"reload_overlay_text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, i18n.t('conference.labelShouldCheckNetWork'), \" \", i18n.t('conference.reconnectingIn'), \" \", this.state.count, \" \", i18n.t('conference.sec'), \"...\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress-indicator\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"process\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(_Progress, {\n        percent: (20 - this.state.count) / 20 * 100,\n        status: \"active\",\n        showInfo: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(_Button, {\n        onClick: this.reload,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, i18n.t('conference.rejoinNow')))));\n    }\n  }]);\n\n  return RecommendReconnect;\n}(React.Component);\n\nexport default withTranslation()(RecommendReconnect);","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/components/RecommendReconnect/index.jsx"],"names":["React","withTranslation","RecommendReconnect","props","reload","window","location","state","count","isOnline","navigator","onLine","that","addEventListener","e","setState","setInterval","prevState","i18n","t","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button, Progress } from 'antd'\nimport { withTranslation } from 'react-i18next'\nimport './recommendReconnect.less'\n\nclass RecommendReconnect extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 20,\n      isOnline: window.navigator.onLine\n    }\n\n    const that = this\n\n    window.addEventListener('offline', function (e) {\n      that.setState({\n        isOnline: false\n      })\n    })\n\n    window.addEventListener('online', function (e) {\n      that.setState({\n        isOnline: true\n      })\n    })\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState(prevState => ({ count: prevState.count - 1 }), () => {\n        if (this.state.count < 0) {\n          if (this.state.isOnline) {\n            this.reload()\n          } else {\n            this.setState({ count: 20 })\n          }\n        }\n      })\n    }, 1000)\n  }\n\n  reload = () => window.location.reload()\n\n  render() {\n    const { i18n } = this.props\n    return (\n      <div className=\"overlay__container-light\" id=\"overlay\">\n        <div className=\"overlay__content\">\n          <div className=\"inlay\">\n            <span className=\"reload_overlay_title\">{i18n.t('conference.labelDisconnected')}</span>\n            <span className=\"reload_overlay_text\">{i18n.t('conference.labelShouldCheckNetWork')} {i18n.t('conference.reconnectingIn')} {this.state.count} {i18n.t('conference.sec')}...</span>\n\n            <div className=\"progress-indicator\">\n              <div className='process'>\n                <Progress percent={(20 - this.state.count) / 20 * 100} status=\"active\" showInfo={false} />\n              </div>\n            </div>\n            <Button onClick={this.reload}>{i18n.t('conference.rejoinNow')}</Button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withTranslation()(RecommendReconnect)\n"]},"metadata":{},"sourceType":"module"}