{"ast":null,"code":"/**\n * Returns a new {@code Promise} which settles when a specific {@code Promise}\n * settles and is automatically rejected if the specified {@code Promise}\n * doesn't settle within a specific time interval.\n *\n * @param {Promise} promise - The {@code Promise} for which automatic rejecting\n * after the speicified timout is to be implemented.\n * @param {number} timeout - The number of milliseconds to wait the specified\n * {@code promise} to settle before automatically rejecting the returned\n * {@code Promise}.\n * @returns {Promise} - A new {@code Promise} which settles when the specified\n * {@code promise} settles and is automatically rejected after {@code timeout}\n * milliseconds.\n */\nexport function timeoutPromise(promise, timeout) {\n  return new Promise(function (resolve, reject) {\n    var timeoutID = setTimeout(function () {\n      return reject(new Error('timeout'));\n    }, timeout);\n    promise.then(\n    /* onFulfilled */\n    function (value) {\n      resolve(value);\n      clearTimeout(timeoutID);\n    },\n    /* onRejected */\n    function (reason) {\n      reject(reason);\n      clearTimeout(timeoutID);\n    });\n  });\n}","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/features/base/util/timeoutPromise.js"],"names":["timeoutPromise","promise","timeout","Promise","resolve","reject","timeoutID","setTimeout","Error","then","value","clearTimeout","reason"],"mappings":"AAEA;;;;;;;;;;;;;;AAcA,OAAO,SAASA,cAAT,CACHC,OADG,EAEHC,OAFG,EAGL;AACE,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAMC,SAAS,GACTC,UAAU,CAAC;AAAA,aAAMF,MAAM,CAAC,IAAIG,KAAJ,CAAU,SAAV,CAAD,CAAZ;AAAA,KAAD,EAAqCN,OAArC,CADhB;AAGAD,IAAAA,OAAO,CAACQ,IAAR;AACI;AAAkB,cAAAC,KAAK,EAAI;AACvBN,MAAAA,OAAO,CAACM,KAAD,CAAP;AACAC,MAAAA,YAAY,CAACL,SAAD,CAAZ;AACH,KAJL;AAKI;AAAiB,cAAAM,MAAM,EAAI;AACvBP,MAAAA,MAAM,CAACO,MAAD,CAAN;AACAD,MAAAA,YAAY,CAACL,SAAD,CAAZ;AACH,KARL;AAUH,GAdM,CAAP;AAeH","sourcesContent":["// @flow\n\n/**\n * Returns a new {@code Promise} which settles when a specific {@code Promise}\n * settles and is automatically rejected if the specified {@code Promise}\n * doesn't settle within a specific time interval.\n *\n * @param {Promise} promise - The {@code Promise} for which automatic rejecting\n * after the speicified timout is to be implemented.\n * @param {number} timeout - The number of milliseconds to wait the specified\n * {@code promise} to settle before automatically rejecting the returned\n * {@code Promise}.\n * @returns {Promise} - A new {@code Promise} which settles when the specified\n * {@code promise} settles and is automatically rejected after {@code timeout}\n * milliseconds.\n */\nexport function timeoutPromise(\n    promise,\n    timeout\n) {\n    return new Promise((resolve, reject) => {\n        const timeoutID\n            = setTimeout(() => reject(new Error('timeout')), timeout);\n\n        promise.then(\n            /* onFulfilled */ value => {\n                resolve(value);\n                clearTimeout(timeoutID);\n            },\n            /* onRejected */ reason => {\n                reject(reason);\n                clearTimeout(timeoutID);\n            }\n        );\n    });\n}\n"]},"metadata":{},"sourceType":"module"}