{"ast":null,"code":"//     Underscore.js 1.10.2\n//     https://underscorejs.org\n//     (c) 2009-2020 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n// Baseline setup\n// --------------\n// Establish the root object, `window` (`self`) in the browser, `global`\n// on the server, or `this` in some virtual machines. We use `self`\n// instead of `window` for `WebWorker` support.\nvar root = typeof self == 'object' && self.self === self && self || typeof global == 'object' && global.global === global && global || Function('return this')() || {}; // Save bytes in the minified (but not gzipped) version:\n\nvar ArrayProto = Array.prototype,\n    ObjProto = Object.prototype;\nvar SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null; // Create quick reference variables for speed access to core prototypes.\n\nvar push = ArrayProto.push,\n    slice = ArrayProto.slice,\n    toString = ObjProto.toString,\n    hasOwnProperty = ObjProto.hasOwnProperty; // All **ECMAScript 5** native function implementations that we hope to use\n// are declared here.\n\nvar nativeIsArray = Array.isArray,\n    nativeKeys = Object.keys,\n    nativeCreate = Object.create; // Create references to these builtin functions because we override them.\n\nvar _isNaN = root.isNaN,\n    _isFinite = root.isFinite; // Naked function reference for surrogate-prototype-swapping.\n\nvar Ctor = function Ctor() {}; // The Underscore object. All exported functions below are added to it in the\n// modules/index-all.js using the mixin function.\n\n\nexport default function _(obj) {\n  if (obj instanceof _) return obj;\n  if (!(this instanceof _)) return new _(obj);\n  this._wrapped = obj;\n} // Current version.\n\nexport var VERSION = _.VERSION = '1.10.2'; // Internal function that returns an efficient (for current engines) version\n// of the passed-in callback, to be repeatedly applied in other Underscore\n// functions.\n\nfunction optimizeCb(func, context, argCount) {\n  if (context === void 0) return func;\n\n  switch (argCount == null ? 3 : argCount) {\n    case 1:\n      return function (value) {\n        return func.call(context, value);\n      };\n    // The 2-argument case is omitted because we’re not using it.\n\n    case 3:\n      return function (value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n\n    case 4:\n      return function (accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n  }\n\n  return function () {\n    return func.apply(context, arguments);\n  };\n} // An internal function to generate callbacks that can be applied to each\n// element in a collection, returning the desired result — either `identity`,\n// an arbitrary callback, a property matcher, or a property accessor.\n\n\nfunction baseIteratee(value, context, argCount) {\n  if (value == null) return identity;\n  if (isFunction(value)) return optimizeCb(value, context, argCount);\n  if (isObject(value) && !isArray(value)) return matcher(value);\n  return property(value);\n} // External wrapper for our callback generator. Users may customize\n// `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n// This abstraction hides the internal-only argCount argument.\n\n\n_.iteratee = iteratee;\nexport function iteratee(value, context) {\n  return baseIteratee(value, context, Infinity);\n} // The function we actually call internally. It invokes _.iteratee if\n// overridden, otherwise baseIteratee.\n\nfunction cb(value, context, argCount) {\n  if (_.iteratee !== iteratee) return _.iteratee(value, context);\n  return baseIteratee(value, context, argCount);\n} // Some functions take a variable number of arguments, or a few expected\n// arguments at the beginning and then a variable number of values to operate\n// on. This helper accumulates all remaining arguments past the function’s\n// argument length (or an explicit `startIndex`), into an array that becomes\n// the last argument. Similar to ES6’s \"rest parameter\".\n\n\nexport function restArguments(func, startIndex) {\n  startIndex = startIndex == null ? func.length - 1 : +startIndex;\n  return function () {\n    var length = Math.max(arguments.length - startIndex, 0),\n        rest = Array(length),\n        index = 0;\n\n    for (; index < length; index++) {\n      rest[index] = arguments[index + startIndex];\n    }\n\n    switch (startIndex) {\n      case 0:\n        return func.call(this, rest);\n\n      case 1:\n        return func.call(this, arguments[0], rest);\n\n      case 2:\n        return func.call(this, arguments[0], arguments[1], rest);\n    }\n\n    var args = Array(startIndex + 1);\n\n    for (index = 0; index < startIndex; index++) {\n      args[index] = arguments[index];\n    }\n\n    args[startIndex] = rest;\n    return func.apply(this, args);\n  };\n} // An internal function for creating a new object that inherits from another.\n\nfunction baseCreate(prototype) {\n  if (!isObject(prototype)) return {};\n  if (nativeCreate) return nativeCreate(prototype);\n  Ctor.prototype = prototype;\n  var result = new Ctor();\n  Ctor.prototype = null;\n  return result;\n}\n\nfunction shallowProperty(key) {\n  return function (obj) {\n    return obj == null ? void 0 : obj[key];\n  };\n}\n\nfunction _has(obj, path) {\n  return obj != null && hasOwnProperty.call(obj, path);\n}\n\nfunction deepGet(obj, path) {\n  var length = path.length;\n\n  for (var i = 0; i < length; i++) {\n    if (obj == null) return void 0;\n    obj = obj[path[i]];\n  }\n\n  return length ? obj : void 0;\n} // Helper for collection methods to determine whether a collection\n// should be iterated as an array or as an object.\n// Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n\n\nvar MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\nvar getLength = shallowProperty('length');\n\nfunction isArrayLike(collection) {\n  var length = getLength(collection);\n  return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n} // Collection Functions\n// --------------------\n// The cornerstone, an `each` implementation, aka `forEach`.\n// Handles raw objects in addition to array-likes. Treats all\n// sparse array-likes as if they were dense.\n\n\nexport function each(obj, iteratee, context) {\n  iteratee = optimizeCb(iteratee, context);\n  var i, length;\n\n  if (isArrayLike(obj)) {\n    for (i = 0, length = obj.length; i < length; i++) {\n      iteratee(obj[i], i, obj);\n    }\n  } else {\n    var _keys = keys(obj);\n\n    for (i = 0, length = _keys.length; i < length; i++) {\n      iteratee(obj[_keys[i]], _keys[i], obj);\n    }\n  }\n\n  return obj;\n}\nexport { each as forEach }; // Return the results of applying the iteratee to each element.\n\nexport function map(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length,\n      results = Array(length);\n\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    results[index] = iteratee(obj[currentKey], currentKey, obj);\n  }\n\n  return results;\n}\nexport { map as collect }; // Create a reducing function iterating left or right.\n\nfunction createReduce(dir) {\n  // Wrap code that reassigns argument variables in a separate function than\n  // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n  var reducer = function reducer(obj, iteratee, memo, initial) {\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        index = dir > 0 ? 0 : length - 1;\n\n    if (!initial) {\n      memo = obj[_keys ? _keys[index] : index];\n      index += dir;\n    }\n\n    for (; index >= 0 && index < length; index += dir) {\n      var currentKey = _keys ? _keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n\n    return memo;\n  };\n\n  return function (obj, iteratee, memo, context) {\n    var initial = arguments.length >= 3;\n    return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n  };\n} // **Reduce** builds up a single result from a list of values, aka `inject`,\n// or `foldl`.\n\n\nexport var reduce = createReduce(1);\nexport { reduce as foldl, reduce as inject }; // The right-associative version of reduce, also known as `foldr`.\n\nexport var reduceRight = createReduce(-1);\nexport { reduceRight as foldr }; // Return the first value which passes a truth test.\n\nexport function find(obj, predicate, context) {\n  var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n  var key = keyFinder(obj, predicate, context);\n  if (key !== void 0 && key !== -1) return obj[key];\n}\nexport { find as detect }; // Return all the elements that pass a truth test.\n\nexport function filter(obj, predicate, context) {\n  var results = [];\n  predicate = cb(predicate, context);\n  each(obj, function (value, index, list) {\n    if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n}\nexport { filter as select }; // Return all the elements for which a truth test fails.\n\nexport function reject(obj, predicate, context) {\n  return filter(obj, negate(cb(predicate)), context);\n} // Determine whether all of the elements match a truth test.\n\nexport function every(obj, predicate, context) {\n  predicate = cb(predicate, context);\n\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (!predicate(obj[currentKey], currentKey, obj)) return false;\n  }\n\n  return true;\n}\nexport { every as all }; // Determine if at least one element in the object matches a truth test.\n\nexport function some(obj, predicate, context) {\n  predicate = cb(predicate, context);\n\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (predicate(obj[currentKey], currentKey, obj)) return true;\n  }\n\n  return false;\n}\nexport { some as any }; // Determine if the array or object contains a given item (using `===`).\n\nexport function contains(obj, item, fromIndex, guard) {\n  if (!isArrayLike(obj)) obj = values(obj);\n  if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n  return indexOf(obj, item, fromIndex) >= 0;\n}\nexport { contains as includes, contains as include }; // Invoke a method (with arguments) on every item in a collection.\n\nexport var invoke = restArguments(function (obj, path, args) {\n  var contextPath, func;\n\n  if (isFunction(path)) {\n    func = path;\n  } else if (isArray(path)) {\n    contextPath = path.slice(0, -1);\n    path = path[path.length - 1];\n  }\n\n  return map(obj, function (context) {\n    var method = func;\n\n    if (!method) {\n      if (contextPath && contextPath.length) {\n        context = deepGet(context, contextPath);\n      }\n\n      if (context == null) return void 0;\n      method = context[path];\n    }\n\n    return method == null ? method : method.apply(context, args);\n  });\n}); // Convenience version of a common use case of `map`: fetching a property.\n\nexport function pluck(obj, key) {\n  return map(obj, property(key));\n} // Convenience version of a common use case of `filter`: selecting only objects\n// containing specific `key:value` pairs.\n\nexport function where(obj, attrs) {\n  return filter(obj, matcher(attrs));\n} // Convenience version of a common use case of `find`: getting the first object\n// containing specific `key:value` pairs.\n\nexport function findWhere(obj, attrs) {\n  return find(obj, matcher(attrs));\n} // Return the maximum element (or element-based computation).\n\nexport function max(obj, iteratee, context) {\n  var result = -Infinity,\n      lastComputed = -Infinity,\n      value,\n      computed;\n\n  if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n\n      if (value != null && value > result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function (v, index, list) {\n      computed = iteratee(v, index, list);\n\n      if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n\n  return result;\n} // Return the minimum element (or element-based computation).\n\nexport function min(obj, iteratee, context) {\n  var result = Infinity,\n      lastComputed = Infinity,\n      value,\n      computed;\n\n  if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n\n      if (value != null && value < result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function (v, index, list) {\n      computed = iteratee(v, index, list);\n\n      if (computed < lastComputed || computed === Infinity && result === Infinity) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n\n  return result;\n} // Shuffle a collection.\n\nexport function shuffle(obj) {\n  return sample(obj, Infinity);\n} // Sample **n** random values from a collection using the modern version of the\n// [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n// If **n** is not specified, returns a single random element.\n// The internal `guard` argument allows it to work with `map`.\n\nexport function sample(obj, n, guard) {\n  if (n == null || guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    return obj[random(obj.length - 1)];\n  }\n\n  var sample = isArrayLike(obj) ? clone(obj) : values(obj);\n  var length = getLength(sample);\n  n = Math.max(Math.min(n, length), 0);\n  var last = length - 1;\n\n  for (var index = 0; index < n; index++) {\n    var rand = random(index, last);\n    var temp = sample[index];\n    sample[index] = sample[rand];\n    sample[rand] = temp;\n  }\n\n  return sample.slice(0, n);\n} // Sort the object's values by a criterion produced by an iteratee.\n\nexport function sortBy(obj, iteratee, context) {\n  var index = 0;\n  iteratee = cb(iteratee, context);\n  return pluck(map(obj, function (value, key, list) {\n    return {\n      value: value,\n      index: index++,\n      criteria: iteratee(value, key, list)\n    };\n  }).sort(function (left, right) {\n    var a = left.criteria;\n    var b = right.criteria;\n\n    if (a !== b) {\n      if (a > b || a === void 0) return 1;\n      if (a < b || b === void 0) return -1;\n    }\n\n    return left.index - right.index;\n  }), 'value');\n} // An internal function used for aggregate \"group by\" operations.\n\nfunction group(behavior, partition) {\n  return function (obj, iteratee, context) {\n    var result = partition ? [[], []] : {};\n    iteratee = cb(iteratee, context);\n    each(obj, function (value, index) {\n      var key = iteratee(value, index, obj);\n      behavior(result, value, key);\n    });\n    return result;\n  };\n} // Groups the object's values by a criterion. Pass either a string attribute\n// to group by, or a function that returns the criterion.\n\n\nexport var groupBy = group(function (result, value, key) {\n  if (_has(result, key)) result[key].push(value);else result[key] = [value];\n}); // Indexes the object's values by a criterion, similar to `groupBy`, but for\n// when you know that your index values will be unique.\n\nexport var indexBy = group(function (result, value, key) {\n  result[key] = value;\n}); // Counts instances of an object that group by a certain criterion. Pass\n// either a string attribute to count by, or a function that returns the\n// criterion.\n\nexport var countBy = group(function (result, value, key) {\n  if (_has(result, key)) result[key]++;else result[key] = 1;\n});\nvar reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g; // Safely create a real, live array from anything iterable.\n\nexport function toArray(obj) {\n  if (!obj) return [];\n  if (isArray(obj)) return slice.call(obj);\n\n  if (isString(obj)) {\n    // Keep surrogate pair characters together\n    return obj.match(reStrSymbol);\n  }\n\n  if (isArrayLike(obj)) return map(obj, identity);\n  return values(obj);\n} // Return the number of elements in an object.\n\nexport function size(obj) {\n  if (obj == null) return 0;\n  return isArrayLike(obj) ? obj.length : keys(obj).length;\n} // Split a collection into two arrays: one whose elements all satisfy the given\n// predicate, and one whose elements all do not satisfy the predicate.\n\nexport var partition = group(function (result, value, pass) {\n  result[pass ? 0 : 1].push(value);\n}, true); // Array Functions\n// ---------------\n// Get the first element of an array. Passing **n** will return the first N\n// values in the array. The **guard** check allows it to work with `map`.\n\nexport function first(array, n, guard) {\n  if (array == null || array.length < 1) return n == null ? void 0 : [];\n  if (n == null || guard) return array[0];\n  return initial(array, array.length - n);\n}\nexport { first as head, first as take }; // Returns everything but the last entry of the array. Especially useful on\n// the arguments object. Passing **n** will return all the values in\n// the array, excluding the last N.\n\nexport function initial(array, n, guard) {\n  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n} // Get the last element of an array. Passing **n** will return the last N\n// values in the array.\n\nexport function last(array, n, guard) {\n  if (array == null || array.length < 1) return n == null ? void 0 : [];\n  if (n == null || guard) return array[array.length - 1];\n  return rest(array, Math.max(0, array.length - n));\n} // Returns everything but the first entry of the array. Especially useful on\n// the arguments object. Passing an **n** will return the rest N values in the\n// array.\n\nexport function rest(array, n, guard) {\n  return slice.call(array, n == null || guard ? 1 : n);\n}\nexport { rest as tail, rest as drop }; // Trim out all falsy values from an array.\n\nexport function compact(array) {\n  return filter(array, Boolean);\n} // Internal implementation of a recursive `flatten` function.\n\nfunction _flatten(input, shallow, strict, output) {\n  output = output || [];\n  var idx = output.length;\n\n  for (var i = 0, length = getLength(input); i < length; i++) {\n    var value = input[i];\n\n    if (isArrayLike(value) && (isArray(value) || isArguments(value))) {\n      // Flatten current level of array or arguments object.\n      if (shallow) {\n        var j = 0,\n            len = value.length;\n\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else {\n        _flatten(value, shallow, strict, output);\n\n        idx = output.length;\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n\n  return output;\n} // Flatten out an array, either recursively (by default), or just one level.\n\n\nexport function flatten(array, shallow) {\n  return _flatten(array, shallow, false);\n} // Return a version of the array that does not contain the specified value(s).\n\nexport var without = restArguments(function (array, otherArrays) {\n  return difference(array, otherArrays);\n}); // Produce a duplicate-free version of the array. If the array has already\n// been sorted, you have the option of using a faster algorithm.\n// The faster algorithm will not work with an iteratee if the iteratee\n// is not a one-to-one function, so providing an iteratee will disable\n// the faster algorithm.\n\nexport function uniq(array, isSorted, iteratee, context) {\n  if (!isBoolean(isSorted)) {\n    context = iteratee;\n    iteratee = isSorted;\n    isSorted = false;\n  }\n\n  if (iteratee != null) iteratee = cb(iteratee, context);\n  var result = [];\n  var seen = [];\n\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var value = array[i],\n        computed = iteratee ? iteratee(value, i, array) : value;\n\n    if (isSorted && !iteratee) {\n      if (!i || seen !== computed) result.push(value);\n      seen = computed;\n    } else if (iteratee) {\n      if (!contains(seen, computed)) {\n        seen.push(computed);\n        result.push(value);\n      }\n    } else if (!contains(result, value)) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\nexport { uniq as unique }; // Produce an array that contains the union: each distinct element from all of\n// the passed-in arrays.\n\nexport var union = restArguments(function (arrays) {\n  return uniq(_flatten(arrays, true, true));\n}); // Produce an array that contains every item shared between all the\n// passed-in arrays.\n\nexport function intersection(array) {\n  var result = [];\n  var argsLength = arguments.length;\n\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var item = array[i];\n    if (contains(result, item)) continue;\n    var j;\n\n    for (j = 1; j < argsLength; j++) {\n      if (!contains(arguments[j], item)) break;\n    }\n\n    if (j === argsLength) result.push(item);\n  }\n\n  return result;\n} // Take the difference between one array and a number of other arrays.\n// Only the elements present in just the first array will remain.\n\nexport var difference = restArguments(function (array, rest) {\n  rest = _flatten(rest, true, true);\n  return filter(array, function (value) {\n    return !contains(rest, value);\n  });\n}); // Complement of zip. Unzip accepts an array of arrays and groups\n// each array's elements on shared indices.\n\nexport function unzip(array) {\n  var length = array && max(array, getLength).length || 0;\n  var result = Array(length);\n\n  for (var index = 0; index < length; index++) {\n    result[index] = pluck(array, index);\n  }\n\n  return result;\n} // Zip together multiple lists into a single array -- elements that share\n// an index go together.\n\nexport var zip = restArguments(unzip); // Converts lists into objects. Pass either a single array of `[key, value]`\n// pairs, or two parallel arrays of the same length -- one of keys, and one of\n// the corresponding values. Passing by pairs is the reverse of pairs.\n\nexport function object(list, values) {\n  var result = {};\n\n  for (var i = 0, length = getLength(list); i < length; i++) {\n    if (values) {\n      result[list[i]] = values[i];\n    } else {\n      result[list[i][0]] = list[i][1];\n    }\n  }\n\n  return result;\n} // Generator function to create the findIndex and findLastIndex functions.\n\nfunction createPredicateIndexFinder(dir) {\n  return function (array, predicate, context) {\n    predicate = cb(predicate, context);\n    var length = getLength(array);\n    var index = dir > 0 ? 0 : length - 1;\n\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index;\n    }\n\n    return -1;\n  };\n} // Returns the first index on an array-like that passes a predicate test.\n\n\nexport var findIndex = createPredicateIndexFinder(1);\nexport var findLastIndex = createPredicateIndexFinder(-1); // Use a comparator function to figure out the smallest index at which\n// an object should be inserted so as to maintain order. Uses binary search.\n\nexport function sortedIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  var value = iteratee(obj);\n  var low = 0,\n      high = getLength(array);\n\n  while (low < high) {\n    var mid = Math.floor((low + high) / 2);\n    if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;\n  }\n\n  return low;\n} // Generator function to create the indexOf and lastIndexOf functions.\n\nfunction createIndexFinder(dir, predicateFind, sortedIndex) {\n  return function (array, item, idx) {\n    var i = 0,\n        length = getLength(array);\n\n    if (typeof idx == 'number') {\n      if (dir > 0) {\n        i = idx >= 0 ? idx : Math.max(idx + length, i);\n      } else {\n        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n      }\n    } else if (sortedIndex && idx && length) {\n      idx = sortedIndex(array, item);\n      return array[idx] === item ? idx : -1;\n    }\n\n    if (item !== item) {\n      idx = predicateFind(slice.call(array, i, length), isNaN);\n      return idx >= 0 ? idx + i : -1;\n    }\n\n    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n      if (array[idx] === item) return idx;\n    }\n\n    return -1;\n  };\n} // Return the position of the first occurrence of an item in an array,\n// or -1 if the item is not included in the array.\n// If the array is large and already in sort order, pass `true`\n// for **isSorted** to use binary search.\n\n\nexport var indexOf = createIndexFinder(1, findIndex, sortedIndex);\nexport var lastIndexOf = createIndexFinder(-1, findLastIndex); // Generate an integer Array containing an arithmetic progression. A port of\n// the native Python `range()` function. See\n// [the Python documentation](https://docs.python.org/library/functions.html#range).\n\nexport function range(start, stop, step) {\n  if (stop == null) {\n    stop = start || 0;\n    start = 0;\n  }\n\n  if (!step) {\n    step = stop < start ? -1 : 1;\n  }\n\n  var length = Math.max(Math.ceil((stop - start) / step), 0);\n  var range = Array(length);\n\n  for (var idx = 0; idx < length; idx++, start += step) {\n    range[idx] = start;\n  }\n\n  return range;\n} // Chunk a single array into multiple arrays, each containing `count` or fewer\n// items.\n\nexport function chunk(array, count) {\n  if (count == null || count < 1) return [];\n  var result = [];\n  var i = 0,\n      length = array.length;\n\n  while (i < length) {\n    result.push(slice.call(array, i, i += count));\n  }\n\n  return result;\n} // Function (ahem) Functions\n// ------------------\n// Determines whether to execute a function as a constructor\n// or a normal function with the provided arguments.\n\nfunction executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n  if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n  var self = baseCreate(sourceFunc.prototype);\n  var result = sourceFunc.apply(self, args);\n  if (isObject(result)) return result;\n  return self;\n} // Create a function bound to a given object (assigning `this`, and arguments,\n// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n// available.\n\n\nexport var bind = restArguments(function (func, context, args) {\n  if (!isFunction(func)) throw new TypeError('Bind must be called on a function');\n  var bound = restArguments(function (callArgs) {\n    return executeBound(func, bound, context, this, args.concat(callArgs));\n  });\n  return bound;\n}); // Partially apply a function by creating a version that has had some of its\n// arguments pre-filled, without changing its dynamic `this` context. _ acts\n// as a placeholder by default, allowing any combination of arguments to be\n// pre-filled. Set `partial.placeholder` for a custom placeholder argument.\n\nexport var partial = restArguments(function (func, boundArgs) {\n  var placeholder = partial.placeholder;\n\n  var bound = function bound() {\n    var position = 0,\n        length = boundArgs.length;\n    var args = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n    }\n\n    while (position < arguments.length) {\n      args.push(arguments[position++]);\n    }\n\n    return executeBound(func, bound, this, this, args);\n  };\n\n  return bound;\n});\npartial.placeholder = _; // Bind a number of an object's methods to that object. Remaining arguments\n// are the method names to be bound. Useful for ensuring that all callbacks\n// defined on an object belong to it.\n\nexport var bindAll = restArguments(function (obj, _keys) {\n  _keys = _flatten(_keys, false, false);\n  var index = _keys.length;\n  if (index < 1) throw new Error('bindAll must be passed function names');\n\n  while (index--) {\n    var key = _keys[index];\n    obj[key] = bind(obj[key], obj);\n  }\n}); // Memoize an expensive function by storing its results.\n\nexport function memoize(func, hasher) {\n  var memoize = function memoize(key) {\n    var cache = memoize.cache;\n    var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n    if (!_has(cache, address)) cache[address] = func.apply(this, arguments);\n    return cache[address];\n  };\n\n  memoize.cache = {};\n  return memoize;\n} // Delays a function for the given number of milliseconds, and then calls\n// it with the arguments supplied.\n\nexport var delay = restArguments(function (func, wait, args) {\n  return setTimeout(function () {\n    return func.apply(null, args);\n  }, wait);\n}); // Defers a function, scheduling it to run after the current call stack has\n// cleared.\n\nexport var defer = partial(delay, _, 1); // Returns a function, that, when invoked, will only be triggered at most once\n// during a given window of time. Normally, the throttled function will run\n// as much as it can, without ever going more than once per `wait` duration;\n// but if you'd like to disable the execution on the leading edge, pass\n// `{leading: false}`. To disable execution on the trailing edge, ditto.\n\nexport function throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function later() {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function throttled() {\n    var _now = now();\n\n    if (!previous && options.leading === false) previous = _now;\n    var remaining = wait - (_now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = _now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n\n  throttled.cancel = function () {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n} // Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nexport function debounce(func, wait, immediate) {\n  var timeout, result;\n\n  var later = function later(context, args) {\n    timeout = null;\n    if (args) result = func.apply(context, args);\n  };\n\n  var debounced = restArguments(function (args) {\n    if (timeout) clearTimeout(timeout);\n\n    if (immediate) {\n      var callNow = !timeout;\n      timeout = setTimeout(later, wait);\n      if (callNow) result = func.apply(this, args);\n    } else {\n      timeout = delay(later, wait, this, args);\n    }\n\n    return result;\n  });\n\n  debounced.cancel = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return debounced;\n} // Returns the first function passed as an argument to the second,\n// allowing you to adjust arguments, run code before and after, and\n// conditionally execute the original function.\n\nexport function wrap(func, wrapper) {\n  return partial(wrapper, func);\n} // Returns a negated version of the passed-in predicate.\n\nexport function negate(predicate) {\n  return function () {\n    return !predicate.apply(this, arguments);\n  };\n} // Returns a function that is the composition of a list of functions, each\n// consuming the return value of the function that follows.\n\nexport function compose() {\n  var args = arguments;\n  var start = args.length - 1;\n  return function () {\n    var i = start;\n    var result = args[start].apply(this, arguments);\n\n    while (i--) {\n      result = args[i].call(this, result);\n    }\n\n    return result;\n  };\n} // Returns a function that will only be executed on and after the Nth call.\n\nexport function after(times, func) {\n  return function () {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n} // Returns a function that will only be executed up to (but not including) the Nth call.\n\nexport function before(times, func) {\n  var memo;\n  return function () {\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n\n    if (times <= 1) func = null;\n    return memo;\n  };\n} // Returns a function that will be executed at most one time, no matter how\n// often you call it. Useful for lazy initialization.\n\nexport var once = partial(before, 2); // Object Functions\n// ----------------\n// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n\nvar hasEnumBug = !{\n  toString: null\n}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\nfunction collectNonEnumProps(obj, _keys) {\n  var nonEnumIdx = nonEnumerableProps.length;\n  var constructor = obj.constructor;\n  var proto = isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.\n\n  var prop = 'constructor';\n  if (_has(obj, prop) && !contains(_keys, prop)) _keys.push(prop);\n\n  while (nonEnumIdx--) {\n    prop = nonEnumerableProps[nonEnumIdx];\n\n    if (prop in obj && obj[prop] !== proto[prop] && !contains(_keys, prop)) {\n      _keys.push(prop);\n    }\n  }\n} // Retrieve the names of an object's own properties.\n// Delegates to **ECMAScript 5**'s native `Object.keys`.\n\n\nexport function keys(obj) {\n  if (!isObject(obj)) return [];\n  if (nativeKeys) return nativeKeys(obj);\n  var _keys = [];\n\n  for (var key in obj) {\n    if (_has(obj, key)) _keys.push(key);\n  } // Ahem, IE < 9.\n\n\n  if (hasEnumBug) collectNonEnumProps(obj, _keys);\n  return _keys;\n} // Retrieve all the property names of an object.\n\nexport function allKeys(obj) {\n  if (!isObject(obj)) return [];\n  var _keys = [];\n\n  for (var key in obj) {\n    _keys.push(key);\n  } // Ahem, IE < 9.\n\n\n  if (hasEnumBug) collectNonEnumProps(obj, _keys);\n  return _keys;\n} // Retrieve the values of an object's properties.\n\nexport function values(obj) {\n  var _keys = keys(obj);\n\n  var length = _keys.length;\n  var values = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    values[i] = obj[_keys[i]];\n  }\n\n  return values;\n} // Returns the results of applying the iteratee to each element of the object.\n// In contrast to map it returns an object.\n\nexport function mapObject(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n\n  var _keys = keys(obj),\n      length = _keys.length,\n      results = {};\n\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  }\n\n  return results;\n} // Convert an object into a list of `[key, value]` pairs.\n// The opposite of object.\n\nexport function pairs(obj) {\n  var _keys = keys(obj);\n\n  var length = _keys.length;\n  var pairs = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    pairs[i] = [_keys[i], obj[_keys[i]]];\n  }\n\n  return pairs;\n} // Invert the keys and values of an object. The values must be serializable.\n\nexport function invert(obj) {\n  var result = {};\n\n  var _keys = keys(obj);\n\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    result[obj[_keys[i]]] = _keys[i];\n  }\n\n  return result;\n} // Return a sorted list of the function names available on the object.\n\nexport function functions(obj) {\n  var names = [];\n\n  for (var key in obj) {\n    if (isFunction(obj[key])) names.push(key);\n  }\n\n  return names.sort();\n}\nexport { functions as methods }; // An internal function for creating assigner functions.\n\nfunction createAssigner(keysFunc, defaults) {\n  return function (obj) {\n    var length = arguments.length;\n    if (defaults) obj = Object(obj);\n    if (length < 2 || obj == null) return obj;\n\n    for (var index = 1; index < length; index++) {\n      var source = arguments[index],\n          _keys = keysFunc(source),\n          l = _keys.length;\n\n      for (var i = 0; i < l; i++) {\n        var key = _keys[i];\n        if (!defaults || obj[key] === void 0) obj[key] = source[key];\n      }\n    }\n\n    return obj;\n  };\n} // Extend a given object with all the properties in passed-in object(s).\n\n\nexport var extend = createAssigner(allKeys); // Assigns a given object with all the own properties in the passed-in object(s).\n// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\nexport var extendOwn = createAssigner(keys);\nexport { extendOwn as assign }; // Returns the first key on an object that passes a predicate test.\n\nexport function findKey(obj, predicate, context) {\n  predicate = cb(predicate, context);\n\n  var _keys = keys(obj),\n      key;\n\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    key = _keys[i];\n    if (predicate(obj[key], key, obj)) return key;\n  }\n} // Internal pick helper function to determine if `obj` has key `key`.\n\nfunction keyInObj(value, key, obj) {\n  return key in obj;\n} // Return a copy of the object only containing the whitelisted properties.\n\n\nexport var pick = restArguments(function (obj, _keys) {\n  var result = {},\n      iteratee = _keys[0];\n  if (obj == null) return result;\n\n  if (isFunction(iteratee)) {\n    if (_keys.length > 1) iteratee = optimizeCb(iteratee, _keys[1]);\n    _keys = allKeys(obj);\n  } else {\n    iteratee = keyInObj;\n    _keys = _flatten(_keys, false, false);\n    obj = Object(obj);\n  }\n\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    var key = _keys[i];\n    var value = obj[key];\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n\n  return result;\n}); // Return a copy of the object without the blacklisted properties.\n\nexport var omit = restArguments(function (obj, _keys) {\n  var iteratee = _keys[0],\n      context;\n\n  if (isFunction(iteratee)) {\n    iteratee = negate(iteratee);\n    if (_keys.length > 1) context = _keys[1];\n  } else {\n    _keys = map(_flatten(_keys, false, false), String);\n\n    iteratee = function iteratee(value, key) {\n      return !contains(_keys, key);\n    };\n  }\n\n  return pick(obj, iteratee, context);\n}); // Fill in a given object with default properties.\n\nexport var defaults = createAssigner(allKeys, true); // Creates an object that inherits from the given prototype object.\n// If additional properties are provided then they will be added to the\n// created object.\n\nexport function create(prototype, props) {\n  var result = baseCreate(prototype);\n  if (props) extendOwn(result, props);\n  return result;\n} // Create a (shallow-cloned) duplicate of an object.\n\nexport function clone(obj) {\n  if (!isObject(obj)) return obj;\n  return isArray(obj) ? obj.slice() : extend({}, obj);\n} // Invokes interceptor with the obj, and then returns obj.\n// The primary purpose of this method is to \"tap into\" a method chain, in\n// order to perform operations on intermediate results within the chain.\n\nexport function tap(obj, interceptor) {\n  interceptor(obj);\n  return obj;\n} // Returns whether an object has a given set of `key:value` pairs.\n\nexport function isMatch(object, attrs) {\n  var _keys = keys(attrs),\n      length = _keys.length;\n\n  if (object == null) return !length;\n  var obj = Object(object);\n\n  for (var i = 0; i < length; i++) {\n    var key = _keys[i];\n    if (attrs[key] !== obj[key] || !(key in obj)) return false;\n  }\n\n  return true;\n} // Internal recursive comparison function for `isEqual`.\n\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n  if (a !== a) return b !== b; // Exhaust primitive checks\n\n  var type = typeof a;\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n} // Internal recursive comparison function for `isEqual`.\n\n\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _) a = a._wrapped;\n  if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.\n\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n\n  switch (className) {\n    // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n    case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n  }\n\n  var areArrays = className === '[object Array]';\n\n  if (!areArrays) {\n    if (typeof a != 'object' || typeof b != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n\n    var aCtor = a.constructor,\n        bCtor = b.constructor;\n\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n      return false;\n    }\n  } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n\n\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  } // Add the first object to the stack of traversed objects.\n\n\n  aStack.push(a);\n  bStack.push(b); // Recursively compare objects and arrays.\n\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a),\n        key;\n\n    length = _keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n    if (keys(b).length !== length) return false;\n\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(_has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  } // Remove the first object from the stack of traversed objects.\n\n\n  aStack.pop();\n  bStack.pop();\n  return true;\n} // Perform a deep comparison to check if two objects are equal.\n\n\nexport function isEqual(a, b) {\n  return eq(a, b);\n} // Is a given array, string, or object empty?\n// An \"empty\" object has no enumerable own-properties.\n\nexport function isEmpty(obj) {\n  if (obj == null) return true;\n  if (isArrayLike(obj) && (isArray(obj) || isString(obj) || isArguments(obj))) return obj.length === 0;\n  return keys(obj).length === 0;\n} // Is a given value a DOM element?\n\nexport function isElement(obj) {\n  return !!(obj && obj.nodeType === 1);\n} // Internal function for creating a toString-based type tester.\n\nfunction tagTester(name) {\n  return function (obj) {\n    return toString.call(obj) === '[object ' + name + ']';\n  };\n} // Is a given value an array?\n// Delegates to ECMA5's native Array.isArray\n\n\nexport var isArray = nativeIsArray || tagTester('Array'); // Is a given variable an object?\n\nexport function isObject(obj) {\n  var type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n} // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n\nexport var isArguments = tagTester('Arguments');\nexport var isFunction = tagTester('Function');\nexport var isString = tagTester('String');\nexport var isNumber = tagTester('Number');\nexport var isDate = tagTester('Date');\nexport var isRegExp = tagTester('RegExp');\nexport var isError = tagTester('Error');\nexport var isSymbol = tagTester('Symbol');\nexport var isMap = tagTester('Map');\nexport var isWeakMap = tagTester('WeakMap');\nexport var isSet = tagTester('Set');\nexport var isWeakSet = tagTester('WeakSet'); // Define a fallback version of the method in browsers (ahem, IE < 9), where\n// there isn't any inspectable \"Arguments\" type.\n\n(function () {\n  if (!isArguments(arguments)) {\n    isArguments = function isArguments(obj) {\n      return _has(obj, 'callee');\n    };\n  }\n})(); // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n// IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n\n\nvar nodelist = root.document && root.document.childNodes;\n\nif (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n  isFunction = function isFunction(obj) {\n    return typeof obj == 'function' || false;\n  };\n} // Is a given object a finite number?\n\n\nexport function isFinite(obj) {\n  return !isSymbol(obj) && _isFinite(obj) && !_isNaN(parseFloat(obj));\n} // Is the given value `NaN`?\n\nexport function isNaN(obj) {\n  return isNumber(obj) && _isNaN(obj);\n} // Is a given value a boolean?\n\nexport function isBoolean(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n} // Is a given value equal to null?\n\nexport function isNull(obj) {\n  return obj === null;\n} // Is a given variable undefined?\n\nexport function isUndefined(obj) {\n  return obj === void 0;\n} // Shortcut function for checking if an object has a given property directly\n// on itself (in other words, not on a prototype).\n\nexport function has(obj, path) {\n  if (!isArray(path)) {\n    return _has(obj, path);\n  }\n\n  var length = path.length;\n\n  for (var i = 0; i < length; i++) {\n    var key = path[i];\n\n    if (obj == null || !hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n\n    obj = obj[key];\n  }\n\n  return !!length;\n} // Utility Functions\n// -----------------\n// Keep the identity function around for default iteratees.\n\nexport function identity(value) {\n  return value;\n} // Predicate-generating functions. Often useful outside of Underscore.\n\nexport function constant(value) {\n  return function () {\n    return value;\n  };\n}\nexport function noop() {} // Creates a function that, when passed an object, will traverse that object’s\n// properties down the given `path`, specified as an array of keys or indexes.\n\nexport function property(path) {\n  if (!isArray(path)) {\n    return shallowProperty(path);\n  }\n\n  return function (obj) {\n    return deepGet(obj, path);\n  };\n} // Generates a function for a given object that returns a given property.\n\nexport function propertyOf(obj) {\n  if (obj == null) {\n    return function () {};\n  }\n\n  return function (path) {\n    return !isArray(path) ? obj[path] : deepGet(obj, path);\n  };\n} // Returns a predicate for checking whether an object has a given set of\n// `key:value` pairs.\n\nexport function matcher(attrs) {\n  attrs = extendOwn({}, attrs);\n  return function (obj) {\n    return isMatch(obj, attrs);\n  };\n}\nexport { matcher as matches }; // Run a function **n** times.\n\nexport function times(n, iteratee, context) {\n  var accum = Array(Math.max(0, n));\n  iteratee = optimizeCb(iteratee, context, 1);\n\n  for (var i = 0; i < n; i++) {\n    accum[i] = iteratee(i);\n  }\n\n  return accum;\n} // Return a random integer between min and max (inclusive).\n\nexport function random(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  return min + Math.floor(Math.random() * (max - min + 1));\n} // A (possibly faster) way to get the current timestamp as an integer.\n\nexport var now = Date.now || function () {\n  return new Date().getTime();\n}; // List of HTML entities for escaping.\n\nvar escapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\nvar unescapeMap = invert(escapeMap); // Functions for escaping and unescaping strings to/from HTML interpolation.\n\nfunction createEscaper(map) {\n  var escaper = function escaper(match) {\n    return map[match];\n  }; // Regexes for identifying a key that needs to be escaped.\n\n\n  var source = '(?:' + keys(map).join('|') + ')';\n  var testRegexp = RegExp(source);\n  var replaceRegexp = RegExp(source, 'g');\n  return function (string) {\n    string = string == null ? '' : '' + string;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n  };\n}\n\nexport var escape = createEscaper(escapeMap);\nexport var unescape = createEscaper(unescapeMap); // Traverses the children of `obj` along `path`. If a child is a function, it\n// is invoked with its parent as context. Returns the value of the final\n// child, or `fallback` if any child is undefined.\n\nexport function result(obj, path, fallback) {\n  if (!isArray(path)) path = [path];\n  var length = path.length;\n\n  if (!length) {\n    return isFunction(fallback) ? fallback.call(obj) : fallback;\n  }\n\n  for (var i = 0; i < length; i++) {\n    var prop = obj == null ? void 0 : obj[path[i]];\n\n    if (prop === void 0) {\n      prop = fallback;\n      i = length; // Ensure we don't continue iterating.\n    }\n\n    obj = isFunction(prop) ? prop.call(obj) : prop;\n  }\n\n  return obj;\n} // Generate a unique integer id (unique within the entire client session).\n// Useful for temporary DOM ids.\n\nvar idCounter = 0;\nexport function uniqueId(prefix) {\n  var id = ++idCounter + '';\n  return prefix ? prefix + id : id;\n} // By default, Underscore uses ERB-style template delimiters, change the\n// following template settings to use alternative delimiters.\n\nexport var templateSettings = _.templateSettings = {\n  evaluate: /<%([\\s\\S]+?)%>/g,\n  interpolate: /<%=([\\s\\S]+?)%>/g,\n  escape: /<%-([\\s\\S]+?)%>/g\n}; // When customizing `templateSettings`, if you don't want to define an\n// interpolation, evaluation or escaping regex, we need one that is\n// guaranteed not to match.\n\nvar noMatch = /(.)^/; // Certain characters need to be escaped so that they can be put into a\n// string literal.\n\nvar escapes = {\n  \"'\": \"'\",\n  '\\\\': '\\\\',\n  '\\r': 'r',\n  '\\n': 'n',\n  \"\\u2028\": 'u2028',\n  \"\\u2029\": 'u2029'\n};\nvar escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\nvar escapeChar = function escapeChar(match) {\n  return '\\\\' + escapes[match];\n}; // JavaScript micro-templating, similar to John Resig's implementation.\n// Underscore templating handles arbitrary delimiters, preserves whitespace,\n// and correctly escapes quotes within interpolated code.\n// NB: `oldSettings` only exists for backwards compatibility.\n\n\nexport function template(text, settings, oldSettings) {\n  if (!settings && oldSettings) settings = oldSettings;\n  settings = defaults({}, settings, _.templateSettings); // Combine delimiters into one regular expression via alternation.\n\n  var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g'); // Compile the template source, escaping string literals appropriately.\n\n  var index = 0;\n  var source = \"__p+='\";\n  text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n    index = offset + match.length;\n\n    if (escape) {\n      source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n    } else if (interpolate) {\n      source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n    } else if (evaluate) {\n      source += \"';\\n\" + evaluate + \"\\n__p+='\";\n    } // Adobe VMs need the match returned to produce the correct offset.\n\n\n    return match;\n  });\n  source += \"';\\n\"; // If a variable is not specified, place data values in local scope.\n\n  if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n  source = \"var __t,__p='',__j=Array.prototype.join,\" + \"print=function(){__p+=__j.call(arguments,'');};\\n\" + source + 'return __p;\\n';\n  var render;\n\n  try {\n    render = new Function(settings.variable || 'obj', '_', source);\n  } catch (e) {\n    e.source = source;\n    throw e;\n  }\n\n  var template = function template(data) {\n    return render.call(this, data, _);\n  }; // Provide the compiled source as a convenience for precompilation.\n\n\n  var argument = settings.variable || 'obj';\n  template.source = 'function(' + argument + '){\\n' + source + '}';\n  return template;\n} // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n\nexport function chain(obj) {\n  var instance = _(obj);\n\n  instance._chain = true;\n  return instance;\n} // OOP\n// ---------------\n// If Underscore is called as a function, it returns a wrapped object that\n// can be used OO-style. This wrapper holds altered versions of all the\n// underscore functions. Wrapped objects may be chained.\n// Helper function to continue chaining intermediate results.\n\nfunction chainResult(instance, obj) {\n  return instance._chain ? _(obj).chain() : obj;\n} // Add your own custom functions to the Underscore object.\n\n\nexport function mixin(obj) {\n  each(functions(obj), function (name) {\n    var func = _[name] = obj[name];\n\n    _.prototype[name] = function () {\n      var args = [this._wrapped];\n      push.apply(args, arguments);\n      return chainResult(this, func.apply(_, args));\n    };\n  });\n  return _;\n} // Add all mutator Array functions to the wrapper.\n\neach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n  var method = ArrayProto[name];\n\n  _.prototype[name] = function () {\n    var obj = this._wrapped;\n    method.apply(obj, arguments);\n    if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n    return chainResult(this, obj);\n  };\n}); // Add all accessor Array functions to the wrapper.\n\neach(['concat', 'join', 'slice'], function (name) {\n  var method = ArrayProto[name];\n\n  _.prototype[name] = function () {\n    return chainResult(this, method.apply(this._wrapped, arguments));\n  };\n}); // Extracts the result from a wrapped and chained object.\n\n_.prototype.value = function () {\n  return this._wrapped;\n}; // Provide unwrapping proxy for some methods used in engine operations\n// such as arithmetic and JSON stringification.\n\n\n_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n_.prototype.toString = function () {\n  return String(this._wrapped);\n};","map":null,"metadata":{},"sourceType":"module"}