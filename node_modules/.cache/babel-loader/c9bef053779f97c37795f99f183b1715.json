{"ast":null,"code":"import { timeoutPromise } from './timeoutPromise';\n/**\n * The number of milliseconds before deciding that we need retry a fetch request.\n *\n * @type {number}\n */\n\nvar RETRY_TIMEOUT = 3000;\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @param {?boolean} retry - Whether the request will be retried after short timeout.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\n\nexport function doGetJSON(url, retry) {\n  var fetchPromise = fetch(url).then(function (response) {\n    var jsonify = response.json();\n\n    if (response.ok) {\n      return jsonify;\n    }\n\n    return jsonify.then(function (result) {\n      return Promise.reject(result);\n    });\n  });\n\n  if (retry) {\n    return timeoutPromise(fetchPromise, RETRY_TIMEOUT).catch(function (response) {\n      if (response.status >= 400 && response.status < 500) {\n        return Promise.reject(response);\n      }\n\n      return timeoutPromise(fetchPromise, RETRY_TIMEOUT);\n    });\n  }\n\n  return fetchPromise;\n}","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/features/base/util/httpUtils.js"],"names":["timeoutPromise","RETRY_TIMEOUT","doGetJSON","url","retry","fetchPromise","fetch","then","response","jsonify","json","ok","result","Promise","reject","catch","status"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AAEA;;;;;;AAKA,IAAMC,aAAa,GAAG,IAAtB;AAEA;;;;;;;;;;AASA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;AAClC,MAAMC,YAAY,GAAGC,KAAK,CAACH,GAAD,CAAL,CAChBI,IADgB,CACX,UAAAC,QAAQ,EAAI;AACd,QAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAT,EAAhB;;AAEA,QAAIF,QAAQ,CAACG,EAAb,EAAiB;AACb,aAAOF,OAAP;AACH;;AAED,WAAOA,OAAO,CACTF,IADE,CACG,UAAAK,MAAM;AAAA,aAAIC,OAAO,CAACC,MAAR,CAAeF,MAAf,CAAJ;AAAA,KADT,CAAP;AAEH,GAVgB,CAArB;;AAYA,MAAIR,KAAJ,EAAW;AACP,WAAOJ,cAAc,CAACK,YAAD,EAAeJ,aAAf,CAAd,CACFc,KADE,CACI,UAAAP,QAAQ,EAAI;AACf,UAAIA,QAAQ,CAACQ,MAAT,IAAmB,GAAnB,IAA0BR,QAAQ,CAACQ,MAAT,GAAkB,GAAhD,EAAqD;AACjD,eAAOH,OAAO,CAACC,MAAR,CAAeN,QAAf,CAAP;AACH;;AAED,aAAOR,cAAc,CAACK,YAAD,EAAeJ,aAAf,CAArB;AACH,KAPE,CAAP;AAQH;;AAED,SAAOI,YAAP;AACH","sourcesContent":["import { timeoutPromise } from './timeoutPromise';\n\n/**\n * The number of milliseconds before deciding that we need retry a fetch request.\n *\n * @type {number}\n */\nconst RETRY_TIMEOUT = 3000;\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @param {?boolean} retry - Whether the request will be retried after short timeout.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url, retry) {\n    const fetchPromise = fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        });\n\n    if (retry) {\n        return timeoutPromise(fetchPromise, RETRY_TIMEOUT)\n            .catch(response => {\n                if (response.status >= 400 && response.status < 500) {\n                    return Promise.reject(response);\n                }\n\n                return timeoutPromise(fetchPromise, RETRY_TIMEOUT);\n            });\n    }\n\n    return fetchPromise;\n}\n"]},"metadata":{},"sourceType":"module"}