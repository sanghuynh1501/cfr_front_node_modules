{"ast":null,"code":"import _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/tabs/ChatComponents/MessagesBox.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { returnError } from '@utils';\nimport { client, Q_MESSAGES, M_READ_MESSAGE, S_ON_MESSAGE } from '@graphql';\nimport Left from './Left';\nimport Right from './Right';\nvar MessagesBox = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(MessagesBox, _React$PureComponent);\n\n  var _super = _createSuper(MessagesBox);\n\n  function MessagesBox() {\n    var _this;\n\n    _classCallCheck(this, MessagesBox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      cursor: 0,\n      messages: []\n    };\n    _this.subscriber = null;\n\n    _this.queryMessages = function () {\n      return client.query({\n        query: Q_MESSAGES,\n        variables: {\n          conferenceId: _this.props.conferenceId,\n          first: 100 + _this.state.cursor,\n          offset: _this.state.cursor,\n          withUser: _this.props.withUser._id\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref2) {\n        var messages = _ref2.data.messages;\n\n        _this.setState({\n          messages: _this.getMessageToday(messages)\n        });\n      }).catch(function (error) {\n        return returnError('messages', {\n          error: error,\n          errorMessage: 'An error occurred while loading messages'\n        });\n      });\n    };\n\n    _this.mutateReadMessage = function (messageId) {\n      return client.mutate({\n        mutation: M_READ_MESSAGE,\n        variables: {\n          messageId: messageId\n        }\n      }).then(function (_ref3) {\n        var readMessage = _ref3.data.readMessage;\n        if (!readMessage) console.log('Failed to read message');\n      }).catch(function () {});\n    };\n\n    _this.scrollToBottom = function () {\n      _this.messagesEnd.scrollIntoView({\n        behavior: 'smooth'\n      });\n    };\n\n    _this.getMessageToday = function (message) {\n      var date = new Date();\n      var timestamp = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n      return message.filter(function (item) {\n        return item.sentAt >= timestamp;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MessagesBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // QUERY:\n      this.queryMessages();\n      this.scrollToBottom(); // PUBSUB:\n\n      this.subscriber = client.subscribe({\n        query: S_ON_MESSAGE,\n        variables: {\n          conferenceId: this.props.conferenceId,\n          withUser: this.props.withUser._id\n        },\n        fetchPolicy: 'network-only'\n      }).subscribe(function (_ref4) {\n        var onMessage = _ref4.data.onMessage;\n\n        _this2.setState(function (prevState) {\n          return {\n            messages: [].concat(_toConsumableArray(prevState.messages), [onMessage])\n          };\n        }, function () {\n          if (onMessage.sender._id !== _this2.props.conferenceState.myUserId) _this2.mutateReadMessage(onMessage.messageId);\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // PUBSUB:\n      if (this.subscriber) {\n        this.subscriber.unsubscribe();\n        this.subscriber = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.messages.map(function (item, index) {\n        return item.sender._id === _this3.props.conferenceState.myUserId ? /*#__PURE__*/React.createElement(Right, {\n          key: index,\n          data: item,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }\n        }) : /*#__PURE__*/React.createElement(Left, {\n          key: index,\n          data: item,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }\n        });\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          float: 'left',\n          clear: 'both'\n        },\n        ref: function ref(el) {\n          _this3.messagesEnd = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return MessagesBox;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default MessagesBox;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/tabs/ChatComponents/MessagesBox.jsx"],"names":["React","inject","observer","returnError","client","Q_MESSAGES","M_READ_MESSAGE","S_ON_MESSAGE","Left","Right","MessagesBox","stores","state","cursor","messages","subscriber","queryMessages","query","variables","conferenceId","props","first","offset","withUser","_id","fetchPolicy","then","data","setState","getMessageToday","catch","error","errorMessage","mutateReadMessage","messageId","mutate","mutation","readMessage","console","log","scrollToBottom","messagesEnd","scrollIntoView","behavior","message","date","Date","timestamp","getFullYear","getMonth","getDate","getTime","filter","item","sentAt","subscribe","onMessage","prevState","sender","conferenceState","myUserId","unsubscribe","map","index","float","clear","el","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { returnError } from '@utils'\nimport { client, Q_MESSAGES, M_READ_MESSAGE, S_ON_MESSAGE } from '@graphql'\n\nimport Left from './Left'\nimport Right from './Right'\n\n@inject(({ stores }) => stores)\n@observer\nclass MessagesBox extends React.PureComponent {\n  state = { cursor: 0, messages: [] }\n\n  // PUBSUB:\n  subscriber = null\n\n  queryMessages = () =>\n    client\n      .query({\n        query: Q_MESSAGES,\n        variables: {\n          conferenceId: this.props.conferenceId,\n          first: 100 + this.state.cursor,\n          offset: this.state.cursor,\n          withUser: this.props.withUser._id\n        },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { messages } }) => {\n        this.setState({ messages: this.getMessageToday(messages) })\n      })\n      .catch(error =>\n        returnError('messages', {\n          error,\n          errorMessage: 'An error occurred while loading messages'\n        })\n      )\n\n  mutateReadMessage = messageId =>\n    client\n      .mutate({\n        mutation: M_READ_MESSAGE,\n        variables: { messageId }\n      })\n      .then(({ data: { readMessage } }) => {\n        if (!readMessage) console.log('Failed to read message')\n      })\n      .catch(() => {})\n\n  componentDidMount() {\n    // QUERY:\n    this.queryMessages()\n\n    this.scrollToBottom()\n\n    // PUBSUB:\n    this.subscriber = client\n      .subscribe({\n        query: S_ON_MESSAGE,\n        variables: {\n          conferenceId: this.props.conferenceId,\n          withUser: this.props.withUser._id\n        },\n        fetchPolicy: 'network-only'\n      })\n      .subscribe(({ data: { onMessage } }) => {\n        this.setState(\n          prevState => ({\n            messages: [...prevState.messages, onMessage]\n          }),\n          () => {\n            if (onMessage.sender._id !== this.props.conferenceState.myUserId)\n              this.mutateReadMessage(onMessage.messageId)\n          }\n        )\n      })\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  componentWillUnmount() {\n    // PUBSUB:\n    if (this.subscriber) {\n      this.subscriber.unsubscribe()\n      this.subscriber = null\n    }\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  getMessageToday = (message) => {\n    const date = new Date()\n    const timestamp = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime()\n    return message.filter(item => item.sentAt >= timestamp )\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.messages.map((item, index) => {\n          return item.sender._id === this.props.conferenceState.myUserId ? (\n            <Right key={index} data={item} />\n          ) : (\n            <Left key={index} data={item} />\n          )\n        })}\n        <div\n          style={{ float: 'left', clear: 'both' }}\n          ref={el => {\n            this.messagesEnd = el\n          }}\n        />\n      </>\n    )\n  }\n}\n\nexport default MessagesBox\n"]},"metadata":{},"sourceType":"module"}