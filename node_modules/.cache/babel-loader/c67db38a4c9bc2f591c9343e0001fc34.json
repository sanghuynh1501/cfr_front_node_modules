{"ast":null,"code":"import { MEDIA_DEVICE_TYPES } from '../constants';\nimport { JitsiMeetJS } from '../core'; // *_: Audio Input\n// *_: Audio Output\n\n/**\n * Get device id of the audio output device which is currently in use. Empty string stands for default device.\n * @returns - Audio ouput device id\n */\n\nexport function getAudioOutputDeviceId() {\n  return JitsiMeetJS.mediaDevices.getAudioOutputDevice();\n}\n/**\n * Set device id of the audio output device which is currently in use. Empty string stands for default device.\n * @param {string} newDeviceId - New audio output device id.\n */\n\nexport function setAudioOutputDeviceId() {\n  var newDeviceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  return JitsiMeetJS.mediaDevices.setAudioOutputDevice(newDeviceId);\n}\n/**\n * Determines if currently selected audio output device should be changed after\n * list of available devices has been changed.\n * @param {MediaDeviceInfo[]} newDevices\n * @returns - ID of new audio output device to use, undefined if audio output device should not be changed.\n */\n\nexport function getNewAudioOutputDevice(newDevices, preferredAudioOutputDeviceId) {\n  // *: Can not change\n  if (!JitsiMeetJS.mediaDevices.isDeviceChangeAvailable('output')) return;\n  var selectedAudioOutputDeviceId = getAudioOutputDeviceId();\n  var availableAudioOutputDevices = newDevices.filter(function (d) {\n    return d.kind === MEDIA_DEVICE_TYPES.AUDIO_OUTPUT;\n  }); // Switch to 'default' audio output device if we don't have the selected one available anymore.\n\n  if (selectedAudioOutputDeviceId !== 'default' && !availableAudioOutputDevices.find(function (d) {\n    return d.deviceId === selectedAudioOutputDeviceId;\n  })) {\n    return 'default';\n  } // if the preferred one is not the selected and is available in the new devices\n  // we want to use it as it was just added\n\n\n  if (preferredAudioOutputDeviceId && preferredAudioOutputDeviceId !== selectedAudioOutputDeviceId && availableAudioOutputDevices.find(function (d) {\n    return d.deviceId === preferredAudioOutputDeviceId;\n  })) {\n    return preferredAudioOutputDeviceId;\n  }\n}","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/devices/audio.ts"],"names":["MEDIA_DEVICE_TYPES","JitsiMeetJS","getAudioOutputDeviceId","mediaDevices","getAudioOutputDevice","setAudioOutputDeviceId","newDeviceId","setAudioOutputDevice","getNewAudioOutputDevice","newDevices","preferredAudioOutputDeviceId","isDeviceChangeAvailable","selectedAudioOutputDeviceId","availableAudioOutputDevices","filter","d","kind","AUDIO_OUTPUT","find","deviceId"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,cAAnC;AACA,SAASC,WAAT,QAA4B,SAA5B,C,CAEA;AAEA;;AAEA;;;;;AAIA,OAAO,SAASC,sBAAT,GAA0C;AAC/C,SAAOD,WAAW,CAACE,YAAZ,CAAyBC,oBAAzB,EAAP;AACD;AAED;;;;;AAIA,OAAO,SAASC,sBAAT,GAAwE;AAAA,MAAxCC,WAAwC,uEAA1B,SAA0B;AAC7E,SAAOL,WAAW,CAACE,YAAZ,CAAyBI,oBAAzB,CAA8CD,WAA9C,CAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASE,uBAAT,CAAiCC,UAAjC,EAA6CC,4BAA7C,EAA+F;AACpG;AACA,MAAI,CAACT,WAAW,CAACE,YAAZ,CAAyBQ,uBAAzB,CAAiD,QAAjD,CAAL,EAAiE;AAEjE,MAAMC,2BAA2B,GAAGV,sBAAsB,EAA1D;AACA,MAAMW,2BAA2B,GAAGJ,UAAU,CAACK,MAAX,CAAkB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,KAAWhB,kBAAkB,CAACiB,YAAlC;AAAA,GAAnB,CAApC,CALoG,CAOpG;;AACA,MACEL,2BAA2B,KAAK,SAAhC,IACA,CAACC,2BAA2B,CAACK,IAA5B,CAAiC,UAAAH,CAAC;AAAA,WAAIA,CAAC,CAACI,QAAF,KAAeP,2BAAnB;AAAA,GAAlC,CAFH,EAGE;AACA,WAAO,SAAP;AACD,GAbmG,CAepG;AACA;;;AACA,MACEF,4BAA4B,IAC5BA,4BAA4B,KAAKE,2BADjC,IAEAC,2BAA2B,CAACK,IAA5B,CAAiC,UAAAH,CAAC;AAAA,WAAIA,CAAC,CAACI,QAAF,KAAeT,4BAAnB;AAAA,GAAlC,CAHF,EAIE;AACA,WAAOA,4BAAP;AACD;AACF","sourcesContent":["import { MEDIA_DEVICE_TYPES } from '../constants'\nimport { JitsiMeetJS } from '../core'\n\n// *_: Audio Input\n\n// *_: Audio Output\n\n/**\n * Get device id of the audio output device which is currently in use. Empty string stands for default device.\n * @returns - Audio ouput device id\n */\nexport function getAudioOutputDeviceId(): string {\n  return JitsiMeetJS.mediaDevices.getAudioOutputDevice()\n}\n\n/**\n * Set device id of the audio output device which is currently in use. Empty string stands for default device.\n * @param {string} newDeviceId - New audio output device id.\n */\nexport function setAudioOutputDeviceId(newDeviceId = 'default'): Promise<void> {\n  return JitsiMeetJS.mediaDevices.setAudioOutputDevice(newDeviceId)\n}\n\n/**\n * Determines if currently selected audio output device should be changed after\n * list of available devices has been changed.\n * @param {MediaDeviceInfo[]} newDevices\n * @returns - ID of new audio output device to use, undefined if audio output device should not be changed.\n */\nexport function getNewAudioOutputDevice(newDevices, preferredAudioOutputDeviceId): string | undefined {\n  // *: Can not change\n  if (!JitsiMeetJS.mediaDevices.isDeviceChangeAvailable('output')) return\n\n  const selectedAudioOutputDeviceId = getAudioOutputDeviceId()\n  const availableAudioOutputDevices = newDevices.filter(d => d.kind === MEDIA_DEVICE_TYPES.AUDIO_OUTPUT)\n\n  // Switch to 'default' audio output device if we don't have the selected one available anymore.\n  if (\n    selectedAudioOutputDeviceId !== 'default' &&\n    !availableAudioOutputDevices.find(d => d.deviceId === selectedAudioOutputDeviceId)\n  ) {\n    return 'default'\n  }\n\n  // if the preferred one is not the selected and is available in the new devices\n  // we want to use it as it was just added\n  if (\n    preferredAudioOutputDeviceId &&\n    preferredAudioOutputDeviceId !== selectedAudioOutputDeviceId &&\n    availableAudioOutputDevices.find(d => d.deviceId === preferredAudioOutputDeviceId)\n  ) {\n    return preferredAudioOutputDeviceId\n  }\n}\n"]},"metadata":{},"sourceType":"module"}