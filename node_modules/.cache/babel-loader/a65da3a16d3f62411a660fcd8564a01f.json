{"ast":null,"code":"import _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/TimerBar.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './TimerBar.less';\nimport { client, Q_HAS_TIMER, S_ON_TIMER, M_RESET_TIMER, M_COMPLETE_TIMER } from '@graphql';\nimport { newNotification } from '@utils';\nimport viewWhite from \"../../misc/images/view_white.svg\";\nimport hideWhite from \"../../misc/images/hide_white.svg\";\nimport ModalTimer from './modals/ModalTimer';\nvar TimerBar = (_dec = inject('stores'), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(TimerBar, _React$Component);\n\n  var _super = _createSuper(TimerBar);\n\n  function TimerBar() {\n    var _this;\n\n    _classCallCheck(this, TimerBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.subscriber = null;\n    _this.state = {\n      visibleTimer: false,\n      visibleModal: false,\n      intervalId: null,\n      timerInfo: null,\n      data: {\n        endTime: '01:00',\n        currentTime: '01:00',\n        secondsTime: 0,\n        hideTime: false,\n        isPause: false,\n        isComplete: false\n      }\n    };\n\n    _this.queryTimer = function () {\n      client.query({\n        query: Q_HAS_TIMER,\n        variables: {\n          conferenceId: _this.props.conferenceId\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref) {\n        var hasTimer = _ref.data.hasTimer;\n\n        if (hasTimer) {\n          return _this.setState(function (_preState) {\n            return {\n              visibleTimer: true,\n              timerInfo: hasTimer,\n              data: _objectSpread({}, _preState.data, {\n                endTime: _this.convertSecondsToTime(hasTimer.amountOfTime),\n                currentTime: _this.convertSecondsToTime(hasTimer.amountOfTime + hasTimer.startAt - Date.now()),\n                secondsTime: hasTimer.amountOfTime + hasTimer.startAt - Date.now()\n              })\n            };\n          });\n        } else {\n          clearInterval(_this.state.intervalId);\n          return _this.setState(function (_preState) {\n            return {\n              visibleTimer: false\n            };\n          });\n        }\n      }).catch(function () {\n        return newNotification('Cannot get polling data!', 'danger');\n      });\n    };\n\n    _this.handleStartTimer = function () {\n      clearInterval(_this.state.intervalId);\n      var intervalId = setInterval(_this.timer, 1000);\n\n      _this.setState(function (_preState) {\n        return {\n          intervalId: intervalId\n        };\n      });\n    };\n\n    _this.handlePauseStart = function (value) {\n      if (!value) {\n        clearInterval(_this.state.intervalId);\n\n        _this.setState(function (preState) {\n          return _objectSpread({}, preState, {\n            data: _objectSpread({}, preState.data, {\n              isPause: true\n            })\n          });\n        });\n      } else {\n        _this.handleStartTimer();\n      }\n    };\n\n    _this.handleReset = function () {\n      // MUTATION: RESET TIMER\n      client.mutate({\n        mutation: M_RESET_TIMER,\n        variables: {\n          timerId: _this.state.timerInfo._id\n        }\n      }).catch(function (error) {\n        return newNotification('Please try again later!', 'danger');\n      });\n    };\n\n    _this.handleComplete = function () {\n      // MUTATION: COMPLETE TIMER\n      client.mutate({\n        mutation: M_COMPLETE_TIMER,\n        variables: {\n          timerId: _this.state.timerInfo._id\n        }\n      }).catch(function (error) {\n        return newNotification('Please try again later!', 'danger');\n      });\n    };\n\n    _this.handleHideShow = function (value) {\n      _this.setState(function (prevState) {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            hideTime: !value\n          })\n        };\n      });\n    };\n\n    _this.hanldeVisible = function (value) {\n      _this.setState(function (preState) {\n        return _objectSpread({}, preState, {\n          visibleModal: !value\n        });\n      });\n    };\n\n    _this.convertSecondsToTime = function (unix_timestamp) {\n      var date = new Date(unix_timestamp);\n      var minutes = '0' + date.getMinutes();\n      var seconds = '0' + date.getSeconds();\n      var formattedTime = minutes.substr(-2) + ':' + seconds.substr(-2);\n      return formattedTime;\n    };\n\n    _this.timer = function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          secondsTime = _assertThisInitialize.state.data.secondsTime;\n\n      var newCurrentTime = _this.convertSecondsToTime(secondsTime - 1000);\n\n      if (secondsTime >= 1000) {\n        _this.setState(function (preState) {\n          return _objectSpread({}, preState, {\n            data: _objectSpread({}, preState.data, {\n              currentTime: newCurrentTime,\n              secondsTime: preState.data.secondsTime - 1000\n            })\n          });\n        });\n      } else {\n        clearInterval(_this.state.intervalId);\n\n        _this.setState(function (preState) {\n          return _objectSpread({}, preState, {\n            data: _objectSpread({}, preState.data, {\n              currentTime: '00:00',\n              secondsTime: 0,\n              isComplete: true\n            })\n          });\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TimerBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // QUERY:\n      this.queryTimer(); // PUBSUB:\n\n      this.subscriber = client.subscribe({\n        query: S_ON_TIMER,\n        variables: {\n          conferenceId: this.props.conferenceId\n        },\n        fetchPolicy: 'network-only'\n      }).subscribe(function (_ref2) {\n        var onTimer = _ref2.data.onTimer;\n\n        if (onTimer._id) {\n          _this2.handleStartTimer();\n\n          return _this2.setState(function (_preState) {\n            return {\n              visibleTimer: true,\n              timerInfo: onTimer,\n              data: _objectSpread({}, _preState.data, {\n                endTime: _this2.convertSecondsToTime(onTimer.amountOfTime),\n                currentTime: _this2.convertSecondsToTime(onTimer.amountOfTime + onTimer.startAt - Date.now()),\n                secondsTime: onTimer.amountOfTime + onTimer.startAt - Date.now(),\n                hideTime: false,\n                isComplete: false\n              })\n            };\n          });\n        } else {\n          clearInterval(_this2.state.intervalId);\n          return _this2.setState(function (_preState) {\n            return {\n              visibleTimer: false\n            };\n          });\n        }\n      });\n      this.handleStartTimer();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // PUBSUB:\n      if (this.subscriber) {\n        this.subscriber.unsubscribe();\n        this.subscriber = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var styleComplete = {\n        animationName: 'animate',\n        backgroundColor: '#078FA5',\n        border: 0,\n        color: '#FFF'\n      };\n      var _this$state = this.state,\n          data = _this$state.data,\n          visibleModal = _this$state.visibleModal,\n          visibleTimer = _this$state.visibleTimer,\n          timerInfo = _this$state.timerInfo,\n          handlePauseStart = this.handlePauseStart,\n          handleReset = this.handleReset,\n          handleHideShow = this.handleHideShow,\n          hanldeVisible = this.hanldeVisible,\n          handleComplete = this.handleComplete;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"timer-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }\n      }, visibleTimer ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"timer-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"timer\",\n        style: data.isComplete ? styleComplete : {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      }, data.isComplete ? /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"timer-complete\",\n        onClick: function onClick() {\n          return hanldeVisible(visibleModal);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }\n      }, \"Xong\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"timer-toggle\",\n        onClick: function onClick() {\n          return hanldeVisible(visibleModal);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 19\n        }\n      }, data.hideTime ? '--:--' : data.currentTime), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"timer-view\",\n        onClick: function onClick() {\n          return handleHideShow(data.hideTime);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: data.hideTime ? hideWhite : viewWhite,\n        alt: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      })))), visibleModal ? /*#__PURE__*/React.createElement(ModalTimer, {\n        data: data,\n        handlePauseStart: handlePauseStart,\n        handleReset: handleReset,\n        handleComplete: handleComplete,\n        timerInfo: timerInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 15\n        }\n      }) : null) : null);\n    }\n  }]);\n\n  return TimerBar;\n}(React.Component), _temp)) || _class) || _class);\nexport default TimerBar;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/TimerBar.jsx"],"names":["React","inject","observer","client","Q_HAS_TIMER","S_ON_TIMER","M_RESET_TIMER","M_COMPLETE_TIMER","newNotification","ModalTimer","TimerBar","subscriber","state","visibleTimer","visibleModal","intervalId","timerInfo","data","endTime","currentTime","secondsTime","hideTime","isPause","isComplete","queryTimer","query","variables","conferenceId","props","fetchPolicy","then","hasTimer","setState","_preState","convertSecondsToTime","amountOfTime","startAt","Date","now","clearInterval","catch","handleStartTimer","setInterval","timer","handlePauseStart","value","preState","handleReset","mutate","mutation","timerId","_id","error","handleComplete","handleHideShow","prevState","hanldeVisible","unix_timestamp","date","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","newCurrentTime","subscribe","onTimer","unsubscribe","styleComplete","animationName","backgroundColor","border","color","hideWhite","viewWhite","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport './TimerBar.less'\n\nimport {\n  client,\n  Q_HAS_TIMER,\n  S_ON_TIMER,\n  M_RESET_TIMER,\n  M_COMPLETE_TIMER\n} from '@graphql'\nimport { newNotification } from '@utils'\n\nimport viewWhite from '../../misc/images/view_white.svg'\nimport hideWhite from '../../misc/images/hide_white.svg'\nimport ModalTimer from './modals/ModalTimer'\n\n@inject('stores')\n@observer\nclass TimerBar extends React.Component {\n  // PUBSUB:\n  subscriber = null\n\n  state = {\n    visibleTimer: false,\n    visibleModal: false,\n    intervalId: null,\n    timerInfo: null,\n    data: {\n      endTime: '01:00',\n      currentTime: '01:00',\n      secondsTime: 0,\n      hideTime: false,\n      isPause: false,\n      isComplete: false\n    }\n  }\n\n  queryTimer = () => {\n    client\n      .query({\n        query: Q_HAS_TIMER,\n        variables: { conferenceId: this.props.conferenceId },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { hasTimer } }) => {\n        if (hasTimer) {\n          return this.setState(_preState => ({\n            visibleTimer: true,\n            timerInfo: hasTimer,\n            data: {\n              ..._preState.data,\n              endTime: this.convertSecondsToTime(hasTimer.amountOfTime),\n              currentTime: this.convertSecondsToTime(\n                hasTimer.amountOfTime + hasTimer.startAt - Date.now()\n              ),\n              secondsTime: hasTimer.amountOfTime + hasTimer.startAt - Date.now()\n            }\n          }))\n        } else {\n          clearInterval(this.state.intervalId)\n\n          return this.setState(_preState => ({\n            visibleTimer: false\n          }))\n        }\n      })\n      .catch(() => newNotification('Cannot get polling data!', 'danger'))\n  }\n\n  componentDidMount() {\n    // QUERY:\n    this.queryTimer()\n\n    // PUBSUB:\n    this.subscriber = client\n      .subscribe({\n        query: S_ON_TIMER,\n        variables: { conferenceId: this.props.conferenceId },\n        fetchPolicy: 'network-only'\n      })\n      .subscribe(({ data: { onTimer } }) => {\n        if (onTimer._id) {\n          this.handleStartTimer()\n\n          return this.setState(_preState => ({\n            visibleTimer: true,\n            timerInfo: onTimer,\n            data: {\n              ..._preState.data,\n              endTime: this.convertSecondsToTime(onTimer.amountOfTime),\n              currentTime: this.convertSecondsToTime(\n                onTimer.amountOfTime + onTimer.startAt - Date.now()\n              ),\n              secondsTime: onTimer.amountOfTime + onTimer.startAt - Date.now(),\n              hideTime: false,\n              isComplete: false\n            }\n          }))\n        } else {\n          clearInterval(this.state.intervalId)\n\n          return this.setState(_preState => ({\n            visibleTimer: false\n          }))\n        }\n      })\n    this.handleStartTimer()\n  }\n\n  componentWillUnmount() {\n    // PUBSUB:\n    if (this.subscriber) {\n      this.subscriber.unsubscribe()\n      this.subscriber = null\n    }\n  }\n\n  handleStartTimer = () => {\n    clearInterval(this.state.intervalId)\n    const intervalId = setInterval(this.timer, 1000)\n    this.setState(_preState => ({\n      intervalId\n    }))\n  }\n\n  handlePauseStart = value => {\n    if (!value) {\n      clearInterval(this.state.intervalId)\n      this.setState(preState => {\n        return {\n          ...preState,\n          data: {\n            ...preState.data,\n            isPause: true\n          }\n        }\n      })\n    } else {\n      this.handleStartTimer()\n    }\n  }\n\n  handleReset = () => {\n    // MUTATION: RESET TIMER\n    client\n      .mutate({\n        mutation: M_RESET_TIMER,\n        variables: { timerId: this.state.timerInfo._id }\n      })\n      .catch(error => {\n        return newNotification('Please try again later!', 'danger')\n      })\n  }\n\n  handleComplete = () => {\n    // MUTATION: COMPLETE TIMER\n    client\n      .mutate({\n        mutation: M_COMPLETE_TIMER,\n        variables: { timerId: this.state.timerInfo._id }\n      })\n      .catch(error => {\n        return newNotification('Please try again later!', 'danger')\n      })\n  }\n\n  handleHideShow = value => {\n    this.setState(prevState => ({\n      data: {\n        ...prevState.data,\n        hideTime: !value\n      }\n    }))\n  }\n\n  hanldeVisible = value => {\n    this.setState(preState => {\n      return {\n        ...preState,\n        visibleModal: !value\n      }\n    })\n  }\n\n  convertSecondsToTime = unix_timestamp => {\n    const date = new Date(unix_timestamp)\n    const minutes = '0' + date.getMinutes()\n    const seconds = '0' + date.getSeconds()\n    const formattedTime = minutes.substr(-2) + ':' + seconds.substr(-2)\n    return formattedTime\n  }\n\n  timer = () => {\n    const {\n      state: {\n        data: { secondsTime }\n      }\n    } = this\n    const newCurrentTime = this.convertSecondsToTime(secondsTime - 1000)\n    if (secondsTime >= 1000) {\n      this.setState(preState => {\n        return {\n          ...preState,\n          data: {\n            ...preState.data,\n            currentTime: newCurrentTime,\n            secondsTime: preState.data.secondsTime - 1000\n          }\n        }\n      })\n    } else {\n      clearInterval(this.state.intervalId)\n      this.setState(preState => {\n        return {\n          ...preState,\n          data: {\n            ...preState.data,\n            currentTime: '00:00',\n            secondsTime: 0,\n            isComplete: true\n          }\n        }\n      })\n    }\n  }\n\n  render() {\n    const styleComplete = {\n      animationName: 'animate',\n      backgroundColor: '#078FA5',\n      border: 0,\n      color: '#FFF'\n    }\n    const {\n      state: { data, visibleModal, visibleTimer, timerInfo },\n      handlePauseStart,\n      handleReset,\n      handleHideShow,\n      hanldeVisible,\n      handleComplete\n    } = this\n    return (\n      <div className='timer-bar'>\n        {visibleTimer ? (\n          <div className='timer-box'>\n            <div className='timer' style={data.isComplete ? styleComplete : {}}>\n              {data.isComplete ? (\n                <button\n                  type='button'\n                  className='timer-complete'\n                  onClick={() => hanldeVisible(visibleModal)}\n                >\n                  Xong\n                </button>\n              ) : (\n                <>\n                  <button\n                    type='button'\n                    className='timer-toggle'\n                    onClick={() => hanldeVisible(visibleModal)}\n                  >\n                    {data.hideTime ? '--:--' : data.currentTime}\n                  </button>\n                  <button\n                    type='button'\n                    className='timer-view'\n                    onClick={() => handleHideShow(data.hideTime)}\n                  >\n                    <img\n                      src={data.hideTime ? hideWhite : viewWhite}\n                      alt='icon'\n                    />\n                  </button>\n                </>\n              )}\n            </div>\n            {visibleModal ? (\n              <ModalTimer\n                data={data}\n                handlePauseStart={handlePauseStart}\n                handleReset={handleReset}\n                handleComplete={handleComplete}\n                timerInfo={timerInfo}\n              />\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default TimerBar\n"]},"metadata":{},"sourceType":"module"}