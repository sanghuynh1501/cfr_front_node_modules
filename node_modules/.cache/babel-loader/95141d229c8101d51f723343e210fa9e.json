{"ast":null,"code":"import { getJitsiMeetGlobalNS, loadScript } from '../base/util';\nvar loadRnnoisePromise;\n/**\n * Returns promise that resolves with a RnnoiseProcessor instance.\n *\n * @returns {Promise<RnnoiseProcessor>} - Resolves with the blur effect instance.\n */\n\nexport function createRnnoiseProcessorPromise() {\n  // Subsequent calls should not attempt to load the script multiple times.\n  if (!loadRnnoisePromise) {\n    loadRnnoisePromise = loadScript('/cfr/libs/rnnoise-processor.min.js');\n  }\n\n  return loadRnnoisePromise.then(function () {\n    var _ns$effects, _ns$effects$rnnoise;\n\n    var ns = getJitsiMeetGlobalNS();\n\n    if (ns === null || ns === void 0 ? void 0 : (_ns$effects = ns.effects) === null || _ns$effects === void 0 ? void 0 : (_ns$effects$rnnoise = _ns$effects.rnnoise) === null || _ns$effects$rnnoise === void 0 ? void 0 : _ns$effects$rnnoise.createRnnoiseProcessor) {\n      return ns.effects.rnnoise.createRnnoiseProcessor();\n    }\n\n    throw new Error('Rnnoise module binding createRnnoiseProcessor not found!');\n  });\n}","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/features/rnnoise/functions.js"],"names":["getJitsiMeetGlobalNS","loadScript","loadRnnoisePromise","createRnnoiseProcessorPromise","then","ns","effects","rnnoise","createRnnoiseProcessor","Error"],"mappings":"AAEA,SAASA,oBAAT,EAA+BC,UAA/B,QAAiD,cAAjD;AAEA,IAAIC,kBAAJ;AAEA;;;;;;AAKA,OAAO,SAASC,6BAAT,GAAyC;AAC5C;AACA,MAAI,CAACD,kBAAL,EAAyB;AACrBA,IAAAA,kBAAkB,GAAGD,UAAU,CAAC,oCAAD,CAA/B;AACH;;AAED,SAAOC,kBAAkB,CAACE,IAAnB,CAAwB,YAAM;AAAA;;AACjC,QAAMC,EAAE,GAAGL,oBAAoB,EAA/B;;AAEA,QAAIK,EAAJ,aAAIA,EAAJ,sCAAIA,EAAE,CAAEC,OAAR,uEAAI,YAAaC,OAAjB,wDAAI,oBAAsBC,sBAA1B,EAAkD;AAC9C,aAAOH,EAAE,CAACC,OAAH,CAAWC,OAAX,CAAmBC,sBAAnB,EAAP;AACH;;AAED,UAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH,GARM,CAAP;AASH","sourcesContent":["// @flow\n\nimport { getJitsiMeetGlobalNS, loadScript } from '../base/util';\n\nlet loadRnnoisePromise;\n\n/**\n * Returns promise that resolves with a RnnoiseProcessor instance.\n *\n * @returns {Promise<RnnoiseProcessor>} - Resolves with the blur effect instance.\n */\nexport function createRnnoiseProcessorPromise() {\n    // Subsequent calls should not attempt to load the script multiple times.\n    if (!loadRnnoisePromise) {\n        loadRnnoisePromise = loadScript('/cfr/libs/rnnoise-processor.min.js');\n    }\n\n    return loadRnnoisePromise.then(() => {\n        const ns = getJitsiMeetGlobalNS();\n\n        if (ns?.effects?.rnnoise?.createRnnoiseProcessor) {\n            return ns.effects.rnnoise.createRnnoiseProcessor();\n        }\n\n        throw new Error('Rnnoise module binding createRnnoiseProcessor not found!');\n    });\n}\n"]},"metadata":{},"sourceType":"module"}