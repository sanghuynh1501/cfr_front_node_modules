{"ast":null,"code":"import \"antd/es/slider/style\";\nimport _Slider from \"antd/es/slider\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/modals/devices-setting-components/SettingBox.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { returnError } from '@utils';\nimport { Video, createVideoTrack, createAudioTrack, makeTrackInfo } from '../../jitsi/media';\nimport { getDeviceById, setAudioOutputDeviceId } from '../../jitsi/devices';\nimport AudioLevelMeter from './AudioLevelMeter';\nimport audioOutputTest from './audioOutputTest.mp3';\nvar Option = _Select.Option;\nvar SettingBox = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(SettingBox, _React$PureComponent);\n\n  var _super = _createSuper(SettingBox);\n\n  function SettingBox(props) {\n    var _this;\n\n    _classCallCheck(this, SettingBox);\n\n    _this = _super.call(this, props);\n\n    _this.handleOnChangeAudioOutput = function (deviceId) {\n      var jitsiStore = _this.props.jitsiStore;\n\n      if (!jitsiStore.userSelectedAudioOutputDevice || deviceId !== jitsiStore.userSelectedAudioOutputDevice.deviceId) {\n        // *: Change selected device\n        jitsiStore.setState({\n          userSelectedAudioOutputDevice: getDeviceById(jitsiStore.availableDevices.audioOutput, deviceId)\n        });\n        setAudioOutputDeviceId(deviceId);\n      }\n    };\n\n    _this.handleChangeAudioOutputLevel = function (level) {\n      _this.props.jitsiStore.setState({\n        audioOutputLevel: parseFloat(level / 100)\n      });\n    };\n\n    _this.handleOnChangeAudioInput = function (deviceId) {\n      var jitsiStore = _this.props.jitsiStore;\n\n      if (!jitsiStore.userSelectedAudioInputDevice || deviceId !== jitsiStore.userSelectedAudioInputDevice.deviceId) {\n        // *: Change selected device\n        var audioInputDeviceFound = getDeviceById(jitsiStore.availableDevices.audioInput, deviceId);\n        jitsiStore.setState({\n          userSelectedAudioInputDevice: audioInputDeviceFound\n        }); // *: Re-create audio sharing if enabled\n\n        if (jitsiStore.isAudio && jitsiStore.audioTrack) {\n          jitsiStore.conference.removeTrack(jitsiStore.audioTrack.track).then(function () {\n            jitsiStore.setState({\n              isAudio: false,\n              audioTrack: undefined\n            });\n            createAudioTrack(deviceId).then(function (track) {\n              jitsiStore.conference.addTrack(track).then(function () {\n                jitsiStore.setState({\n                  isAudio: true,\n                  audioTrack: makeTrackInfo(track)\n                });\n              }).catch(function (error) {\n                throw new Error(error);\n              });\n            });\n          }).catch(function (error) {\n            returnError('Switch audio input device', {\n              error: error,\n              errorMessage: 'An error occurred while switching device, try again later'\n            });\n          });\n        }\n      }\n    };\n\n    _this.handleChangeAudioInputLevel = function (level) {\n      _this.props.jitsiStore.setState({\n        audioInputLevel: parseFloat(level / 100)\n      });\n    };\n\n    _this.onClickTestButton = function () {};\n\n    _this.handleOnChangeVideoInput = function (deviceId) {\n      var jitsiStore = _this.props.jitsiStore;\n\n      var errorCallback = function errorCallback(error) {\n        return returnError('Switch video input device', {\n          error: error,\n          errorMessage: 'An error occurred while switching device, try again later'\n        });\n      };\n\n      if (!jitsiStore.userSelectedVideoInputDevice || deviceId !== jitsiStore.userSelectedVideoInputDevice.deviceId) {\n        jitsiStore.setState({\n          userSelectedVideoInputDevice: getDeviceById(jitsiStore.availableDevices.videoInput, deviceId)\n        });\n        createVideoTrack(deviceId).then(function (track) {\n          _this.setState({\n            previewTrack: track\n          });\n        }); // *: Re-create video sharing if enabled\n\n        if (jitsiStore.isCamera && jitsiStore.videoTrack) {\n          jitsiStore.conference.removeTrack(jitsiStore.videoTrack.track).then(function () {\n            jitsiStore.setState({\n              isCamera: false,\n              videoTrack: undefined\n            });\n            createVideoTrack(deviceId).then(function (track) {\n              jitsiStore.conference.addTrack(track).then(function () {\n                jitsiStore.setState({\n                  isCamera: true,\n                  videoTrack: makeTrackInfo(track)\n                });\n              }).catch(function (error) {\n                throw new Error(error);\n              }).catch(errorCallback);\n            });\n          }).catch(errorCallback);\n        }\n      }\n    };\n\n    _this.renderOptions = function () {\n      return _this.props.jitsiStore.availableDevices[_this.props.type].map(function (_ref2) {\n        var deviceId = _ref2.deviceId,\n            label = _ref2.label;\n        return /*#__PURE__*/React.createElement(Option, {\n          key: deviceId,\n          value: deviceId,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 9\n          }\n        }, label.length < 40 ? label : \"\".concat(label.substring(0, 40), \"...\"));\n      });\n    };\n\n    _this.state = {\n      previewTrack: undefined\n    };\n\n    if (_this.props.type === 'audioOutput') {\n      _this.sound = new Audio(audioOutputTest);\n    }\n\n    return _this;\n  } // *_: Create preview track for camera\n\n\n  _createClass(SettingBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          jitsiStore = _this$props.jitsiStore,\n          type = _this$props.type;\n\n      if (type === 'audioInput') {\n        if (jitsiStore.userSelectedAudioInputDevice && jitsiStore.userSelectedAudioInputDevice.deviceId) {\n          createAudioTrack(jitsiStore.userSelectedAudioInputDevice.deviceId, jitsiStore.audioInputLevel).then(function (track) {\n            _this2.setState({\n              previewTrack: track\n            });\n          });\n        }\n      }\n\n      if (type === 'videoInput') {\n        if (jitsiStore.userSelectedCameraDevice && jitsiStore.userSelectedCameraDevice.deviceId) {\n          createVideoTrack(jitsiStore.userSelectedCameraDevice.deviceId).then(function (track) {\n            _this2.setState({\n              previewTrack: track\n            });\n          });\n        }\n      }\n    } // *__: Audio output\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var jitsiStore = this.props.jitsiStore;\n\n      switch (this.props.type) {\n        case 'audioOutput':\n          {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"setting-box\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 11\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              className: \"title-setting\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 13\n              }\n            }, \"Speaker\"), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"select-device\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(_Select, {\n              className: \"select-input\",\n              value: jitsiStore.userSelectedAudioOutputDevice && jitsiStore.userSelectedAudioOutputDevice.deviceId,\n              onSelect: this.handleOnChangeAudioOutput,\n              placeholder: \"Select a Device\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 15\n              }\n            }, this.renderOptions()), /*#__PURE__*/React.createElement(_Button, {\n              className: \"btn-test\",\n              type: \"primary\",\n              onClick: function onClick() {\n                _this3.sound.volume = _this3.props.jitsiStore.audioOutputLevel;\n\n                _this3.sound.play();\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 15\n              }\n            }, \"Test\")), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"show-level\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 13\n              }\n            }, Array(18).fill(0).map(function (item, index) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                key: index,\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 19\n                }\n              });\n            })), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"change-level\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(_Slider, {\n              defaultValue: jitsiStore.audioOutputLevel * 100,\n              onAfterChange: this.handleChangeAudioOutputLevel,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 15\n              }\n            })));\n          }\n\n        case 'audioInput':\n          {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"setting-box\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 11\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              className: \"title-setting\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 13\n              }\n            }, \"Microphone\"), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"select-device\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(_Select, {\n              className: \"select-input\",\n              value: jitsiStore.userSelectedAudioInputDevice && jitsiStore.userSelectedAudioInputDevice.deviceId,\n              onSelect: this.handleOnChangeAudioInput,\n              placeholder: \"Select a Device\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 15\n              }\n            }, this.renderOptions()), /*#__PURE__*/React.createElement(_Button, {\n              className: \"btn-test\",\n              type: \"primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 15\n              }\n            }, \"Test\")), this.state.previewTrack && this.props.modalVisible ? /*#__PURE__*/React.createElement(AudioLevelMeter, {\n              audioTrack: this.state.previewTrack,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 15\n              }\n            }) : /*#__PURE__*/React.createElement(React.Fragment, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 17\n              }\n            }), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"change-level\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(_Slider, {\n              disabled: true,\n              defaultValue: jitsiStore.audioInputLevel * 100,\n              onAfterChange: this.handleChangeAudioInputLevel,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 15\n              }\n            })));\n          }\n\n        case 'videoInput':\n          {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"setting-box\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 11\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              className: \"title-setting\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 13\n              }\n            }, \"Camera\"), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"select-device\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 13\n              }\n            }, /*#__PURE__*/React.createElement(_Select, {\n              className: \"select-input\",\n              value: jitsiStore.userSelectedCameraDevice && jitsiStore.userSelectedCameraDevice.deviceId,\n              onSelect: this.handleOnChangeVideoInput,\n              placeholder: \"Select a device\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 15\n              }\n            }, this.renderOptions())), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"video-box\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 13\n              }\n            }, this.state.previewTrack && this.props.modalVisible ? /*#__PURE__*/React.createElement(Video, {\n              id: this.state.previewTrack.getId(),\n              videoTrack: this.state.previewTrack,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 17\n              }\n            }) : /*#__PURE__*/React.createElement(\"div\", {\n              className: \"video-opacity\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }\n            }, \"Preview only\")));\n          }\n\n        default:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 16\n              }\n            });\n          }\n      }\n    }\n  }]);\n\n  return SettingBox;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default SettingBox;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/modals/devices-setting-components/SettingBox.jsx"],"names":["React","inject","observer","returnError","Video","createVideoTrack","createAudioTrack","makeTrackInfo","getDeviceById","setAudioOutputDeviceId","AudioLevelMeter","audioOutputTest","Option","SettingBox","stores","props","handleOnChangeAudioOutput","deviceId","jitsiStore","userSelectedAudioOutputDevice","setState","availableDevices","audioOutput","handleChangeAudioOutputLevel","level","audioOutputLevel","parseFloat","handleOnChangeAudioInput","userSelectedAudioInputDevice","audioInputDeviceFound","audioInput","isAudio","audioTrack","conference","removeTrack","track","then","undefined","addTrack","catch","error","Error","errorMessage","handleChangeAudioInputLevel","audioInputLevel","onClickTestButton","handleOnChangeVideoInput","errorCallback","userSelectedVideoInputDevice","videoInput","previewTrack","isCamera","videoTrack","renderOptions","type","map","label","length","substring","state","sound","Audio","userSelectedCameraDevice","volume","play","Array","fill","item","index","modalVisible","getId","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Select, Button, Slider } from 'antd'\n\nimport { returnError } from '@utils'\n\nimport { Video, createVideoTrack, createAudioTrack, makeTrackInfo } from '../../jitsi/media'\nimport { getDeviceById, setAudioOutputDeviceId } from '../../jitsi/devices'\nimport AudioLevelMeter from './AudioLevelMeter'\n\nimport audioOutputTest from './audioOutputTest.mp3'\n\nconst { Option } = Select\n\n@inject(({ stores }) => stores)\n@observer\nclass SettingBox extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = { previewTrack: undefined }\n\n    if (this.props.type === 'audioOutput') {\n      this.sound = new Audio(audioOutputTest)\n    }\n  }\n\n  // *_: Create preview track for camera\n  componentDidMount() {\n    const { jitsiStore, type } = this.props\n\n    if (type === 'audioInput') {\n      if (jitsiStore.userSelectedAudioInputDevice && jitsiStore.userSelectedAudioInputDevice.deviceId) {\n        createAudioTrack(jitsiStore.userSelectedAudioInputDevice.deviceId, jitsiStore.audioInputLevel).then(track => {\n          this.setState({ previewTrack: track })\n        })\n      }\n    }\n\n    if (type === 'videoInput') {\n      if (jitsiStore.userSelectedCameraDevice && jitsiStore.userSelectedCameraDevice.deviceId) {\n        createVideoTrack(jitsiStore.userSelectedCameraDevice.deviceId).then(track => {\n          this.setState({ previewTrack: track })\n        })\n      }\n    }\n  }\n\n  // *__: Audio output\n  handleOnChangeAudioOutput = deviceId => {\n    const { jitsiStore } = this.props\n\n    if (!jitsiStore.userSelectedAudioOutputDevice || deviceId !== jitsiStore.userSelectedAudioOutputDevice.deviceId) {\n      // *: Change selected device\n      jitsiStore.setState({\n        userSelectedAudioOutputDevice: getDeviceById(jitsiStore.availableDevices.audioOutput, deviceId)\n      })\n\n      setAudioOutputDeviceId(deviceId)\n    }\n  }\n\n  handleChangeAudioOutputLevel = level => {\n    this.props.jitsiStore.setState({ audioOutputLevel: parseFloat(level / 100) })\n  }\n\n  // *__: Audio input\n  handleOnChangeAudioInput = deviceId => {\n    const { jitsiStore } = this.props\n\n    if (!jitsiStore.userSelectedAudioInputDevice || deviceId !== jitsiStore.userSelectedAudioInputDevice.deviceId) {\n      // *: Change selected device\n      const audioInputDeviceFound = getDeviceById(jitsiStore.availableDevices.audioInput, deviceId)\n      jitsiStore.setState({\n        userSelectedAudioInputDevice: audioInputDeviceFound\n      })\n\n      // *: Re-create audio sharing if enabled\n      if (jitsiStore.isAudio && jitsiStore.audioTrack) {\n        jitsiStore.conference\n          .removeTrack(jitsiStore.audioTrack.track)\n          .then(() => {\n            jitsiStore.setState({ isAudio: false, audioTrack: undefined })\n\n            createAudioTrack(deviceId).then(track => {\n              jitsiStore.conference\n                .addTrack(track)\n                .then(() => {\n                  jitsiStore.setState({ isAudio: true, audioTrack: makeTrackInfo(track) })\n                })\n                .catch(error => {\n                  throw new Error(error)\n                })\n            })\n          })\n          .catch(error => {\n            returnError('Switch audio input device', {\n              error,\n              errorMessage: 'An error occurred while switching device, try again later'\n            })\n          })\n      }\n    }\n  }\n\n  handleChangeAudioInputLevel = level => {\n    this.props.jitsiStore.setState({ audioInputLevel: parseFloat(level / 100) })\n  }\n\n  onClickTestButton = () => { }\n\n  // *__: Video input\n  handleOnChangeVideoInput = deviceId => {\n    const { jitsiStore } = this.props\n\n    const errorCallback = error =>\n      returnError('Switch video input device', {\n        error,\n        errorMessage: 'An error occurred while switching device, try again later'\n      })\n\n    if (!jitsiStore.userSelectedVideoInputDevice || deviceId !== jitsiStore.userSelectedVideoInputDevice.deviceId) {\n      jitsiStore.setState({\n        userSelectedVideoInputDevice: getDeviceById(jitsiStore.availableDevices.videoInput, deviceId)\n      })\n\n      createVideoTrack(deviceId).then(track => {\n        this.setState({ previewTrack: track })\n      })\n\n      // *: Re-create video sharing if enabled\n      if (jitsiStore.isCamera && jitsiStore.videoTrack) {\n        jitsiStore.conference\n          .removeTrack(jitsiStore.videoTrack.track)\n          .then(() => {\n            jitsiStore.setState({ isCamera: false, videoTrack: undefined })\n\n            createVideoTrack(deviceId).then(track => {\n              jitsiStore.conference\n                .addTrack(track)\n                .then(() => {\n                  jitsiStore.setState({ isCamera: true, videoTrack: makeTrackInfo(track) })\n                })\n                .catch(error => {\n                  throw new Error(error)\n                })\n                .catch(errorCallback)\n            })\n          })\n          .catch(errorCallback)\n      }\n    }\n  }\n\n  renderOptions = () =>\n    this.props.jitsiStore.availableDevices[this.props.type].map(({ deviceId, label }) => {\n      return (\n        <Option key={deviceId} value={deviceId}>\n          {label.length < 40 ? label : `${label.substring(0, 40)}...`}\n        </Option>\n      )\n    })\n\n  render() {\n    const { jitsiStore } = this.props\n\n    switch (this.props.type) {\n      case 'audioOutput': {\n        return (\n          <div className='setting-box'>\n            <p className='title-setting'>Speaker</p>\n            <div className='select-device'>\n              <Select\n                className='select-input'\n                value={jitsiStore.userSelectedAudioOutputDevice && jitsiStore.userSelectedAudioOutputDevice.deviceId}\n                onSelect={this.handleOnChangeAudioOutput}\n                placeholder='Select a Device'\n              >\n                {this.renderOptions()}\n              </Select>\n              <Button\n                className='btn-test'\n                type='primary'\n                onClick={() => {\n                  this.sound.volume = this.props.jitsiStore.audioOutputLevel\n                  this.sound.play()\n                }}\n              >\n                Test\n              </Button>\n            </div>\n            <div className='show-level'>\n              {Array(18)\n                .fill(0)\n                .map((item, index) => (\n                  <span key={index} />\n                ))}\n            </div>\n            <div className='change-level'>\n              <Slider\n                defaultValue={jitsiStore.audioOutputLevel * 100}\n                onAfterChange={this.handleChangeAudioOutputLevel}\n              />\n            </div>\n          </div>\n        )\n      }\n\n      case 'audioInput': {\n        return (\n          <div className='setting-box'>\n            <p className='title-setting'>Microphone</p>\n            <div className='select-device'>\n              <Select\n                className='select-input'\n                value={jitsiStore.userSelectedAudioInputDevice && jitsiStore.userSelectedAudioInputDevice.deviceId}\n                onSelect={this.handleOnChangeAudioInput}\n                placeholder='Select a Device'\n              >\n                {this.renderOptions()}\n              </Select>\n              <Button className='btn-test' type='primary'>\n                Test\n              </Button>\n            </div>\n            {this.state.previewTrack && this.props.modalVisible ? (\n              <AudioLevelMeter audioTrack={this.state.previewTrack} />\n            ) : (\n                <React.Fragment />\n              )}\n            <div className='change-level'>\n              <Slider\n                disabled\n                defaultValue={jitsiStore.audioInputLevel * 100}\n                onAfterChange={this.handleChangeAudioInputLevel}\n              />\n            </div>\n          </div>\n        )\n      }\n\n      case 'videoInput': {\n        return (\n          <div className='setting-box'>\n            <p className='title-setting'>Camera</p>\n            <div className='select-device'>\n              <Select\n                className='select-input'\n                value={jitsiStore.userSelectedCameraDevice && jitsiStore.userSelectedCameraDevice.deviceId}\n                onSelect={this.handleOnChangeVideoInput}\n                placeholder='Select a device'\n              >\n                {this.renderOptions()}\n              </Select>\n            </div>\n            <div className='video-box'>\n              {this.state.previewTrack && this.props.modalVisible ? (\n                <Video id={this.state.previewTrack.getId()} videoTrack={this.state.previewTrack} />\n              ) : (\n                  <div className='video-opacity'>Preview only</div>\n                )}\n            </div>\n          </div>\n        )\n      }\n\n      default: {\n        return <React.Fragment />\n      }\n    }\n  }\n}\n\nexport default SettingBox\n"]},"metadata":{},"sourceType":"module"}