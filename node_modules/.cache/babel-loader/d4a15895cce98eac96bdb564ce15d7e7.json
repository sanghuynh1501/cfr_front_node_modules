{"ast":null,"code":"import _regeneratorRuntime from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/index.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport './index.less';\nimport { BounceLoader } from '@components';\nimport { client, M_LEAVE_CONFERENCE, M_SET_PINNED_USER } from '@graphql';\nimport { routesPath } from '@router';\nimport { newNotification, returnError, isBotRecord } from '@utils';\nimport { JitsiMeetJS, initOptions, JitsiConnectionEvents, JitsiConnectionErrors, JitsiConferenceEvents, JitsiMediaDevicesEvents, JitsiConnectionQualityEvents, JitsiTrackEvents } from './core';\nimport { TRANSCRIBER_DISPLAY_NAME, MEDIA_TYPE, VIDEO_TYPE, VIDEO_QUALITY_LEVELS, MEDIA_DEVICE_TYPES } from './constants';\nimport { createRnnoiseProcessorPromise } from '../../../features/rnnoise';\nimport { requestUserAudioAccess, requestUserCameraAccess, groupDevicesByKind } from './devices';\nimport { createAudioTrack, createVideoTrack, createDesktopTrack, makeTrackInfo, setTrackMuted } from './media';\nimport LayoutSwitch from './components/LayoutSwitch';\nimport ReturnLayout from './layouts/ReturnLayout';\nimport CollaboratePanel from '../collab-panel';\nimport StreamKeydialog from '../modals/StreamKeyDialog';\nimport ToolBar from './ToolBar';\nimport AudioRender from './AudioRender';\nimport RecommendReconnect from './components/RecommendReconnect';\nimport { withTranslation } from 'react-i18next';\nvar confirm = _Modal.confirm;\nvar JitsiComponent = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(JitsiComponent, _React$Component);\n\n  var _super = _createSuper(JitsiComponent);\n\n  function JitsiComponent(props) {\n    var _this;\n\n    _classCallCheck(this, JitsiComponent);\n\n    _this = _super.call(this, props); // NOTE: Jitsi init\n\n    _this.set = function (state) {\n      _this.props.jitsiStore.setState(state);\n    };\n\n    _this.handleConnect = function () {\n      // Init connection\n      var connection = new JitsiMeetJS.JitsiConnection(null, null, _this.connectionOptions);\n\n      _this.set({\n        connection: connection\n      });\n\n      connection.connect(); // *: Success\n\n      connection.addEventListener(JitsiConnectionEvents.CONNECTION_ESTABLISHED, function () {\n        var conference = connection.initJitsiConference(_this.props.conferenceState.conference.code, {\n          openBridgeChannel: true,\n          createVADProcessor: createRnnoiseProcessorPromise\n        });\n\n        _this.set({\n          isConnected: true,\n          conference: conference\n        });\n\n        conference.join(); // *: Join status\n\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, function () {\n          _this.set({\n            isJoined: true\n          });\n\n          _this.onJoinedConference();\n        });\n        conference.on(JitsiConferenceEvents.CONFERENCE_LEFT, function () {\n          _this.set({\n            isJoined: false,\n            conference: undefined\n          });\n        }); // *: Error\n\n        conference.on(JitsiConferenceEvents.CONFERENCE_FAILED, function () {\n          _this.onJoinConferenceFailed(JitsiConferenceEvents.CONFERENCE_FAILED);\n        });\n        conference.on(JitsiConferenceEvents.CONFERENCE_ERROR, function () {\n          _this.onJoinConferenceFailed(JitsiConferenceEvents.CONFERENCE_ERROR);\n        });\n        conference.on(JitsiConferenceEvents.CONNECTION_INTERRUPTED, function () {\n          console.log('p2p cancel: CONNECTION_INTERRUPTED'); // this.onJoinConferenceFailed(JitsiConferenceEvents.CONNECTION_INTERRUPTED)\n        }); // *: Get kicked\n\n        conference.on(JitsiConferenceEvents.KICKED, function () {\n          return _this.onJoinConferenceFailed('KICKED');\n        }); // *: Participants\n\n        conference.on(JitsiConferenceEvents.USER_JOINED, _this.USER_JOINED);\n        conference.on(JitsiConferenceEvents.DISPLAY_NAME_CHANGED, _this.DISPLAY_NAME_CHANGED);\n        conference.on(JitsiConferenceEvents.USER_LEFT, _this.USER_LEFT);\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, _this.TRACK_ADDED);\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, _this.TRACK_REMOVED); // *: Speaker\n\n        conference.on(JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, _this.DOMINANT_SPEAKER_CHANGED); // conference.on(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, this.TRACK_AUDIO_LEVEL_CHANGED)\n        // *: Connection Statistics\n\n        conference.on(JitsiConnectionQualityEvents.LOCAL_STATS_UPDATED, _this.LOCAL_STATS_UPDATED);\n        conference.on(JitsiConnectionQualityEvents.REMOTE_STATS_UPDATED, _this.REMOTE_STATS_UPDATED); // *: Media devices list change\n\n        JitsiMeetJS.mediaDevices.addEventListener(JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED, function (devices) {\n          _this.set({\n            availableDevices: groupDevicesByKind(devices)\n          });\n        }); // *: Remotely deactive mic\n\n        conference.addCommandListener('REMOTE_MIC_OFF', function (_ref2) {\n          var value = _ref2.value;\n          if (value === conference.myUserId()) _this.offAudio();\n        }); // *: Remotely deactive video\n\n        conference.addCommandListener('REMOTE_VIDEO_OFF', function (_ref3) {\n          var value = _ref3.value;\n          var jitsiStore = _this.props.jitsiStore;\n\n          if (value === conference.myUserId()) {\n            if (jitsiStore.isCamera) {\n              _this.offCamera();\n            } else {\n              _this.offShareScreen();\n            }\n          }\n\n          if (jitsiStore._conference && value === jitsiStore._conference.myUserId()) {\n            _this.offShareScreen();\n          }\n        }); // *: Remotely kick user\n\n        conference.addCommandListener('REMOTE_KICK_USER', function (_ref4) {\n          var value = _ref4.value;\n\n          try {\n            var _jitsiStore$_conferen;\n\n            var _this$props = _this.props,\n                jitsiStore = _this$props.jitsiStore,\n                i18n = _this$props.i18n,\n                history = _this$props.history;\n\n            if (conference.myUserId() === value || ((_jitsiStore$_conferen = jitsiStore._conference) === null || _jitsiStore$_conferen === void 0 ? void 0 : _jitsiStore$_conferen.myUserId()) === value) {\n              _this.LEAVE({\n                disableMutateLeave: true\n              });\n\n              client.mutate({\n                mutation: M_LEAVE_CONFERENCE,\n                variables: {\n                  conferenceId: _this.props.conferenceId\n                }\n              }).then(function (_ref5) {\n                var leaveConference = _ref5.data.leaveConference;\n\n                if (!leaveConference) {\n                  throw new Error('error leave room');\n                }\n              }).catch(function (error) {\n                return console.log(error);\n              });\n              confirm({\n                centered: true,\n                title: i18n.t('conference.notification'),\n                content: i18n.t('conference.noti_kicked_out'),\n                onOk: function onOk() {\n                  history.push('/leave');\n                },\n                onCancel: function onCancel() {\n                  history.push('/leave');\n                }\n              });\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        });\n      });\n      connection.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED, function () {}); // *: Failure\n\n      connection.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED, function () {\n        _this.set({\n          isDisconnect: true\n        }); // this.onConnectFailed(JitsiConnectionEvents.CONNECTION_FAILED)\n\n      });\n      connection.addEventListener(JitsiConnectionEvents.WRONG_STATE, function () {\n        return _this.onConnectFailed(JitsiConnectionEvents.WRONG_STATE);\n      }); // *: Errors\n\n      connection.addEventListener(JitsiConnectionErrors.CONNECTION_DROPPED_ERROR, function () {\n        return _this.onConnectFailed(JitsiConnectionErrors.CONNECTION_DROPPED_ERROR);\n      });\n      connection.addEventListener(JitsiConnectionErrors.PASSWORD_REQUIRED, function () {\n        return _this.onConnectFailed(JitsiConnectionErrors.PASSWORD_REQUIRED);\n      });\n      connection.addEventListener(JitsiConnectionErrors.SERVER_ERROR, function () {\n        return _this.onConnectFailed(JitsiConnectionErrors.SERVER_ERROR);\n      });\n      connection.addEventListener(JitsiConnectionErrors.OTHER_ERROR, function () {\n        return _this.onConnectFailed(JitsiConnectionErrors.OTHER_ERROR);\n      });\n    };\n\n    _this.onConnectFailed = function (errorCode) {\n      console.log(errorCode);\n\n      _this.set({\n        isConnected: false\n      });\n    };\n\n    _this.disconnect = function () {\n      return _this.props.jitsiStore.connection.disconnect();\n    };\n\n    _this.setJitsiDisplayName = function (name) {\n      return _this.props.jitsiStore.conference.setDisplayName(name);\n    };\n\n    _this.onJoinedConference = function () {\n      var conferenceState = _this.props.conferenceState;\n      var myInfo = conferenceState.myInfo,\n          myRole = conferenceState.myRole;\n\n      _this.setJitsiDisplayName(\"\".concat(myInfo._id, \"|\").concat(myInfo.firstname, \" \").concat(myInfo.lastname, \"|\").concat(myRole)); // *: Get user's media devices\n\n\n      JitsiMeetJS.mediaDevices.enumerateDevices(function (devices) {\n        if (devices.length) {\n          var classifiedDevicesData = groupDevicesByKind(devices);\n\n          _this.set({\n            availableDevices: classifiedDevicesData,\n            userSelectedCameraDevice: classifiedDevicesData.videoInput[0],\n            userSelectedAudioInputDevice: classifiedDevicesData.audioInput[0],\n            userSelectedAudioOutputDevice: classifiedDevicesData.audioOutput[0]\n          });\n        }\n      }); // *: Save api to store\n\n      conferenceState.setConnectionApi({\n        LEAVE: _this.LEAVE,\n        onAudio: _this.onAudio,\n        offAudio: _this.offAudio,\n        reOrderUserAtFirstPlace: _this.reOrderUserAtFirstPlace,\n        setPinnedMode: _this.setPinnedMode,\n        setSpeakerByUID: _this.setSpeakerByUID,\n        setJitsiDisplayName: _this.setJitsiDisplayName\n      }); // *: request for audio and camera permisson\n\n      requestUserAudioAccess();\n      requestUserCameraAccess();\n      return newNotification('Join conference successfully ', 'success', {\n        animationIn: ['animated', 'fadeIn']\n      });\n    };\n\n    _this.onJoinConferenceFailed = function (errorCode) {\n      _this.set({\n        isJoined: false\n      });\n    };\n\n    _this.leaveConference = function () {\n      return _this.props.jitsiStore.conference.leave();\n    };\n\n    _this.initSecondConnection = function () {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n\n      // *: Initialize second connection\n      var _connection = new JitsiMeetJS.JitsiConnection(null, null, _this.connectionOptions);\n\n      _this.set({\n        _connection: _connection\n      });\n\n      _connection.connect(); // Connect to Jitsi\n      // *___: Second connection CONNECTED successfully\n\n\n      _connection.addEventListener(JitsiConnectionEvents.CONNECTION_ESTABLISHED, function () {\n        // *: Initialize conference\n        var _conference = _connection.initJitsiConference(_this.props.conferenceState.conference.code, {\n          openBridgeChannel: true\n        });\n\n        _this.set({\n          _isConnected: true,\n          _conference: _conference\n        });\n\n        _conference.join(); // Join conference\n\n\n        var _this$props$conferenc = _this.props.conferenceState,\n            myInfo = _this$props$conferenc.myInfo,\n            myRole = _this$props$conferenc.myRole; // *: Second connection JOINED\n\n        _conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, function () {\n          _this.set({\n            _isJoined: true\n          });\n\n          _conference.setDisplayName(\"\".concat(myInfo._id, \"|\").concat(myInfo.firstname, \" \").concat(myInfo.lastname, \"|\").concat(myRole));\n\n          callback();\n        }); // *: Second connection LEFT\n\n\n        _conference.on(JitsiConferenceEvents.CONFERENCE_LEFT, function () {\n          _this.set({\n            _isJoined: false,\n            _conference: undefined\n          });\n        });\n      }); // *___: Second connection DISCONNECTED successfully\n\n\n      _connection.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED, function () {\n        _this.set({\n          _isConnected: false,\n          _connection: undefined\n        });\n      });\n    };\n\n    _this.clearSecondConnection = function () {\n      var jitsiStore = _this.props.jitsiStore;\n\n      if (jitsiStore._conference) {\n        jitsiStore._conference.leave().then(function () {\n          return jitsiStore._connection.disconnect();\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      }\n    };\n\n    _this.isValidUID = function (id) {\n      var jitsiStore = _this.props.jitsiStore;\n      return jitsiStore.conference.myUserId() === id || jitsiStore._conference && jitsiStore._conference.myUserId() === id || jitsiStore.participants.some(function (t) {\n        return t.id === id;\n      });\n    };\n\n    _this.isSecondConnectionId = function (id) {\n      return _this.props.jitsiStore._conference && _this.props.jitsiStore._conference.myUserId() === id;\n    };\n\n    _this.handleGetMediaDevices = function () {\n      return new Promise(function (resolve) {\n        try {\n          JitsiMeetJS.mediaDevices.enumerateDevices(function (devices) {\n            return resolve(devices);\n          });\n        } catch (error) {\n          returnError('Function: GetMediaDevices', {\n            error: error,\n            errorMessage: 'Failed to get media devices list'\n          });\n          resolve([]);\n        }\n      });\n    };\n\n    _this.onLocalTrackError = function (track) {\n      var jitsiStore = _this.props.jitsiStore;\n\n      switch (track.getType()) {\n        case MEDIA_TYPE.AUDIO:\n          {\n            if (jitsiStore.isAudio) return _this.offAudio();\n            break;\n          }\n\n        case MEDIA_TYPE.VIDEO:\n          {\n            if (track.videoType === VIDEO_TYPE.CAMERA && jitsiStore.isCamera) return _this.offCamera();else if (track.videoType === VIDEO_TYPE.DESKTOP && jitsiStore.isShareScreen) return _this.offShareScreen();\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    _this.initializeLocalTrackListener = function (track) {\n      // *: No data from source\n      track.on(JitsiTrackEvents.NO_DATA_FROM_SOURCE, function () {\n        _this.onLocalTrackError(track);\n      }); // *: Local Track stopped\n\n      track.on(JitsiTrackEvents.LOCAL_TRACK_STOPPED, function () {\n        _this.onLocalTrackError(track);\n      });\n    };\n\n    _this.notThisTrack = function (track) {\n      return _this.props.jitsiStore.participantTracks.filter(function (_ref6) {\n        var id = _ref6.id,\n            mediaType = _ref6.mediaType;\n        return !(id === track.getId() && mediaType === track.getType());\n      });\n    };\n\n    _this.notThisAudioTrack = function (track) {\n      return _this.props.jitsiStore.participantAudios.filter(function (_ref7) {\n        var id = _ref7.id;\n        return id !== track.getId();\n      });\n    };\n\n    _this.thisTrack = function (track) {\n      return _this.props.jitsiStore.participantTracks.find(function (_ref8) {\n        var id = _ref8.id,\n            participantId = _ref8.participantId,\n            mediaType = _ref8.mediaType;\n        return id === track.getId() && participantId === track.getParticipantId() && mediaType === track.getType();\n      });\n    };\n\n    _this.notThisParticipant = function (id) {\n      return _this.props.jitsiStore.participants.filter(function (p) {\n        return p.id !== id;\n      });\n    };\n\n    _this.thisParticipant = function (id) {\n      return _this.props.jitsiStore.participants.find(function (p) {\n        return p.id === id;\n      });\n    };\n\n    _this.tracksOfThisParticipant = function (id) {\n      return _this.props.jitsiStore.participantTracks.filter(function (_ref9) {\n        var participantId = _ref9.participantId;\n        return participantId === id;\n      });\n    };\n\n    _this.videoTrackOfThisParticipant = function (id) {\n      return _this.props.jitsiStore.participantTracks.find(function (_ref10) {\n        var participantId = _ref10.participantId,\n            mediaType = _ref10.mediaType;\n        return participantId === id && mediaType === MEDIA_TYPE.VIDEO;\n      });\n    };\n\n    _this.doesParticipantHasAudio = function (id) {\n      return _this.props.jitsiStore.participantTracks.some(function (_ref11) {\n        var participantId = _ref11.participantId,\n            mediaType = _ref11.mediaType,\n            track = _ref11.track;\n        return participantId === id && mediaType === MEDIA_TYPE.AUDIO && !track.isMuted();\n      });\n    };\n\n    _this.doesParticipantHasVideo = function (id) {\n      return _this.props.jitsiStore.participantTracks.some(function (_ref12) {\n        var participantId = _ref12.participantId,\n            mediaType = _ref12.mediaType;\n        return participantId === id && mediaType === MEDIA_TYPE.VIDEO;\n      });\n    };\n\n    _this.setPinnedMode = function (id) {\n      return _this.set({\n        isPinnedMode: !!id\n      });\n    };\n\n    _this.reOrderUserAtFirstPlace = function (id) {\n      // *: Do nothing if incoming id is from local\n      if (_this.isSecondConnectionId(id) || _this.props.jitsiStore.conference.myUserId() === id) return;\n\n      if (_this.isValidUID(id)) {\n        _this.set({\n          participants: [_this.thisParticipant(id)].concat(_toConsumableArray(_this.notThisParticipant(id)))\n        });\n      }\n    };\n\n    _this.setSpeakerTrack = function (track, participantId) {\n      _this.set({\n        speaker: {\n          id: track.getId(),\n          type: track.getType(),\n          participantId: participantId,\n          track: track\n        }\n      }); // *: Elects the participant with the given id to be the selected participant in order to receive higher video quality (if simulcast is enabled).\n\n\n      try {\n        _this.props.jitsiStore.conference.selectParticipant(participantId);\n      } catch (error) {\n        returnError('Function: setSpeakerTrack', {\n          error: error,\n          errorMessage: 'Failed to upgrade video resolution for selected participant.'\n        });\n      }\n    };\n\n    _this.setSpeakerByUID = function (id) {\n      var jitsiStore = _this.props.jitsiStore; // *: Ignore if incoming track same as current\n\n      if (jitsiStore.speaker && jitsiStore.speaker.participantId === id) return;\n\n      if (jitsiStore.conference.myUserId() === id) {\n        if (jitsiStore.videoTrack) _this.setSpeakerTrack(jitsiStore.videoTrack.track, id);else if (jitsiStore.desktopTrack) _this.setSpeakerTrack(jitsiStore.desktopTrack.track, id);\n      } else if (_this.isSecondConnectionId(id)) {\n        if (jitsiStore.desktopTrack) _this.setSpeakerTrack(jitsiStore.desktopTrack.track, id);\n      } else {\n        var participantFound = _this.thisParticipant(id);\n\n        if (participantFound) {\n          var trackFound = _this.videoTrackOfThisParticipant(id);\n\n          if (trackFound) _this.setSpeakerTrack(trackFound.track, id);\n        }\n      }\n    };\n\n    _this.USER_JOINED = function (id, user) {\n      // *: Ignore second connection activities\n      if (_this.isSecondConnectionId(id)) return;\n      var _this$props2 = _this.props,\n          conferenceState = _this$props2.conferenceState,\n          jitsiStore = _this$props2.jitsiStore;\n      var displayName = user.getDisplayName();\n\n      if (user.isHidden()) {\n        // *: Hidden user joined\n        if (displayName && displayName === TRANSCRIBER_DISPLAY_NAME) {\n          _this.set({\n            isTranscribing: true,\n            isDialing: false,\n            transcriberId: id\n          });\n        } else {\n          _this.set({\n            potentialTranscriberIds: [].concat(_toConsumableArray(jitsiStore.potentialTranscriberIds), [id])\n          });\n        }\n      } else {\n        // *: Normal user joined\n        _this.set({\n          participants: [].concat(_toConsumableArray(jitsiStore.participants), [{\n            id: id,\n            user: user,\n            displayName: displayName,\n            presence: user.getStatus(),\n            role: user.getRole()\n          }])\n        });\n      }\n\n      if (conferenceState.conference && conferenceState.conference.pinnedUser === id) {\n        _this.setPinnedMode(id);\n      }\n    };\n\n    _this.DISPLAY_NAME_CHANGED = function (id, displayName) {\n      // *: Ignore second connection activities\n      if (_this.isSecondConnectionId(id)) return;\n\n      _this.set({\n        participants: [].concat(_toConsumableArray(_this.notThisParticipant(id)), [_objectSpread({}, _this.thisParticipant(id), {\n          displayName: displayName\n        })])\n      });\n    };\n\n    _this.USER_LEFT = /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, user) {\n        var participants;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.isSecondConnectionId(id)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                if (user.isHidden()) {\n                  _this.set({\n                    isTerminating: false,\n                    isTranscribing: false,\n                    transcriberId: null,\n                    potentialTranscriberIds: []\n                  });\n                } else {\n                  participants = _this.notThisParticipant(id);\n\n                  _this.set({\n                    participants: participants,\n                    participantTracks: _this.props.jitsiStore.participantTracks.filter(function (_ref14) {\n                      var participantId = _ref14.participantId;\n                      return participantId !== id;\n                    }),\n                    participantAudios: _this.props.jitsiStore.participantAudios.filter(function (_ref15) {\n                      var participantId = _ref15.participantId;\n                      return participantId !== id;\n                    })\n                  });\n\n                  if (participants.length <= 4) {\n                    _this.props.conferenceState.setState({\n                      offsetRemoteTracks: 0\n                    });\n                  }\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref13.apply(this, arguments);\n      };\n    }();\n\n    _this.TRACK_ADDED = function (track) {\n      // *: Ignore second connection activities\n      if (_this.isSecondConnectionId(track.getParticipantId())) return;\n\n      if (!track.isLocal()) {\n        track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, function () {\n          _this.set({\n            participantTracks: [].concat(_toConsumableArray(_this.notThisTrack(track)), [_objectSpread({}, _this.thisTrack(track), {\n              muted: track.isMuted()\n            })])\n          });\n        });\n        track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, function (videoType) {\n          _this.set({\n            participantTracks: [].concat(_toConsumableArray(_this.notThisTrack(track)), [_objectSpread({}, _this.thisTrack(track), {\n              videoType: videoType\n            })])\n          });\n        });\n        track.on(JitsiTrackEvents.NO_DATA_FROM_SOURCE, function () {\n          track.dispose();\n        });\n\n        _this.set({\n          participantTracks: [].concat(_toConsumableArray(_this.notThisTrack(track)), [{\n            id: track.getId(),\n            track: track,\n            participantId: track.getParticipantId(),\n            mediaType: track.getType(),\n            videoType: track.videoType,\n            videoStarted: false,\n            muted: track.isMuted()\n          }])\n        });\n\n        if (track.getType() === MEDIA_TYPE.AUDIO) {\n          _this.set({\n            participantAudios: [].concat(_toConsumableArray(_this.notThisAudioTrack(track)), [{\n              id: track.getId(),\n              track: track,\n              participantId: track.getParticipantId(),\n              mediaType: track.getType(),\n              videoType: track.videoType,\n              videoStarted: false,\n              muted: track.isMuted()\n            }])\n          });\n        }\n\n        var conference = _this.props.conferenceState.conference;\n\n        if (_this.props.jitsiStore.isPinnedMode && track.getParticipantId() === conference.pinnedUser) {\n          _this.setSpeakerByUID(conference.pinnedUser);\n\n          _this.reOrderUserAtFirstPlace(conference.pinnedUser);\n        }\n      }\n    };\n\n    _this.TRACK_REMOVED = function (track) {\n      var jitsiStore = _this.props.jitsiStore;\n\n      if (jitsiStore.speaker && jitsiStore.speaker.track.getId() === track.getId()) {\n        _this.set({\n          speaker: null,\n          isPinnedMode: false\n        });\n      } // *: Ignore second connection activities\n\n\n      if (_this.isSecondConnectionId(track.getParticipantId())) return;\n\n      if (!track.isLocal()) {\n        _this.set({\n          participantTracks: _this.notThisTrack(track)\n        });\n\n        if (track.getType() === MEDIA_TYPE.AUDIO) {\n          _this.set({\n            participantAudios: _this.notThisAudioTrack(track)\n          });\n        }\n      }\n    };\n\n    _this.DOMINANT_SPEAKER_CHANGED = function (id) {\n      // *: Ignore second connection activities\n      if (_this.isSecondConnectionId(id)) return; // *: Do not set my self as main speaker\n\n      if (_this.props.jitsiStore.conference.myUserId() === id) return; // *: Only enable this feature on pinned mode\n\n      if (!_this.props.jitsiStore.isPinnedMode) {\n        _this.setSpeakerByUID(id);\n      }\n    };\n\n    _this.LOCAL_STATS_UPDATED = function (connectionStats) {\n      var jitsiStore = _this.props.jitsiStore;\n\n      if (connectionStats) {\n        var nextVR = 1080;\n\n        if (connectionStats.connectionQuality <= 25) {\n          nextVR = VIDEO_QUALITY_LEVELS.LOW;\n        } else if (connectionStats.connectionQuality <= 50) {\n          nextVR = VIDEO_QUALITY_LEVELS.STANDARD;\n        } else if (connectionStats.connectionQuality <= 80) {\n          nextVR = VIDEO_QUALITY_LEVELS.HIGH;\n        } else if (connectionStats.connectionQuality > 80) {\n          nextVR = VIDEO_QUALITY_LEVELS.PERFECT;\n        }\n\n        if (nextVR !== jitsiStore.videoResolutionFromJVB) {\n          jitsiStore.conference.setReceiverVideoConstraint(nextVR);\n        }\n\n        _this.set({\n          connectionStats: connectionStats,\n          videoResolutionFromJVB: nextVR\n        });\n      }\n    };\n\n    _this.REMOTE_STATS_UPDATED = function (id, stats) {\n      _this.updateRemoteStats(id, stats);\n    };\n\n    _this.updateButtonShareAudioStatus = function (boolean) {\n      _this.set({\n        isShareAudioInProcess: boolean\n      });\n    };\n\n    _this.onAudio = function () {\n      var jitsiStore = _this.props.jitsiStore;\n      var errorMessage = \"An error occurred while sharing audio, please try again later!\";\n\n      if (!jitsiStore.audioTrack) {\n        _this.updateButtonShareAudioStatus(true);\n\n        var selectedAudioInputDeviceId = jitsiStore.userSelectedAudioInputDevice && jitsiStore.userSelectedAudioInputDevice.deviceId || undefined; // *: Get media devices list\n\n        _this.handleGetMediaDevices().then(function (devices) {\n          return devices.some(function (device) {\n            return device.kind === MEDIA_DEVICE_TYPES.AUDIO_INPUT;\n          });\n        }).then(function (hasCompatibleDevice) {\n          if (hasCompatibleDevice) {\n            createAudioTrack(selectedAudioInputDeviceId).then(function (track) {\n              if (track) {\n                jitsiStore.conference.addTrack(track).then(function () {\n                  _this.initializeLocalTrackListener(track);\n\n                  _this.set({\n                    isAudio: true,\n                    audioTrack: makeTrackInfo(track)\n                  });\n                }).catch(function (error) {\n                  track.dispose(); // *: Remove track from webrtc\n\n                  returnError(\"Function: onAudio\", {\n                    error: error,\n                    errorMessage: errorMessage\n                  });\n                });\n              }\n            }).finally(function () {\n              return _this.updateButtonShareAudioStatus(false);\n            }); // EXPERIMENT:\n          } else {\n            _this.updateButtonShareAudioStatus(false); // EXPERIMENT:\n\n\n            returnError(\"Function: onAudio\", {\n              error: \"There's no audio-input device found!\",\n              errorMessage: \"There's no audio-input device found!\"\n            });\n          }\n        });\n      } else {\n        if (!jitsiStore.isAudio) {\n          _this.updateButtonShareAudioStatus(true);\n\n          setTrackMuted(jitsiStore.audioTrack.track, false);\n\n          _this.set({\n            isAudio: true\n          });\n\n          _this.updateButtonShareAudioStatus(false); // EXPERIMENT:\n\n        }\n      }\n    };\n\n    _this.offAudio = function () {\n      setTimeout(function () {\n        var jitsiStore = _this.props.jitsiStore;\n\n        if (jitsiStore.isAudio) {\n          _this.updateButtonShareAudioStatus(true); // EXPERIMENT:\n\n\n          if (jitsiStore.audioTrack) {\n            setTrackMuted(jitsiStore.audioTrack.track, true);\n\n            _this.set({\n              isAudio: false\n            });\n          }\n\n          _this.updateButtonShareAudioStatus(false); // EXPERIMENT:\n\n        }\n      }, 1);\n    };\n\n    _this.updateButtonShareCameraStatus = function (boolean) {\n      _this.setState({\n        isShareCameraInProcess: boolean\n      });\n    };\n\n    _this.onCamera = function () {\n      var _this$props3 = _this.props,\n          jitsiStore = _this$props3.jitsiStore,\n          conferenceState = _this$props3.conferenceState;\n\n      if (!jitsiStore.isCamera) {\n        _this.updateButtonShareCameraStatus(true); // EXPERIMENT:\n\n\n        var selectedVideoInputDeviceId = jitsiStore.userSelectedVideoInputDevice && jitsiStore.userSelectedVideoInputDevice.deviceId || undefined;\n        var errorMessage = \"An error occurred while sharing camera, try again later!\"; // *: Normal active\n\n        if (!jitsiStore.isShareScreen) {\n          _this.handleGetMediaDevices().then(function (devices) {\n            return devices.some(function (device) {\n              return device.kind === MEDIA_DEVICE_TYPES.VIDEO_INPUT;\n            });\n          }).then(function (hasCompatibleDevice) {\n            if (hasCompatibleDevice) {\n              createVideoTrack(selectedVideoInputDeviceId).then(function (track) {\n                if (track) {\n                  jitsiStore.conference.addTrack(track).then(function () {\n                    _this.initializeLocalTrackListener(track);\n\n                    _this.set({\n                      isCamera: true,\n                      videoTrack: makeTrackInfo(track)\n                    });\n                  }).catch(function (error) {\n                    track.dispose(); // *: Remove track if error\n\n                    return returnError(\"Function: shareCamera\", {\n                      error: error,\n                      errorMessage: errorMessage\n                    });\n                  });\n                }\n              });\n            } else {\n              return returnError(\"Function: shareCamera\", {\n                error: \"There's no video-input device found!\",\n                errorMessage: \"There's no video-input device found!\"\n              });\n            }\n          }).finally(function () {\n            _this.updateButtonShareCameraStatus(false); // EXPERIMENT:\n\n          });\n        } else {\n          _this.handleGetMediaDevices().then(function (devices) {\n            return devices.some(function (device) {\n              return device.kind === MEDIA_DEVICE_TYPES.VIDEO_INPUT;\n            });\n          }).then(function (hasCompatibleDevice) {\n            if (hasCompatibleDevice) {\n              createVideoTrack(selectedVideoInputDeviceId).then(function (track) {\n                if (track) {\n                  // *: Init SECOND connection to active desktop sharing\n                  _this.initSecondConnection(function () {\n                    // *: Remove desktop track from FIRST connection then move to SECOND connection\n                    setTimeout(function () {\n                      var _isPinnedDesktop = conferenceState.conference.pinnedUser && conferenceState.conference.pinnedUser === jitsiStore.desktopTrack.track.getParticipantId();\n\n                      jitsiStore.conference.removeTrack(jitsiStore.desktopTrack.track).then(function () {\n                        // *: Add desktop track to SECOND connection\n                        jitsiStore._conference.addTrack(jitsiStore.desktopTrack.track).then(function () {\n                          // *: Re-pin\n                          if (_isPinnedDesktop) {\n                            _this.mutateSetPinnedUser(jitsiStore.desktopTrack.track.getParticipantId());\n                          } // *: Active camera sharing\n\n\n                          jitsiStore.conference.addTrack(track).then(function () {\n                            _this.initializeLocalTrackListener(track);\n\n                            _this.set({\n                              isCamera: true,\n                              videoTrack: makeTrackInfo(track)\n                            });\n                          }).catch(function (error) {\n                            track.dispose(); // *: Remove track from webrtc\n\n                            returnError(\"Function: shareCamera\", {\n                              error: error,\n                              errorMessage: errorMessage\n                            });\n                          });\n                        }).catch(function (error) {\n                          jitsiStore.desktopTrack.track.dispose(); // *: Remove track from webrtc\n\n                          _this.set({\n                            isShareScreen: false,\n                            desktopTrack: undefined\n                          }); // *: Remove track from store\n\n\n                          _this.clearSecondConnection(); // *: Clear SECOND connection\n\n\n                          returnError('Function: onCamera', {\n                            error: error,\n                            errorMessage: errorMessage\n                          });\n                        });\n                      }).catch(function (error) {\n                        _this.clearSecondConnection(); // *: Clear SECOND connection\n\n\n                        returnError('Function: onCamera', {\n                          error: error,\n                          errorMessage: errorMessage\n                        });\n                      });\n                    }, 1);\n                  });\n                }\n              });\n            } else {\n              returnError(\"Function: shareCamera\", {\n                error: \"There's no video-input device found!\",\n                errorMessage: \"There's no video-input device found!\"\n              });\n            }\n          }).finally(function () {\n            _this.updateButtonShareCameraStatus(false); // EXPERIMENT:\n\n          });\n        }\n      }\n    };\n\n    _this.offCamera = function () {\n      var _this$props4 = _this.props,\n          jitsiStore = _this$props4.jitsiStore,\n          conferenceState = _this$props4.conferenceState;\n      var errorMessage = 'An error occurred while turning off camera sharing, try again later!';\n\n      if (jitsiStore.isCamera) {\n        _this.updateButtonShareCameraStatus(true); // EXPERIMENT:\n        // Unpin if this track is speaker\n\n\n        if (conferenceState.conference.pinnedUser && conferenceState.conference.pinnedUser === jitsiStore.videoTrack.track.getParticipantId()) {\n          _this.mutateSetPinnedUser(''); // Unpin removed track\n\n        } // *: Remove camera-sharing track from FIRST connection\n\n\n        jitsiStore.videoTrack.track.dispose();\n\n        _this.set({\n          isCamera: false,\n          videoTrack: undefined\n        }); // *: If there's screen-sharing track then move track owner to FIRST connection and destroy SECOND connection\n\n\n        if (!jitsiStore.isShareScreen) {\n          _this.updateButtonShareCameraStatus(false); // EXPERIMENT:\n\n        } else {\n          var _isPinnedDesktop = conferenceState.conference.pinnedUser && conferenceState.conference.pinnedUser === jitsiStore.desktopTrack.track.getParticipantId(); // *: Remove screen-sharing track from SECOND connection then move to FIRST connection\n\n\n          jitsiStore._conference.removeTrack(jitsiStore.desktopTrack.track).then(function () {\n            // *: Destroy SECOND connection\n            _this.clearSecondConnection(); // *: Add screen-sharing track to FIRST connection\n\n\n            jitsiStore.conference.addTrack(jitsiStore.desktopTrack.track).then(function () {\n              // *: Re-pin\n              if (_isPinnedDesktop) {\n                _this.mutateSetPinnedUser(jitsiStore.desktopTrack.track.getParticipantId());\n              }\n            }).catch(function (error) {\n              _this.set({\n                isShareScreen: false,\n                desktopTrack: undefined\n              });\n\n              returnError(\"Function: offCamera\", {\n                error: error,\n                errorMessage: errorMessage\n              });\n            });\n          }).catch(function (error) {\n            returnError(\"Function: offCamera\", {\n              error: error,\n              errorMessage: errorMessage\n            });\n          }).finally(function () {\n            return _this.updateButtonShareCameraStatus(false);\n          }); // EXPERIMENT:\n\n        }\n      }\n    };\n\n    _this.onShareScreen = function () {\n      var jitsiStore = _this.props.jitsiStore;\n      var errorMessage = 'Cannot start screen sharing at the moment, try again later!';\n\n      if (!jitsiStore.isShareScreen && JitsiMeetJS.isDesktopSharingEnabled()) {\n        _this.updateButtonShareCameraStatus(true); // EXPERIMENT:\n\n\n        createDesktopTrack(function () {\n          return _this.updateButtonShareCameraStatus(false);\n        }).then(function (track) {\n          if (track) {\n            // *: If there's no camera-sharing at the moment\n            if (!jitsiStore.isCamera) {\n              jitsiStore.conference.addTrack(track).then(function () {\n                _this.initializeLocalTrackListener(track);\n\n                _this.set({\n                  isShareScreen: true,\n                  desktopTrack: makeTrackInfo(track)\n                });\n              }).catch(function (error) {\n                return returnError(\"Function: onShareScreen\", {\n                  error: error,\n                  errorMessage: errorMessage\n                });\n              });\n            } else {\n              _this.initSecondConnection(function () {\n                jitsiStore._conference.addTrack(track).then(function () {\n                  _this.initializeLocalTrackListener(track);\n\n                  _this.set({\n                    isShareScreen: true,\n                    desktopTrack: makeTrackInfo(track)\n                  });\n                }).catch(function (error) {\n                  _this.clearSecondConnection(); // *: Clear SECOND connection on error\n\n\n                  returnError(\"Function: onShareScreen\", {\n                    error: error,\n                    errorMessage: errorMessage\n                  });\n                });\n              });\n            }\n          }\n        }).finally(function () {\n          return _this.updateButtonShareCameraStatus(false);\n        }); // EXPERIMENT:\n      }\n    };\n\n    _this.offShareScreen = function () {\n      var _this$props5 = _this.props,\n          jitsiStore = _this$props5.jitsiStore,\n          conferenceState = _this$props5.conferenceState;\n\n      if (jitsiStore.isShareScreen) {\n        _this.updateButtonShareCameraStatus(true); // EXPERIMENT:\n        // *: Re-pin\n\n\n        if (conferenceState.conference.pinnedUser && conferenceState.conference.pinnedUser === jitsiStore.desktopTrack.track.getParticipantId()) {\n          _this.mutateSetPinnedUser('');\n        }\n\n        jitsiStore.desktopTrack.track.dispose();\n\n        _this.set({\n          isShareScreen: false,\n          desktopTrack: undefined\n        });\n\n        if (jitsiStore.isCamera) _this.clearSecondConnection();\n\n        _this.updateButtonShareCameraStatus(false); // EXPERIMENT:\n\n      }\n    };\n\n    _this.handleMouseMove = function () {\n      var jitsiStore = _this.props.jitsiStore;\n      clearTimeout(jitsiStore.actionTimeout);\n      var actionTimeout = setTimeout(function () {\n        _this.set({\n          isMouseMove: false\n        });\n      }, 20 * 1000);\n\n      _this.set({\n        actionTimeout: actionTimeout,\n        isMouseMove: true\n      });\n    };\n\n    _this.mutateLeaveConference = function () {\n      return client.mutate({\n        mutation: M_LEAVE_CONFERENCE,\n        variables: {\n          conferenceId: _this.props.conferenceId\n        }\n      }).then(function (_ref16) {\n        var leaveConference = _ref16.data.leaveConference;\n\n        if (leaveConference) {\n          newNotification('Leave conference successfully! Redirecting...', 'info', {\n            dismiss: {\n              duration: 1000,\n              onScreen: true\n            }\n          });\n          setTimeout(function () {\n            _this.props.history.push(routesPath.leave);\n          }, 1000);\n        }\n      }).catch(function (error) {\n        return returnError('Leave Conference', {\n          error: error,\n          errorMessage: 'An error occurred while leaving conference, please try again later!'\n        });\n      });\n    };\n\n    _this.mutateSetPinnedUser = function (id) {\n      return client.mutate({\n        mutation: M_SET_PINNED_USER,\n        variables: {\n          conferenceId: _this.props.conferenceId,\n          type: 'MAIN',\n          userId: id\n        }\n      }).then(function (_ref17) {\n        var setPinnedUser = _ref17.data.setPinnedUser;\n        if (!setPinnedUser) return newNotification('Failed to set pinned user, try again later!');\n\n        _this.props.conferenceState.setSpeakerByUID(id);\n      }).catch(function (error) {\n        return returnError('setPinnedUser', {\n          error: error,\n          errorMessage: 'Failed to set pinned user, try again later!'\n        });\n      });\n    };\n\n    _this.LEAVE = function () {\n      var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref18$disableMutateL = _ref18.disableMutateLeave,\n          disableMutateLeave = _ref18$disableMutateL === void 0 ? false : _ref18$disableMutateL;\n\n      var jitsiStore = _this.props.jitsiStore;\n\n      if (jitsiStore.isShareScreen) {\n        _this.offShareScreen();\n      }\n\n      if (jitsiStore.isCamera) {\n        _this.offCamera();\n      }\n\n      _this.leaveConference().then(function () {\n        _this.disconnect();\n      }).catch(function (_error) {\n        _this.disconnect();\n      });\n\n      if (!disableMutateLeave) {\n        _this.mutateLeaveConference();\n      }\n    };\n\n    _this.getOpenStreamKeyDialog = function () {\n      return _this.openStreamKeyDialog();\n    };\n\n    JitsiMeetJS.init(initOptions);\n    JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.ERROR);\n    _this.connectionOptions = _this.props.server;\n    window.addEventListener('beforeunload', function () {\n      try {\n        _this.props.jitsiStore.connection.disconnect();\n\n        if (_this.props.jitsiStore._connection) _this.props.jitsiStore._connection.disconnect();\n      } catch (_unused) {}\n    });\n    return _this;\n  }\n\n  _createClass(JitsiComponent, [{\n    key: \"componentDidMount\",\n    // *_: End\n    value: function componentDidMount() {\n      this.handleConnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _conferenceState$myIn,\n          _this2 = this;\n\n      var _this$props6 = this.props,\n          jitsiStore = _this$props6.jitsiStore,\n          conferenceState = _this$props6.conferenceState;\n      var profiles = conferenceState === null || conferenceState === void 0 ? void 0 : (_conferenceState$myIn = conferenceState.myInfo) === null || _conferenceState$myIn === void 0 ? void 0 : _conferenceState$myIn.profiles;\n      var isBot = isBotRecord(profiles);\n\n      if (!(jitsiStore.isConnected && jitsiStore.isJoined)) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"main-content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(BounceLoader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1128,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"conference-body\",\n        onMouseMove: this.handleMouseMove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1134,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(LayoutSwitch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1135,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ReturnLayout, {\n        setSpeakerByUID: this.setSpeakerByUID,\n        mutateSetPinnedUser: this.mutateSetPinnedUser,\n        tracksOfThisParticipant: this.tracksOfThisParticipant,\n        doesParticipantHasAudio: this.doesParticipantHasAudio,\n        doesParticipantHasVideo: this.doesParticipantHasVideo,\n        updateRemoteStats: function updateRemoteStats(callback) {\n          return _this2.updateRemoteStats = callback;\n        },\n        clearDraw: this.props.clearDraw,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1137,\n          columnNumber: 9\n        }\n      }), !isBot && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CollaboratePanel, {\n        conferenceId: this.props.conferenceId,\n        doesParticipantHasAudio: this.doesParticipantHasAudio,\n        doesParticipantHasVideo: this.doesParticipantHasVideo,\n        tracksOfThisParticipant: this.tracksOfThisParticipant,\n        mutateSetPinnedUser: this.mutateSetPinnedUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1149,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(StreamKeydialog, {\n        handleOpen: function handleOpen(callback) {\n          return _this2.openStreamKeyDialog = callback;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(ToolBar, {\n        conferenceId: this.props.conferenceId // *: Camera\n        ,\n        onCamera: this.onCamera,\n        offCamera: this.offCamera // *: Audio\n        ,\n        onAudio: this.onAudio,\n        offAudio: this.offAudio // *: Desktop sharing\n        ,\n        onShareScreen: this.onShareScreen,\n        offShareScreen: this.offShareScreen // *: Stream\n        ,\n        openStreamKeyDialog: this.getOpenStreamKeyDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(AudioRender, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1176,\n          columnNumber: 9\n        }\n      }), jitsiStore.isDisconnect && /*#__PURE__*/React.createElement(RecommendReconnect, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1179,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return JitsiComponent;\n}(React.Component), _temp)) || _class) || _class);\nexport default withTranslation()(withRouter(JitsiComponent));","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/index.jsx"],"names":["React","inject","observer","withRouter","BounceLoader","client","M_LEAVE_CONFERENCE","M_SET_PINNED_USER","routesPath","newNotification","returnError","isBotRecord","JitsiMeetJS","initOptions","JitsiConnectionEvents","JitsiConnectionErrors","JitsiConferenceEvents","JitsiMediaDevicesEvents","JitsiConnectionQualityEvents","JitsiTrackEvents","TRANSCRIBER_DISPLAY_NAME","MEDIA_TYPE","VIDEO_TYPE","VIDEO_QUALITY_LEVELS","MEDIA_DEVICE_TYPES","createRnnoiseProcessorPromise","requestUserAudioAccess","requestUserCameraAccess","groupDevicesByKind","createAudioTrack","createVideoTrack","createDesktopTrack","makeTrackInfo","setTrackMuted","LayoutSwitch","ReturnLayout","CollaboratePanel","StreamKeydialog","ToolBar","AudioRender","RecommendReconnect","withTranslation","confirm","JitsiComponent","stores","props","set","state","jitsiStore","setState","handleConnect","connection","JitsiConnection","connectionOptions","connect","addEventListener","CONNECTION_ESTABLISHED","conference","initJitsiConference","conferenceState","code","openBridgeChannel","createVADProcessor","isConnected","join","on","CONFERENCE_JOINED","isJoined","onJoinedConference","CONFERENCE_LEFT","undefined","CONFERENCE_FAILED","onJoinConferenceFailed","CONFERENCE_ERROR","CONNECTION_INTERRUPTED","console","log","KICKED","USER_JOINED","DISPLAY_NAME_CHANGED","USER_LEFT","TRACK_ADDED","TRACK_REMOVED","DOMINANT_SPEAKER_CHANGED","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","mediaDevices","DEVICE_LIST_CHANGED","devices","availableDevices","addCommandListener","value","myUserId","offAudio","isCamera","offCamera","offShareScreen","_conference","i18n","history","LEAVE","disableMutateLeave","mutate","mutation","variables","conferenceId","then","leaveConference","data","Error","catch","error","centered","title","t","content","onOk","push","onCancel","err","CONNECTION_DISCONNECTED","CONNECTION_FAILED","isDisconnect","WRONG_STATE","onConnectFailed","CONNECTION_DROPPED_ERROR","PASSWORD_REQUIRED","SERVER_ERROR","OTHER_ERROR","errorCode","disconnect","setJitsiDisplayName","name","setDisplayName","myInfo","myRole","_id","firstname","lastname","enumerateDevices","length","classifiedDevicesData","userSelectedCameraDevice","videoInput","userSelectedAudioInputDevice","audioInput","userSelectedAudioOutputDevice","audioOutput","setConnectionApi","onAudio","reOrderUserAtFirstPlace","setPinnedMode","setSpeakerByUID","animationIn","leave","initSecondConnection","callback","_connection","_isConnected","_isJoined","clearSecondConnection","isValidUID","id","participants","some","isSecondConnectionId","handleGetMediaDevices","Promise","resolve","errorMessage","onLocalTrackError","track","getType","AUDIO","isAudio","VIDEO","videoType","CAMERA","DESKTOP","isShareScreen","initializeLocalTrackListener","NO_DATA_FROM_SOURCE","LOCAL_TRACK_STOPPED","notThisTrack","participantTracks","filter","mediaType","getId","notThisAudioTrack","participantAudios","thisTrack","find","participantId","getParticipantId","notThisParticipant","p","thisParticipant","tracksOfThisParticipant","videoTrackOfThisParticipant","doesParticipantHasAudio","isMuted","doesParticipantHasVideo","isPinnedMode","setSpeakerTrack","speaker","type","selectParticipant","videoTrack","desktopTrack","participantFound","trackFound","user","displayName","getDisplayName","isHidden","isTranscribing","isDialing","transcriberId","potentialTranscriberIds","presence","getStatus","role","getRole","pinnedUser","isTerminating","offsetRemoteTracks","isLocal","TRACK_MUTE_CHANGED","muted","TRACK_VIDEOTYPE_CHANGED","dispose","videoStarted","connectionStats","nextVR","connectionQuality","LOW","STANDARD","HIGH","PERFECT","videoResolutionFromJVB","setReceiverVideoConstraint","stats","updateRemoteStats","updateButtonShareAudioStatus","boolean","isShareAudioInProcess","audioTrack","selectedAudioInputDeviceId","deviceId","device","kind","AUDIO_INPUT","hasCompatibleDevice","addTrack","finally","setTimeout","updateButtonShareCameraStatus","isShareCameraInProcess","onCamera","selectedVideoInputDeviceId","userSelectedVideoInputDevice","VIDEO_INPUT","_isPinnedDesktop","removeTrack","mutateSetPinnedUser","onShareScreen","isDesktopSharingEnabled","handleMouseMove","clearTimeout","actionTimeout","isMouseMove","mutateLeaveConference","dismiss","duration","onScreen","userId","setPinnedUser","_error","getOpenStreamKeyDialog","openStreamKeyDialog","init","setLogLevel","logLevels","ERROR","server","window","profiles","isBot","clearDraw","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withRouter } from 'react-router-dom'\nimport './index.less'\n\nimport { BounceLoader } from '@components'\nimport { client, M_LEAVE_CONFERENCE, M_SET_PINNED_USER } from '@graphql'\nimport { routesPath } from '@router'\nimport { newNotification, returnError, isBotRecord } from '@utils'\nimport { Modal } from 'antd'\n\nimport {\n  JitsiMeetJS,\n  initOptions,\n  JitsiConnectionEvents,\n  JitsiConnectionErrors,\n  JitsiConferenceEvents,\n  JitsiMediaDevicesEvents,\n  JitsiConnectionQualityEvents,\n  JitsiTrackEvents\n} from './core'\n\nimport { TRANSCRIBER_DISPLAY_NAME, MEDIA_TYPE, VIDEO_TYPE, VIDEO_QUALITY_LEVELS, MEDIA_DEVICE_TYPES } from './constants'\nimport { createRnnoiseProcessorPromise } from '../../../features/rnnoise'\nimport { requestUserAudioAccess, requestUserCameraAccess, groupDevicesByKind } from './devices'\nimport { createAudioTrack, createVideoTrack, createDesktopTrack, makeTrackInfo, setTrackMuted } from './media'\n\nimport LayoutSwitch from './components/LayoutSwitch'\nimport ReturnLayout from './layouts/ReturnLayout'\nimport CollaboratePanel from '../collab-panel'\nimport StreamKeydialog from '../modals/StreamKeyDialog'\nimport ToolBar from './ToolBar'\nimport AudioRender from './AudioRender'\nimport RecommendReconnect from './components/RecommendReconnect'\nimport { withTranslation } from 'react-i18next'\n\nconst { confirm } = Modal\n\n@inject(({ stores }) => stores)\n@observer\nclass JitsiComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    // NOTE: Jitsi init\n    JitsiMeetJS.init(initOptions)\n    JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.ERROR)\n\n    this.connectionOptions = this.props.server\n\n    window.addEventListener('beforeunload', () => {\n      try {\n        this.props.jitsiStore.connection.disconnect()\n        if (this.props.jitsiStore._connection) this.props.jitsiStore._connection.disconnect()\n      } catch { }\n    })\n  }\n\n  set = state => {\n    this.props.jitsiStore.setState(state)\n  }\n\n  // *_:\n  // *_: Connection & Conference\n  // *_:\n\n  // *__: Connection\n  handleConnect = () => {\n    // Init connection\n    const connection = new JitsiMeetJS.JitsiConnection(null, null, this.connectionOptions)\n    this.set({ connection })\n\n    connection.connect()\n\n    // *: Success\n    connection.addEventListener(JitsiConnectionEvents.CONNECTION_ESTABLISHED, () => {\n      const conference = connection.initJitsiConference(this.props.conferenceState.conference.code, {\n        openBridgeChannel: true,\n        createVADProcessor: createRnnoiseProcessorPromise\n      })\n      this.set({ isConnected: true, conference })\n\n      conference.join()\n\n      // *: Join status\n      conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, () => {\n        this.set({ isJoined: true })\n        this.onJoinedConference()\n      })\n      conference.on(JitsiConferenceEvents.CONFERENCE_LEFT, () => {\n        this.set({ isJoined: false, conference: undefined })\n      })\n\n      // *: Error\n      conference.on(JitsiConferenceEvents.CONFERENCE_FAILED, () => {\n        this.onJoinConferenceFailed(JitsiConferenceEvents.CONFERENCE_FAILED)\n      })\n      conference.on(JitsiConferenceEvents.CONFERENCE_ERROR, () => {\n        this.onJoinConferenceFailed(JitsiConferenceEvents.CONFERENCE_ERROR)\n      })\n      conference.on(JitsiConferenceEvents.CONNECTION_INTERRUPTED, () => {\n        console.log('p2p cancel: CONNECTION_INTERRUPTED')\n        // this.onJoinConferenceFailed(JitsiConferenceEvents.CONNECTION_INTERRUPTED)\n      })\n\n      // *: Get kicked\n      conference.on(JitsiConferenceEvents.KICKED, () => this.onJoinConferenceFailed('KICKED'))\n\n      // *: Participants\n      conference.on(JitsiConferenceEvents.USER_JOINED, this.USER_JOINED)\n      conference.on(JitsiConferenceEvents.DISPLAY_NAME_CHANGED, this.DISPLAY_NAME_CHANGED)\n      conference.on(JitsiConferenceEvents.USER_LEFT, this.USER_LEFT)\n      conference.on(JitsiConferenceEvents.TRACK_ADDED, this.TRACK_ADDED)\n      conference.on(JitsiConferenceEvents.TRACK_REMOVED, this.TRACK_REMOVED)\n\n      // *: Speaker\n      conference.on(JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, this.DOMINANT_SPEAKER_CHANGED)\n      // conference.on(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, this.TRACK_AUDIO_LEVEL_CHANGED)\n\n      // *: Connection Statistics\n      conference.on(JitsiConnectionQualityEvents.LOCAL_STATS_UPDATED, this.LOCAL_STATS_UPDATED)\n      conference.on(JitsiConnectionQualityEvents.REMOTE_STATS_UPDATED, this.REMOTE_STATS_UPDATED)\n\n      // *: Media devices list change\n      JitsiMeetJS.mediaDevices.addEventListener(JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED, devices => {\n        this.set({ availableDevices: groupDevicesByKind(devices) })\n      })\n\n      // *: Remotely deactive mic\n      conference.addCommandListener('REMOTE_MIC_OFF', ({ value }) => {\n        if (value === conference.myUserId()) this.offAudio()\n      })\n\n      // *: Remotely deactive video\n      conference.addCommandListener('REMOTE_VIDEO_OFF', ({ value }) => {\n        const { jitsiStore } = this.props\n        if (value === conference.myUserId()) {\n          if (jitsiStore.isCamera) {\n            this.offCamera()\n          } else {\n            this.offShareScreen()\n          }\n        }\n\n        if (jitsiStore._conference && value === jitsiStore._conference.myUserId()) {\n          this.offShareScreen()\n        }\n      })\n\n      // *: Remotely kick user\n      conference.addCommandListener('REMOTE_KICK_USER', ({ value }) => {\n        try {\n          const { jitsiStore, i18n, history } = this.props\n          if (conference.myUserId() === value || jitsiStore._conference?.myUserId() === value) {\n\n            this.LEAVE({ disableMutateLeave: true })\n\n            client\n              .mutate({\n                mutation: M_LEAVE_CONFERENCE,\n                variables: { conferenceId: this.props.conferenceId }\n              })\n              .then(({ data: { leaveConference } }) => {\n                if (!leaveConference) {\n                  throw new Error('error leave room')\n                }\n              })\n              .catch(error => console.log(error))\n\n            confirm({\n              centered: true,\n              title: i18n.t('conference.notification'),\n              content: i18n.t('conference.noti_kicked_out'),\n              onOk() {\n                history.push('/leave')\n              },\n              onCancel() {\n                history.push('/leave')\n              }\n            })\n\n          }\n        } catch (err) {\n          console.log(err)\n        }\n      })\n    })\n\n\n    connection.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED, () => {\n\n    })\n\n    // *: Failure\n    connection.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED, () => {\n      this.set({ isDisconnect: true })\n      // this.onConnectFailed(JitsiConnectionEvents.CONNECTION_FAILED)\n    })\n\n    connection.addEventListener(JitsiConnectionEvents.WRONG_STATE, () =>\n      this.onConnectFailed(JitsiConnectionEvents.WRONG_STATE)\n    )\n\n    // *: Errors\n    connection.addEventListener(JitsiConnectionErrors.CONNECTION_DROPPED_ERROR, () =>\n      this.onConnectFailed(JitsiConnectionErrors.CONNECTION_DROPPED_ERROR)\n    )\n    connection.addEventListener(JitsiConnectionErrors.PASSWORD_REQUIRED, () =>\n      this.onConnectFailed(JitsiConnectionErrors.PASSWORD_REQUIRED)\n    )\n    connection.addEventListener(JitsiConnectionErrors.SERVER_ERROR, () =>\n      this.onConnectFailed(JitsiConnectionErrors.SERVER_ERROR)\n    )\n    connection.addEventListener(JitsiConnectionErrors.OTHER_ERROR, () =>\n      this.onConnectFailed(JitsiConnectionErrors.OTHER_ERROR)\n    )\n  }\n\n  onConnectFailed = errorCode => {\n    console.log(errorCode)\n    this.set({ isConnected: false })\n\n  }\n\n  disconnect = () => this.props.jitsiStore.connection.disconnect()\n\n  // *__: Conference\n\n  setJitsiDisplayName = name => this.props.jitsiStore.conference.setDisplayName(name)\n\n  onJoinedConference = () => {\n    const { conferenceState } = this.props\n    const { myInfo, myRole } = conferenceState\n\n    this.setJitsiDisplayName(`${myInfo._id}|${myInfo.firstname} ${myInfo.lastname}|${myRole}`)\n\n    // *: Get user's media devices\n    JitsiMeetJS.mediaDevices.enumerateDevices(devices => {\n      if (devices.length) {\n        const classifiedDevicesData = groupDevicesByKind(devices)\n\n        this.set({\n          availableDevices: classifiedDevicesData,\n          userSelectedCameraDevice: classifiedDevicesData.videoInput[0],\n          userSelectedAudioInputDevice: classifiedDevicesData.audioInput[0],\n          userSelectedAudioOutputDevice: classifiedDevicesData.audioOutput[0]\n        })\n      }\n    })\n\n    // *: Save api to store\n    conferenceState.setConnectionApi({\n      LEAVE: this.LEAVE,\n      onAudio: this.onAudio,\n      offAudio: this.offAudio,\n      reOrderUserAtFirstPlace: this.reOrderUserAtFirstPlace,\n      setPinnedMode: this.setPinnedMode,\n      setSpeakerByUID: this.setSpeakerByUID,\n      setJitsiDisplayName: this.setJitsiDisplayName\n    })\n\n    // *: request for audio and camera permisson\n    requestUserAudioAccess()\n    requestUserCameraAccess()\n\n    return newNotification('Join conference successfully ', 'success', {\n      animationIn: ['animated', 'fadeIn']\n    })\n  }\n\n  // STABLE:\n  onJoinConferenceFailed = errorCode => {\n    this.set({ isJoined: false })\n  }\n\n\n  leaveConference = () => this.props.jitsiStore.conference.leave()\n\n  // *__: Second Connection\n\n  // STABLE:\n  initSecondConnection = (callback = () => { }) => {\n    // *: Initialize second connection\n    const _connection = new JitsiMeetJS.JitsiConnection(null, null, this.connectionOptions)\n    this.set({ _connection })\n\n    _connection.connect() // Connect to Jitsi\n\n    // *___: Second connection CONNECTED successfully\n    _connection.addEventListener(JitsiConnectionEvents.CONNECTION_ESTABLISHED, () => {\n      // *: Initialize conference\n      const _conference = _connection.initJitsiConference(this.props.conferenceState.conference.code, {\n        openBridgeChannel: true\n      })\n      this.set({ _isConnected: true, _conference })\n\n      _conference.join() // Join conference\n\n      const { myInfo, myRole } = this.props.conferenceState\n\n      // *: Second connection JOINED\n      _conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, () => {\n        this.set({ _isJoined: true })\n        _conference.setDisplayName(`${myInfo._id}|${myInfo.firstname} ${myInfo.lastname}|${myRole}`)\n\n        callback()\n      })\n\n      // *: Second connection LEFT\n      _conference.on(JitsiConferenceEvents.CONFERENCE_LEFT, () => {\n        this.set({ _isJoined: false, _conference: undefined })\n      })\n    })\n\n    // *___: Second connection DISCONNECTED successfully\n    _connection.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED, () => {\n      this.set({ _isConnected: false, _connection: undefined })\n    })\n  }\n\n  // STABLE:\n  clearSecondConnection = () => {\n    const { jitsiStore } = this.props\n\n    if (jitsiStore._conference) {\n      jitsiStore._conference\n        .leave()\n        .then(() => jitsiStore._connection.disconnect())\n        .catch(err => console.log(err))\n    }\n  }\n\n  // *_:\n  // *_: Assistive functions\n  // *_:\n\n  // *: Check if uID valid in conference\n  isValidUID = id => {\n    const { jitsiStore } = this.props\n\n    return (\n      jitsiStore.conference.myUserId() === id ||\n      (jitsiStore._conference && jitsiStore._conference.myUserId() === id) ||\n      jitsiStore.participants.some(t => t.id === id)\n    )\n  }\n\n  // *: Check if input id same as _conference.myUserId()\n  isSecondConnectionId = id => {\n    return this.props.jitsiStore._conference && this.props.jitsiStore._conference.myUserId() === id\n  }\n\n  // *__: Local\n\n  // STABLE:\n  handleGetMediaDevices = () => {\n    return new Promise(resolve => {\n      try {\n        JitsiMeetJS.mediaDevices.enumerateDevices(devices => resolve(devices))\n      } catch (error) {\n        returnError('Function: GetMediaDevices', { error, errorMessage: 'Failed to get media devices list' })\n        resolve([])\n      }\n    })\n  }\n\n  // STABLE:\n  onLocalTrackError = track => {\n    const { jitsiStore } = this.props\n\n    switch (track.getType()) {\n      case MEDIA_TYPE.AUDIO: {\n        if (jitsiStore.isAudio) return this.offAudio()\n        break\n      }\n\n      case MEDIA_TYPE.VIDEO: {\n        if (track.videoType === VIDEO_TYPE.CAMERA && jitsiStore.isCamera) return this.offCamera()\n        else if (track.videoType === VIDEO_TYPE.DESKTOP && jitsiStore.isShareScreen) return this.offShareScreen()\n        break\n      }\n\n      default: {\n        break\n      }\n    }\n  }\n\n  // STABLE:\n  initializeLocalTrackListener = track => {\n    // *: No data from source\n    track.on(JitsiTrackEvents.NO_DATA_FROM_SOURCE, () => {\n      this.onLocalTrackError(track)\n    })\n\n    // *: Local Track stopped\n    track.on(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n      this.onLocalTrackError(track)\n    })\n  }\n\n  // *__: Participant\n\n  // *___: Track\n\n  // *:\n  notThisTrack = track => {\n    return this.props.jitsiStore.participantTracks.filter(({ id, mediaType }) => {\n      return !(id === track.getId() && mediaType === track.getType())\n    })\n  }\n\n  notThisAudioTrack = track => {\n    return this.props.jitsiStore.participantAudios.filter(({ id }) => {\n      return id !== track.getId()\n    })\n  }\n\n  // *:\n  thisTrack = track => {\n    return this.props.jitsiStore.participantTracks.find(({ id, participantId, mediaType }) => {\n      return id === track.getId() && participantId === track.getParticipantId() && mediaType === track.getType()\n    })\n  }\n\n  // *___: Participant\n\n  notThisParticipant = id => this.props.jitsiStore.participants.filter(p => p.id !== id)\n\n  thisParticipant = id => this.props.jitsiStore.participants.find(p => p.id === id)\n\n  // *: Get all media track of selected participant\n  tracksOfThisParticipant = id =>\n    this.props.jitsiStore.participantTracks.filter(({ participantId }) => participantId === id)\n\n  // *: Get video tracks of selected participant\n  videoTrackOfThisParticipant = id =>\n    this.props.jitsiStore.participantTracks.find(\n      ({ participantId, mediaType }) => participantId === id && mediaType === MEDIA_TYPE.VIDEO\n    )\n\n  // *: Return true if selected participant has audio track\n  doesParticipantHasAudio = id =>\n    this.props.jitsiStore.participantTracks.some(\n      ({ participantId, mediaType, track }) =>\n        participantId === id && mediaType === MEDIA_TYPE.AUDIO && !track.isMuted()\n    )\n\n  // *: Return true if selected participant has video track\n  doesParticipantHasVideo = id =>\n    this.props.jitsiStore.participantTracks.some(\n      ({ participantId, mediaType }) => participantId === id && mediaType === MEDIA_TYPE.VIDEO\n    )\n\n  // *__: Speaker\n\n  // STABLE:\n  setPinnedMode = id => this.set({ isPinnedMode: !!id })\n\n  // STABLE:\n  reOrderUserAtFirstPlace = id => {\n    // *: Do nothing if incoming id is from local\n    if (this.isSecondConnectionId(id) || this.props.jitsiStore.conference.myUserId() === id) return\n\n    if (this.isValidUID(id)) {\n      this.set({ participants: [this.thisParticipant(id), ...this.notThisParticipant(id)] })\n    }\n  }\n\n  // STABLE:\n  setSpeakerTrack = (track, participantId) => {\n    this.set({ speaker: { id: track.getId(), type: track.getType(), participantId, track } })\n\n    // *: Elects the participant with the given id to be the selected participant in order to receive higher video quality (if simulcast is enabled).\n    try {\n      this.props.jitsiStore.conference.selectParticipant(participantId)\n    } catch (error) {\n      returnError('Function: setSpeakerTrack', {\n        error,\n        errorMessage: 'Failed to upgrade video resolution for selected participant.'\n      })\n    }\n  }\n\n  // STABLE:\n  setSpeakerByUID = id => {\n    const { jitsiStore } = this.props\n\n    // *: Ignore if incoming track same as current\n    if (jitsiStore.speaker && jitsiStore.speaker.participantId === id) return\n\n    if (jitsiStore.conference.myUserId() === id) {\n      if (jitsiStore.videoTrack) this.setSpeakerTrack(jitsiStore.videoTrack.track, id)\n      else if (jitsiStore.desktopTrack) this.setSpeakerTrack(jitsiStore.desktopTrack.track, id)\n    } else if (this.isSecondConnectionId(id)) {\n      if (jitsiStore.desktopTrack) this.setSpeakerTrack(jitsiStore.desktopTrack.track, id)\n    } else {\n      const participantFound = this.thisParticipant(id)\n\n      if (participantFound) {\n        const trackFound = this.videoTrackOfThisParticipant(id)\n\n        if (trackFound) this.setSpeakerTrack(trackFound.track, id)\n      }\n    }\n  }\n\n  // *_: Functions that triggered by event listener\n\n  // *__: Participant\n\n  // STABLE:\n  USER_JOINED = (id, user) => {\n    // *: Ignore second connection activities\n    if (this.isSecondConnectionId(id)) return\n\n    const { conferenceState, jitsiStore } = this.props\n\n    const displayName = user.getDisplayName()\n\n    if (user.isHidden()) {\n      // *: Hidden user joined\n      if (displayName && displayName === TRANSCRIBER_DISPLAY_NAME) {\n        this.set({ isTranscribing: true, isDialing: false, transcriberId: id })\n      } else {\n        this.set({ potentialTranscriberIds: [...jitsiStore.potentialTranscriberIds, id] })\n      }\n    } else {\n      // *: Normal user joined\n      this.set({\n        participants: [\n          ...jitsiStore.participants,\n          {\n            id,\n            user,\n            displayName,\n            presence: user.getStatus(),\n            role: user.getRole()\n          }\n        ]\n      })\n    }\n\n    if (conferenceState.conference && conferenceState.conference.pinnedUser === id) {\n      this.setPinnedMode(id)\n    }\n  }\n\n  // STABLE:\n  DISPLAY_NAME_CHANGED = (id, displayName) => {\n    // *: Ignore second connection activities\n    if (this.isSecondConnectionId(id)) return\n\n    this.set({\n      participants: [...this.notThisParticipant(id), { ...this.thisParticipant(id), displayName }]\n    })\n  }\n\n  // STABLE:\n  USER_LEFT = async (id, user) => {\n    // *: Ignore second connection activities\n    if (this.isSecondConnectionId(id)) return\n\n    if (user.isHidden()) {\n      this.set({\n        isTerminating: false,\n        isTranscribing: false,\n        transcriberId: null,\n        potentialTranscriberIds: []\n      })\n    } else {\n      const participants = this.notThisParticipant(id)\n\n      this.set({\n        participants,\n        participantTracks: this.props.jitsiStore.participantTracks.filter(({ participantId }) => participantId !== id),\n        participantAudios: this.props.jitsiStore.participantAudios.filter(({ participantId }) => participantId !== id)\n      })\n\n      if (participants.length <= 4) {\n        this.props.conferenceState.setState({ offsetRemoteTracks: 0 })\n      }\n    }\n  }\n\n  // *__: Remote Tracks\n\n  TRACK_ADDED = track => {\n    // *: Ignore second connection activities\n    if (this.isSecondConnectionId(track.getParticipantId())) return\n\n    if (!track.isLocal()) {\n      track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, () => {\n        this.set({\n          participantTracks: [...this.notThisTrack(track), { ...this.thisTrack(track), muted: track.isMuted() }]\n        })\n      })\n\n      track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, videoType => {\n        this.set({\n          participantTracks: [...this.notThisTrack(track), { ...this.thisTrack(track), videoType }]\n        })\n      })\n\n      track.on(JitsiTrackEvents.NO_DATA_FROM_SOURCE, () => {\n        track.dispose()\n      })\n\n      this.set({\n        participantTracks: [\n          ...this.notThisTrack(track),\n          {\n            id: track.getId(),\n            track,\n            participantId: track.getParticipantId(),\n            mediaType: track.getType(),\n            videoType: track.videoType,\n            videoStarted: false,\n            muted: track.isMuted()\n          }\n        ]\n      })\n\n      if (track.getType() === MEDIA_TYPE.AUDIO) {\n        this.set({\n          participantAudios: [\n            ...this.notThisAudioTrack(track),\n            {\n              id: track.getId(),\n              track,\n              participantId: track.getParticipantId(),\n              mediaType: track.getType(),\n              videoType: track.videoType,\n              videoStarted: false,\n              muted: track.isMuted()\n            }\n          ]\n        })\n      }\n\n      const { conference } = this.props.conferenceState\n\n      if (this.props.jitsiStore.isPinnedMode && track.getParticipantId() === conference.pinnedUser) {\n        this.setSpeakerByUID(conference.pinnedUser)\n        this.reOrderUserAtFirstPlace(conference.pinnedUser)\n      }\n    }\n  }\n\n  // FIXME:\n  TRACK_REMOVED = track => {\n    const { jitsiStore } = this.props\n\n    if (jitsiStore.speaker && jitsiStore.speaker.track.getId() === track.getId()) {\n      this.set({ speaker: null, isPinnedMode: false })\n    }\n\n    // *: Ignore second connection activities\n    if (this.isSecondConnectionId(track.getParticipantId())) return\n\n    if (!track.isLocal()) {\n      this.set({ participantTracks: this.notThisTrack(track) })\n      if (track.getType() === MEDIA_TYPE.AUDIO) {\n        this.set({ participantAudios: this.notThisAudioTrack(track) })\n      }\n    }\n  }\n\n  // STABLE:\n  DOMINANT_SPEAKER_CHANGED = id => {\n    // *: Ignore second connection activities\n    if (this.isSecondConnectionId(id)) return\n\n    // *: Do not set my self as main speaker\n    if (this.props.jitsiStore.conference.myUserId() === id) return\n\n    // *: Only enable this feature on pinned mode\n    if (!this.props.jitsiStore.isPinnedMode) {\n      this.setSpeakerByUID(id)\n    }\n  }\n\n  // *__: Connection Statistics\n\n  // STABLE:\n  LOCAL_STATS_UPDATED = connectionStats => {\n    const { jitsiStore } = this.props\n\n    if (connectionStats) {\n      let nextVR = 1080\n\n      if (connectionStats.connectionQuality <= 25) {\n        nextVR = VIDEO_QUALITY_LEVELS.LOW\n      } else if (connectionStats.connectionQuality <= 50) {\n        nextVR = VIDEO_QUALITY_LEVELS.STANDARD\n      } else if (connectionStats.connectionQuality <= 80) {\n        nextVR = VIDEO_QUALITY_LEVELS.HIGH\n      } else if (connectionStats.connectionQuality > 80) {\n        nextVR = VIDEO_QUALITY_LEVELS.PERFECT\n      }\n\n      if (nextVR !== jitsiStore.videoResolutionFromJVB) {\n        jitsiStore.conference.setReceiverVideoConstraint(nextVR)\n      }\n\n      this.set({ connectionStats, videoResolutionFromJVB: nextVR })\n    }\n  }\n\n  // STABLE:\n  REMOTE_STATS_UPDATED = (id, stats) => {\n    this.updateRemoteStats(id, stats)\n  }\n\n  // *_: User's Media control\n\n  // *__: Audio\n\n  updateButtonShareAudioStatus = boolean => {\n    this.set({ isShareAudioInProcess: boolean })\n  }\n\n  // STABLE:\n  onAudio = () => {\n    const { jitsiStore } = this.props\n\n    const errorMessage = `An error occurred while sharing audio, please try again later!`\n\n    if (!jitsiStore.audioTrack) {\n      this.updateButtonShareAudioStatus(true)\n\n      const selectedAudioInputDeviceId =\n        (jitsiStore.userSelectedAudioInputDevice && jitsiStore.userSelectedAudioInputDevice.deviceId) || undefined\n\n      // *: Get media devices list\n      this.handleGetMediaDevices()\n        .then(devices => devices.some(device => device.kind === MEDIA_DEVICE_TYPES.AUDIO_INPUT))\n        .then(hasCompatibleDevice => {\n          if (hasCompatibleDevice) {\n            createAudioTrack(selectedAudioInputDeviceId)\n              .then(track => {\n                if (track) {\n                  jitsiStore.conference\n                    .addTrack(track)\n                    .then(() => {\n                      this.initializeLocalTrackListener(track)\n                      this.set({ isAudio: true, audioTrack: makeTrackInfo(track) })\n                    })\n                    .catch(error => {\n                      track.dispose() // *: Remove track from webrtc\n                      returnError(`Function: onAudio`, { error, errorMessage })\n                    })\n                }\n              })\n              .finally(() => this.updateButtonShareAudioStatus(false)) // EXPERIMENT:\n          } else {\n            this.updateButtonShareAudioStatus(false) // EXPERIMENT:\n            returnError(`Function: onAudio`, {\n              error: `There's no audio-input device found!`,\n              errorMessage: `There's no audio-input device found!`\n            })\n          }\n        })\n    } else {\n      if (!jitsiStore.isAudio) {\n        this.updateButtonShareAudioStatus(true)\n        setTrackMuted(jitsiStore.audioTrack.track, false)\n        this.set({ isAudio: true })\n        this.updateButtonShareAudioStatus(false) // EXPERIMENT:\n      }\n    }\n  }\n\n  // STABLE:\n  offAudio = () => {\n    setTimeout(() => {\n\n      const { jitsiStore } = this.props\n\n      if (jitsiStore.isAudio) {\n        this.updateButtonShareAudioStatus(true) // EXPERIMENT:\n        if (jitsiStore.audioTrack) {\n\n          setTrackMuted(jitsiStore.audioTrack.track, true)\n\n          this.set({ isAudio: false })\n\n        }\n        this.updateButtonShareAudioStatus(false) // EXPERIMENT:\n      }\n    }, 1)\n  }\n\n  // *__: Camera\n\n  updateButtonShareCameraStatus = boolean => {\n    this.setState({ isShareCameraInProcess: boolean })\n  }\n\n  // STABLE:\n  onCamera = () => {\n    const { jitsiStore, conferenceState } = this.props\n\n    if (!jitsiStore.isCamera) {\n      this.updateButtonShareCameraStatus(true) // EXPERIMENT:\n\n      const selectedVideoInputDeviceId =\n        (jitsiStore.userSelectedVideoInputDevice && jitsiStore.userSelectedVideoInputDevice.deviceId) || undefined\n\n      const errorMessage = `An error occurred while sharing camera, try again later!`\n\n      // *: Normal active\n      if (!jitsiStore.isShareScreen) {\n        this.handleGetMediaDevices()\n          .then(devices => devices.some(device => device.kind === MEDIA_DEVICE_TYPES.VIDEO_INPUT))\n          .then(hasCompatibleDevice => {\n            if (hasCompatibleDevice) {\n              createVideoTrack(selectedVideoInputDeviceId).then(track => {\n                if (track) {\n                  jitsiStore.conference\n                    .addTrack(track)\n                    .then(() => {\n                      this.initializeLocalTrackListener(track)\n                      this.set({ isCamera: true, videoTrack: makeTrackInfo(track) })\n                    })\n                    .catch(error => {\n                      track.dispose() // *: Remove track if error\n                      return returnError(`Function: shareCamera`, { error, errorMessage })\n                    })\n                }\n              })\n            } else {\n              return returnError(`Function: shareCamera`, {\n                error: `There's no video-input device found!`,\n                errorMessage: `There's no video-input device found!`\n              })\n            }\n          })\n          .finally(() => {\n            this.updateButtonShareCameraStatus(false) // EXPERIMENT:\n          })\n      } else {\n        this.handleGetMediaDevices()\n          .then(devices => devices.some(device => device.kind === MEDIA_DEVICE_TYPES.VIDEO_INPUT))\n          .then(hasCompatibleDevice => {\n            if (hasCompatibleDevice) {\n              createVideoTrack(selectedVideoInputDeviceId).then(track => {\n                if (track) {\n                  // *: Init SECOND connection to active desktop sharing\n                  this.initSecondConnection(() => {\n                    // *: Remove desktop track from FIRST connection then move to SECOND connection\n                    setTimeout(() => {\n                      const _isPinnedDesktop = conferenceState.conference.pinnedUser && conferenceState.conference.pinnedUser === jitsiStore.desktopTrack.track.getParticipantId()\n                      jitsiStore.conference\n                        .removeTrack(jitsiStore.desktopTrack.track)\n                        .then(() => {\n\n                          // *: Add desktop track to SECOND connection\n                          jitsiStore._conference\n                            .addTrack(jitsiStore.desktopTrack.track)\n                            .then(() => {\n\n                              // *: Re-pin\n                              if (_isPinnedDesktop) {\n                                this.mutateSetPinnedUser(jitsiStore.desktopTrack.track.getParticipantId())\n                              }\n\n                              // *: Active camera sharing\n                              jitsiStore.conference\n                                .addTrack(track)\n                                .then(() => {\n                                  this.initializeLocalTrackListener(track)\n                                  this.set({ isCamera: true, videoTrack: makeTrackInfo(track) })\n                                })\n                                .catch(error => {\n                                  track.dispose() // *: Remove track from webrtc\n                                  returnError(`Function: shareCamera`, { error, errorMessage })\n                                })\n                            })\n                            .catch(error => {\n                              jitsiStore.desktopTrack.track.dispose() // *: Remove track from webrtc\n                              this.set({ isShareScreen: false, desktopTrack: undefined }) // *: Remove track from store\n                              this.clearSecondConnection() // *: Clear SECOND connection\n                              returnError('Function: onCamera', { error, errorMessage })\n                            })\n                        })\n                        .catch(error => {\n                          this.clearSecondConnection() // *: Clear SECOND connection\n                          returnError('Function: onCamera', { error, errorMessage })\n                        })\n                    }, 1)\n                  })\n                }\n              })\n            } else {\n              returnError(`Function: shareCamera`, {\n                error: `There's no video-input device found!`,\n                errorMessage: `There's no video-input device found!`\n              })\n            }\n          })\n          .finally(() => {\n            this.updateButtonShareCameraStatus(false) // EXPERIMENT:\n          })\n      }\n    }\n  }\n\n  // STABLE:\n  offCamera = () => {\n    const { jitsiStore, conferenceState } = this.props\n\n    const errorMessage = 'An error occurred while turning off camera sharing, try again later!'\n\n    if (jitsiStore.isCamera) {\n      this.updateButtonShareCameraStatus(true) // EXPERIMENT:\n      // Unpin if this track is speaker\n      if (\n        conferenceState.conference.pinnedUser &&\n        conferenceState.conference.pinnedUser === jitsiStore.videoTrack.track.getParticipantId()\n      ) {\n        this.mutateSetPinnedUser('') // Unpin removed track\n      }\n\n      // *: Remove camera-sharing track from FIRST connection\n      jitsiStore.videoTrack.track.dispose()\n\n      this.set({ isCamera: false, videoTrack: undefined })\n\n      // *: If there's screen-sharing track then move track owner to FIRST connection and destroy SECOND connection\n      if (!jitsiStore.isShareScreen) {\n        this.updateButtonShareCameraStatus(false) // EXPERIMENT:\n      } else {\n\n        const _isPinnedDesktop = conferenceState.conference.pinnedUser && conferenceState.conference.pinnedUser === jitsiStore.desktopTrack.track.getParticipantId()\n\n        // *: Remove screen-sharing track from SECOND connection then move to FIRST connection\n        jitsiStore._conference\n          .removeTrack(jitsiStore.desktopTrack.track)\n          .then(() => {\n            // *: Destroy SECOND connection\n            this.clearSecondConnection()\n\n            // *: Add screen-sharing track to FIRST connection\n            jitsiStore.conference\n              .addTrack(jitsiStore.desktopTrack.track)\n              .then(() => {\n                // *: Re-pin\n                if (_isPinnedDesktop) {\n                  this.mutateSetPinnedUser(jitsiStore.desktopTrack.track.getParticipantId())\n                }\n              })\n              .catch(error => {\n                this.set({ isShareScreen: false, desktopTrack: undefined })\n                returnError(`Function: offCamera`, { error, errorMessage })\n              })\n          })\n          .catch(error => {\n            returnError(`Function: offCamera`, { error, errorMessage })\n          })\n          .finally(() => this.updateButtonShareCameraStatus(false)) // EXPERIMENT:\n      }\n    }\n  }\n\n  // *__: Screen\n\n  // STABLE:\n  onShareScreen = () => {\n    const { jitsiStore } = this.props\n\n    const errorMessage = 'Cannot start screen sharing at the moment, try again later!'\n\n    if (!jitsiStore.isShareScreen && JitsiMeetJS.isDesktopSharingEnabled()) {\n      this.updateButtonShareCameraStatus(true) // EXPERIMENT:\n\n      createDesktopTrack(() => this.updateButtonShareCameraStatus(false))\n        .then(track => {\n          if (track) {\n            // *: If there's no camera-sharing at the moment\n            if (!jitsiStore.isCamera) {\n              jitsiStore.conference\n                .addTrack(track)\n                .then(() => {\n                  this.initializeLocalTrackListener(track)\n                  this.set({ isShareScreen: true, desktopTrack: makeTrackInfo(track) })\n                })\n                .catch(error => returnError(`Function: onShareScreen`, { error, errorMessage }))\n            } else {\n              this.initSecondConnection(() => {\n                jitsiStore._conference\n                  .addTrack(track)\n                  .then(() => {\n                    this.initializeLocalTrackListener(track)\n                    this.set({ isShareScreen: true, desktopTrack: makeTrackInfo(track) })\n                  })\n                  .catch(error => {\n                    this.clearSecondConnection() // *: Clear SECOND connection on error\n                    returnError(`Function: onShareScreen`, { error, errorMessage })\n                  })\n              })\n            }\n          }\n        })\n        .finally(() => this.updateButtonShareCameraStatus(false)) // EXPERIMENT:\n    }\n  }\n\n  // STABLE:\n  offShareScreen = () => {\n    const { jitsiStore, conferenceState } = this.props\n\n    if (jitsiStore.isShareScreen) {\n      this.updateButtonShareCameraStatus(true) // EXPERIMENT:\n\n      // *: Re-pin\n      if (\n        conferenceState.conference.pinnedUser &&\n        conferenceState.conference.pinnedUser === jitsiStore.desktopTrack.track.getParticipantId()\n      ) {\n        this.mutateSetPinnedUser('')\n      }\n\n      jitsiStore.desktopTrack.track.dispose()\n      this.set({ isShareScreen: false, desktopTrack: undefined })\n\n      if (jitsiStore.isCamera) this.clearSecondConnection()\n\n      this.updateButtonShareCameraStatus(false) // EXPERIMENT:\n    }\n  }\n\n  // *_: End\n\n  componentDidMount() {\n    this.handleConnect()\n  }\n\n  handleMouseMove = () => {\n    const { jitsiStore } = this.props\n\n    clearTimeout(jitsiStore.actionTimeout)\n\n    const actionTimeout = setTimeout(() => {\n      this.set({ isMouseMove: false })\n    }, 20 * 1000)\n\n    this.set({ actionTimeout, isMouseMove: true })\n  }\n\n  mutateLeaveConference = () =>\n    client\n      .mutate({\n        mutation: M_LEAVE_CONFERENCE,\n        variables: { conferenceId: this.props.conferenceId }\n      })\n      .then(({ data: { leaveConference } }) => {\n        if (leaveConference) {\n          newNotification('Leave conference successfully! Redirecting...', 'info', {\n            dismiss: { duration: 1000, onScreen: true }\n          })\n          setTimeout(() => {\n            this.props.history.push(routesPath.leave)\n          }, 1000)\n        }\n      })\n      .catch(error =>\n        returnError('Leave Conference', {\n          error,\n          errorMessage: 'An error occurred while leaving conference, please try again later!'\n        })\n      )\n\n  mutateSetPinnedUser = id => {\n    return client\n      .mutate({\n        mutation: M_SET_PINNED_USER,\n        variables: {\n          conferenceId: this.props.conferenceId,\n          type: 'MAIN',\n          userId: id\n        }\n      })\n      .then(({ data: { setPinnedUser } }) => {\n        if (!setPinnedUser) return newNotification('Failed to set pinned user, try again later!')\n        this.props.conferenceState.setSpeakerByUID(id)\n      })\n      .catch(error =>\n        returnError('setPinnedUser', {\n          error,\n          errorMessage: 'Failed to set pinned user, try again later!'\n        })\n      )\n  }\n\n  LEAVE = ({ disableMutateLeave = false } = {}) => {\n    const { jitsiStore } = this.props\n    if (jitsiStore.isShareScreen) {\n      this.offShareScreen()\n    }\n\n    if (jitsiStore.isCamera) {\n      this.offCamera()\n    }\n\n    this.leaveConference()\n      .then(() => {\n        this.disconnect()\n      })\n      .catch(_error => {\n        this.disconnect()\n      })\n\n    if (!disableMutateLeave) {\n      this.mutateLeaveConference()\n    }\n  }\n\n  getOpenStreamKeyDialog = () => this.openStreamKeyDialog()\n\n  render() {\n    const { jitsiStore, conferenceState } = this.props\n    const profiles = conferenceState?.myInfo?.profiles\n    const isBot = isBotRecord(profiles)\n\n    if (!(jitsiStore.isConnected && jitsiStore.isJoined)) {\n      return (\n        <div className='main-content'>\n          <BounceLoader />\n        </div>\n      )\n    }\n\n    return (\n      <div className='conference-body' onMouseMove={this.handleMouseMove}>\n        <LayoutSwitch />\n\n        <ReturnLayout\n          setSpeakerByUID={this.setSpeakerByUID}\n          mutateSetPinnedUser={this.mutateSetPinnedUser}\n          tracksOfThisParticipant={this.tracksOfThisParticipant}\n          doesParticipantHasAudio={this.doesParticipantHasAudio}\n          doesParticipantHasVideo={this.doesParticipantHasVideo}\n          updateRemoteStats={callback => (this.updateRemoteStats = callback)}\n          clearDraw={this.props.clearDraw}\n        />\n\n        {!isBot && (\n          <>\n            <CollaboratePanel\n              conferenceId={this.props.conferenceId}\n              doesParticipantHasAudio={this.doesParticipantHasAudio}\n              doesParticipantHasVideo={this.doesParticipantHasVideo}\n              tracksOfThisParticipant={this.tracksOfThisParticipant}\n              mutateSetPinnedUser={this.mutateSetPinnedUser}\n            />\n\n            <StreamKeydialog handleOpen={callback => (this.openStreamKeyDialog = callback)} />\n\n            <ToolBar\n              conferenceId={this.props.conferenceId}\n              // *: Camera\n              onCamera={this.onCamera}\n              offCamera={this.offCamera}\n              // *: Audio\n              onAudio={this.onAudio}\n              offAudio={this.offAudio}\n              // *: Desktop sharing\n              onShareScreen={this.onShareScreen}\n              offShareScreen={this.offShareScreen}\n              // *: Stream\n              openStreamKeyDialog={this.getOpenStreamKeyDialog}\n            />\n          </>\n        )}\n\n        <AudioRender />\n\n        {jitsiStore.isDisconnect && (\n          <RecommendReconnect />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(JitsiComponent))\n"]},"metadata":{},"sourceType":"module"}