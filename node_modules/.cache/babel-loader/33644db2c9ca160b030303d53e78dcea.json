{"ast":null,"code":"import _regeneratorRuntime from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/App.jsx\";\n\nimport React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport 'react-notifications-component/dist/theme.css';\nimport googleCalendarAPI from './calendar/GoogleCalendarAPI';\nimport RouterComponent from '@router';\nimport { appConstants } from '@constants';\nimport client, { Q_GET_IS_ENABLE_GOOGLE_API } from '@graphql';\nimport { newNotification, parseError } from '@utils';\nimport { withTranslation } from 'react-i18next';\nvar App = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(App, _React$PureComponent);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.updateDimensions = function () {\n      var isMobile = window.innerWidth <= 1024;\n\n      if (_this.props.globalState.isMobile !== isMobile) {\n        _this.props.globalState.setIsMobile(window.innerWidth <= 1024);\n      }\n    };\n\n    _this.isEnableGoogleAPI = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                client.query({\n                  query: Q_GET_IS_ENABLE_GOOGLE_API,\n                  fetchPolicy: 'network-only'\n                }).then(function (_ref3) {\n                  var data = _ref3.data;\n                  resolve(data.isEnableGoogleAPI);\n                }).catch(function (err) {\n                  newNotification(_this.props.i18n.t(parseError(err)), 'danger');\n                  resolve(null);\n                });\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.updateDimensions();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                window.addEventListener('resize', this.updateDimensions); // reload all page when user logout\n\n                setInterval(function () {\n                  var currentToken = !!window.localStorage.getItem(appConstants.LSKey.userTokenKey);\n\n                  if (_this2.props.globalState.isAuth !== currentToken) {\n                    window.location.reload();\n                  }\n                }, 3000);\n                _context2.next = 4;\n                return this.isEnableGoogleAPI();\n\n              case 4:\n                if (!_context2.sent) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                if (!this.props.globalState.isGoogleAPI) {\n                  this.props.globalState.setisGoogleAPI(true);\n                  googleCalendarAPI.load();\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.updateDimensions);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"app-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(RouterComponent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default withTranslation()(App);","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/App.jsx"],"names":["React","observer","inject","googleCalendarAPI","RouterComponent","appConstants","client","Q_GET_IS_ENABLE_GOOGLE_API","newNotification","parseError","withTranslation","App","stores","props","updateDimensions","isMobile","window","innerWidth","globalState","setIsMobile","isEnableGoogleAPI","Promise","resolve","reject","query","fetchPolicy","then","data","catch","err","i18n","t","addEventListener","setInterval","currentToken","localStorage","getItem","LSKey","userTokenKey","isAuth","location","reload","isGoogleAPI","setisGoogleAPI","load","removeEventListener","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport 'react-notifications-component/dist/theme.css'\n\nimport googleCalendarAPI from './calendar/GoogleCalendarAPI'\n\nimport RouterComponent from '@router'\nimport { appConstants } from '@constants'\nimport client, { Q_GET_IS_ENABLE_GOOGLE_API } from '@graphql'\nimport { newNotification, parseError } from '@utils'\nimport { withTranslation } from 'react-i18next'\n\n@inject(({ stores }) => stores)\n@observer\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.updateDimensions()\n  }\n\n  updateDimensions = () => {\n    const isMobile = window.innerWidth <= 1024\n    if (this.props.globalState.isMobile !== isMobile) {\n      this.props.globalState.setIsMobile(window.innerWidth <= 1024)\n    }\n  }\n\n  isEnableGoogleAPI = async () => {\n    return new Promise((resolve, reject) => {\n      client\n        .query({\n          query: Q_GET_IS_ENABLE_GOOGLE_API,\n          fetchPolicy: 'network-only'\n        })\n        .then(({ data }) => {\n          resolve(data.isEnableGoogleAPI)\n        })\n        .catch(err => {\n          newNotification(this.props.i18n.t(parseError(err)), 'danger')\n          resolve(null)\n        })\n    })\n  }\n\n  async componentDidMount() {\n    window.addEventListener('resize', this.updateDimensions)\n\n    // reload all page when user logout\n    setInterval(() => {\n      const currentToken = !!window.localStorage.getItem(appConstants.LSKey.userTokenKey)\n      if (this.props.globalState.isAuth !== currentToken) {\n        window.location.reload();\n      }\n    }, 3000)\n\n    if (await this.isEnableGoogleAPI()) {\n      if (!this.props.globalState.isGoogleAPI) {\n        this.props.globalState.setisGoogleAPI(true)\n        googleCalendarAPI.load()\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions)\n  }\n\n  render() {\n    return (\n      <div className='app-container'>\n        <RouterComponent />\n      </div>\n    )\n  }\n}\n\nexport default withTranslation()(App)\n"]},"metadata":{},"sourceType":"module"}