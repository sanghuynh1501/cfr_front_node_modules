{"ast":null,"code":"import \"antd/es/tooltip/style\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/radio/style\";\nimport _Radio from \"antd/es/radio\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/PinUser.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { checkPermission } from '@constants';\nimport headphone from \"@misc/images/ngocly/headphone.svg\";\nimport micro from \"@misc/images/ngocly/micro.svg\";\nimport microOff from \"@misc/images/ngocly/microOff.svg\";\nimport pinUser from \"@misc/images/ngocly/pinuser.svg\";\nimport iconSearch from \"@misc/images/ngocly/iconSearch.svg\";\nimport videoOn from \"@misc/images/ngocly/camera.svg\";\nimport videoOff from \"@misc/images/ngocly/cameraOff.svg\";\nimport pinnedVideoOn from \"@misc/images/pin_video_on.svg\";\nimport upload from \"@misc/images/ngocly/upload.svg\";\nimport uploadWhite from \"@misc/images/ngocly/upload-white.svg\";\nimport { isBotRecord } from '@utils';\nvar PIN_OPTION = {\n  ME: 'me',\n  EVERYONE: 'everyone'\n};\nvar PinUserDesktop = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(PinUserDesktop, _React$Component);\n\n  var _super = _createSuper(PinUserDesktop);\n\n  function PinUserDesktop(props) {\n    var _this;\n\n    _classCallCheck(this, PinUserDesktop);\n\n    _this = _super.call(this, props);\n\n    _this.select = function (uid) {\n      var selected = _this.props.conferenceState.conference.pinnedUser === uid ? '' : uid;\n      if (_this.state.pinOption === PIN_OPTION.EVERYONE) _this.props.mutateSetPinnedUser(selected);else _this.props.setSpeakerByUID(uid);\n    };\n\n    _this.chooseOptionPin = function (key) {\n      _this.setState({\n        pinOption: key\n      });\n    };\n\n    _this.state = {\n      pinOption: PIN_OPTION.ME\n    };\n    return _this;\n  }\n\n  _createClass(PinUserDesktop, [{\n    key: \"render\",\n    value: function render() {\n      var _conferenceState$myIn,\n          _this2 = this;\n\n      var _this$props = this.props,\n          conferenceState = _this$props.conferenceState,\n          jitsiStore = _this$props.jitsiStore;\n      var profiles = conferenceState === null || conferenceState === void 0 ? void 0 : (_conferenceState$myIn = conferenceState.myInfo) === null || _conferenceState$myIn === void 0 ? void 0 : _conferenceState$myIn.profiles;\n      var isBot = isBotRecord(profiles);\n\n      if (jitsiStore.speaker) {\n        var myUserId = jitsiStore.conference.myUserId();\n\n        var _myUserId = jitsiStore._conference && jitsiStore._conference.myUserId();\n\n        var speakerId = jitsiStore.speaker.track.getParticipantId();\n        var _speakerName = '';\n        var hasAudio = false;\n\n        if (jitsiStore.speaker.track.isLocal()) {\n          _speakerName = \"\".concat(conferenceState.myInfo.firstname, \" \").concat(conferenceState.myInfo.lastname);\n          hasAudio = jitsiStore.isAudio;\n        } else {\n          var speakerFound = jitsiStore.participants.find(function (_ref2) {\n            var id = _ref2.id;\n            return id === speakerId;\n          });\n\n          if (speakerFound) {\n            _speakerName = speakerFound.displayName.split('|')[1];\n          }\n\n          hasAudio = this.props.doesParticipantHasAudio(speakerId);\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pin-user-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"pin-user-icon\",\n          src: headphone,\n          alt: \"icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pin-user-name \".concat(conferenceState.conference.pinnedUser),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }\n        }, _speakerName.length > 20 ? _speakerName.slice(0, 20) + '...' : _speakerName), /*#__PURE__*/React.createElement(\"img\", {\n          src: hasAudio ? micro : microOff,\n          alt: \"icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }\n        })), !isBot && /*#__PURE__*/React.createElement(_Tooltip, {\n          overlayClassName: \"pin-user-tooltip\",\n          title: function title() {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"pin-tooltip-container\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              className: \"pin-tooltip-header\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 21\n              }\n            }, \"Lock Video View\"), /*#__PURE__*/React.createElement(\"span\", {\n              className: \"pin-tooltip-subtext\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }\n            }, \"Who do you want to lock the video view\"), /*#__PURE__*/React.createElement(_Radio.Group, {\n              value: _this2.state.pinOption,\n              onChange: function onChange(e) {\n                return _this2.chooseOptionPin(e.target.value);\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(_Radio, {\n              value: PIN_OPTION.ME,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 23\n              }\n            }, \"Me\"), checkPermission(_this2.props.conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && /*#__PURE__*/React.createElement(_Radio, {\n              value: PIN_OPTION.EVERYONE,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 25\n              }\n            }, \"Everyone\"))), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"pin-tooltip-body\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"pin-tooltip-subtext\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 21\n              }\n            }, \"Which participant do you want to lock the video on\"), /*#__PURE__*/React.createElement(_Input, {\n              placeholder: \"Search for a name\",\n              prefix: /*#__PURE__*/React.createElement(\"img\", {\n                src: iconSearch,\n                alt: \"icon\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 68\n                }\n              }),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 21\n              }\n            }), /*#__PURE__*/React.createElement(\"span\", {\n              className: \"pin-tooltip-body-title\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }\n            }, \"Participants\"), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"pin-tooltip-body-users\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"button\", {\n              className: conferenceState.conference.pinnedUser !== myUserId ? '' : 'track-pin-active',\n              onClick: function onClick() {\n                return _this2.select(myUserId);\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 23\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 25\n              }\n            }, \"\".concat(conferenceState.myInfo.firstname, \" \").concat(conferenceState.myInfo.lastname)), /*#__PURE__*/React.createElement(\"img\", {\n              alt: \"videoStatusIndicator\",\n              src: jitsiStore.isCamera || jitsiStore.isShareScreen ? conferenceState.conference.pinnedUser === myUserId ? pinnedVideoOn : videoOn : videoOff,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 25\n              }\n            })), jitsiStore.isCamera && jitsiStore.isShareScreen ? /*#__PURE__*/React.createElement(\"button\", {\n              className: conferenceState.conference.pinnedUser !== _myUserId ? '' : 'track-pin-active',\n              onClick: function onClick() {\n                return _this2.select(_myUserId);\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 27\n              }\n            }, \"\".concat(conferenceState.myInfo.firstname, \" \").concat(conferenceState.myInfo.lastname)), /*#__PURE__*/React.createElement(\"div\", {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 27\n              }\n            }, /*#__PURE__*/React.createElement(\"img\", {\n              className: \"icon-share-screen\",\n              alt: \"videoShareScreen\",\n              src: jitsiStore.desktopTrack.track.getParticipantId() === conferenceState.conference.pinnedUser ? uploadWhite : upload,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 29\n              }\n            }))) : /*#__PURE__*/React.createElement(React.Fragment, {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 27\n              }\n            }), _this2.props.jitsiStore.participants.map(function (_ref3) {\n              var id = _ref3.id,\n                  user = _ref3.user;\n\n              var hasVideo = _this2.props.doesParticipantHasVideo(id);\n\n              var tracks = _this2.props.tracksOfThisParticipant(id);\n\n              var isShareScreen = tracks && hasVideo ? tracks[0].videoType === 'desktop' : false;\n\n              if (hasVideo) {\n                return /*#__PURE__*/React.createElement(\"button\", {\n                  key: id,\n                  className: conferenceState.conference.pinnedUser !== id ? '' : 'track-pin-active',\n                  onClick: function onClick() {\n                    return _this2.select(id);\n                  },\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 29\n                  }\n                }, /*#__PURE__*/React.createElement(\"span\", {\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 31\n                  }\n                }, user._displayName && user._displayName.split('|')[1] || 'Loading...'), isShareScreen ? /*#__PURE__*/React.createElement(\"img\", {\n                  className: \"icon-share-screen\",\n                  alt: \"videoShareScreen\",\n                  src: conferenceState.conference.pinnedUser === id ? uploadWhite : upload,\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 33\n                  }\n                }) : /*#__PURE__*/React.createElement(\"img\", {\n                  alt: \"videoOnOff\",\n                  src: hasVideo ? conferenceState.conference.pinnedUser === id ? pinnedVideoOn : videoOn : videoOff,\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 35\n                  }\n                }));\n              } else {\n                return /*#__PURE__*/React.createElement(React.Fragment, {\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 34\n                  }\n                });\n              }\n            }))));\n          },\n          trigger: \"click\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: pinUser,\n          alt: \"icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }\n        })));\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return PinUserDesktop;\n}(React.Component), _temp)) || _class) || _class);\nexport default PinUserDesktop;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/PinUser.jsx"],"names":["React","inject","observer","checkPermission","isBotRecord","PIN_OPTION","ME","EVERYONE","PinUserDesktop","stores","props","select","uid","selected","conferenceState","conference","pinnedUser","state","pinOption","mutateSetPinnedUser","setSpeakerByUID","chooseOptionPin","key","setState","jitsiStore","profiles","myInfo","isBot","speaker","myUserId","_myUserId","_conference","speakerId","track","getParticipantId","_speakerName","hasAudio","isLocal","firstname","lastname","isAudio","speakerFound","participants","find","id","displayName","split","doesParticipantHasAudio","headphone","length","slice","micro","microOff","e","target","value","myPermissions","iconSearch","isCamera","isShareScreen","pinnedVideoOn","videoOn","videoOff","desktopTrack","uploadWhite","upload","map","user","hasVideo","doesParticipantHasVideo","tracks","tracksOfThisParticipant","videoType","_displayName","pinUser","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Tooltip, Radio, Input } from 'antd'\nimport { inject, observer } from 'mobx-react'\n\nimport { checkPermission } from '@constants'\n\nimport headphone from '@misc/images/ngocly/headphone.svg'\nimport micro from '@misc/images/ngocly/micro.svg'\nimport microOff from '@misc/images/ngocly/microOff.svg'\nimport pinUser from '@misc/images/ngocly/pinuser.svg'\nimport iconSearch from '@misc/images/ngocly/iconSearch.svg'\nimport videoOn from '@misc/images/ngocly/camera.svg'\nimport videoOff from '@misc/images/ngocly/cameraOff.svg'\nimport pinnedVideoOn from '@misc/images/pin_video_on.svg'\nimport upload from '@misc/images/ngocly/upload.svg'\nimport uploadWhite from '@misc/images/ngocly/upload-white.svg'\nimport { isBotRecord } from '@utils'\n\nconst PIN_OPTION = {\n  ME: 'me',\n  EVERYONE: 'everyone'\n}\n\n@inject(({ stores }) => stores)\n@observer\nclass PinUserDesktop extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { pinOption: PIN_OPTION.ME }\n  }\n\n  select = uid => {\n    const selected = this.props.conferenceState.conference.pinnedUser === uid ? '' : uid\n\n    if (this.state.pinOption === PIN_OPTION.EVERYONE) this.props.mutateSetPinnedUser(selected)\n    else this.props.setSpeakerByUID(uid)\n  }\n\n  chooseOptionPin = key => {\n    this.setState({ pinOption: key })\n  }\n\n  render() {\n    const { conferenceState, jitsiStore } = this.props\n    const profiles = conferenceState?.myInfo?.profiles\n    const isBot = isBotRecord(profiles)\n\n    if (jitsiStore.speaker) {\n      const myUserId = jitsiStore.conference.myUserId()\n      const _myUserId = jitsiStore._conference && jitsiStore._conference.myUserId()\n\n      const speakerId = jitsiStore.speaker.track.getParticipantId()\n\n      let _speakerName = ''\n      let hasAudio = false\n\n      if (jitsiStore.speaker.track.isLocal()) {\n        _speakerName = `${conferenceState.myInfo.firstname} ${conferenceState.myInfo.lastname}`\n        hasAudio = jitsiStore.isAudio\n      } else {\n        const speakerFound = jitsiStore.participants.find(({ id }) => id === speakerId)\n\n        if (speakerFound) {\n          _speakerName = speakerFound.displayName.split('|')[1]\n        }\n\n        hasAudio = this.props.doesParticipantHasAudio(speakerId)\n      }\n\n      return (\n        <div className='pin-user-container'>\n          <div>\n            <img className='pin-user-icon' src={headphone} alt='icon' />\n            <div className={`pin-user-name ${conferenceState.conference.pinnedUser}`}>\n              {_speakerName.length > 20 ? _speakerName.slice(0, 20) + '...' : _speakerName}\n            </div>\n            <img src={hasAudio ? micro : microOff} alt='icon' />\n          </div>\n\n          {!isBot && (\n            <Tooltip\n              overlayClassName='pin-user-tooltip'\n              title={() => (\n                <div className='pin-tooltip-container'>\n                  <div className='pin-tooltip-header'>\n                    <span>Lock Video View</span>\n                    <span className='pin-tooltip-subtext'>Who do you want to lock the video view</span>\n                    <Radio.Group value={this.state.pinOption} onChange={e => this.chooseOptionPin(e.target.value)}>\n                      <Radio value={PIN_OPTION.ME}>Me</Radio>\n                      {checkPermission(this.props.conferenceState.myPermissions, 'PIN_MAIN_SPEAKER') && (\n                        <Radio value={PIN_OPTION.EVERYONE}>Everyone</Radio>\n                      )}\n                    </Radio.Group>\n                  </div>\n                  <div className='pin-tooltip-body'>\n                    <span className='pin-tooltip-subtext'>Which participant do you want to lock the video on</span>\n                    <Input placeholder='Search for a name' prefix={<img src={iconSearch} alt='icon' />} />\n                    <span className='pin-tooltip-body-title'>Participants</span>\n                    <div className='pin-tooltip-body-users'>\n                      <button\n                        className={conferenceState.conference.pinnedUser !== myUserId ? '' : 'track-pin-active'}\n                        onClick={() => this.select(myUserId)}\n                      >\n                        <span>{`${conferenceState.myInfo.firstname} ${conferenceState.myInfo.lastname}`}</span>\n                        <img\n                          alt='videoStatusIndicator'\n                          src={\n                            jitsiStore.isCamera || jitsiStore.isShareScreen\n                              ? conferenceState.conference.pinnedUser === myUserId\n                                ? pinnedVideoOn\n                                : videoOn\n                              : videoOff\n                          }\n                        />\n                      </button>\n                      {jitsiStore.isCamera && jitsiStore.isShareScreen ? (\n                        <button\n                          className={conferenceState.conference.pinnedUser !== _myUserId ? '' : 'track-pin-active'}\n                          onClick={() => this.select(_myUserId)}\n                        >\n                          <span>{`${conferenceState.myInfo.firstname} ${conferenceState.myInfo.lastname}`}</span>\n                          <div>\n                            <img\n                              className='icon-share-screen'\n                              alt='videoShareScreen'\n                              src={\n                                jitsiStore.desktopTrack.track.getParticipantId() === conferenceState.conference.pinnedUser\n                                  ? uploadWhite\n                                  : upload\n                              }\n                            />\n                          </div>\n                        </button>\n                      ) : (\n                          <React.Fragment />\n                        )}\n                      {this.props.jitsiStore.participants.map(({ id, user }) => {\n                        const hasVideo = this.props.doesParticipantHasVideo(id)\n                        const tracks = this.props.tracksOfThisParticipant(id)\n                        const isShareScreen = tracks && hasVideo ? tracks[0].videoType === 'desktop' : false\n                        if (hasVideo) {\n                          return (\n                            <button\n                              key={id}\n                              className={conferenceState.conference.pinnedUser !== id ? '' : 'track-pin-active'}\n                              onClick={() => this.select(id)}\n                            >\n                              <span>{(user._displayName && user._displayName.split('|')[1]) || 'Loading...'}</span>\n                              {isShareScreen ? (\n                                <img\n                                  className='icon-share-screen'\n                                  alt='videoShareScreen'\n                                  src={conferenceState.conference.pinnedUser === id ? uploadWhite : upload}\n                                />\n                              ) : (\n                                  <img\n                                    alt='videoOnOff'\n                                    src={\n                                      hasVideo\n                                        ? conferenceState.conference.pinnedUser === id\n                                          ? pinnedVideoOn\n                                          : videoOn\n                                        : videoOff\n                                    }\n                                  />\n                                )}\n                            </button>\n                          )\n                        } else {\n                          return <React.Fragment />\n                        }\n                      })}\n                    </div>\n                  </div>\n                </div>\n              )}\n              trigger='click'\n            >\n              <img src={pinUser} alt='icon' />\n            </Tooltip>\n          )}\n        </div>\n      )\n    }\n    return <React.Fragment />\n  }\n}\n\nexport default PinUserDesktop\n"]},"metadata":{},"sourceType":"module"}