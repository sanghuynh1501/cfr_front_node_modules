{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport _regeneratorRuntime from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/dashboard/conferenceDetail/StatisticComponents/PollsStatistic.jsx\";\n\nimport React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport client, { Q_POLLS } from '@graphql';\nimport { returnError } from '@utils';\nimport { withTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport PollsDetail from './PollsDetail';\nvar PollsStatistic = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_Component) {\n  _inherits(PollsStatistic, _Component);\n\n  var _super = _createSuper(PollsStatistic);\n\n  function PollsStatistic() {\n    var _this;\n\n    _classCallCheck(this, PollsStatistic);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      donePolls: []\n    };\n\n    _this.formatCreatedAt = function (arr) {\n      var temp = arr[0].createdAt;\n      var temp2 = 1;\n\n      for (var i = 1; i < arr.length; i -= -1) {\n        if (arr[i].createdAt === temp + temp2) {\n          arr[i].createdAt = temp;\n          temp2++;\n        } else {\n          temp2 = 1;\n          temp = arr[i].createdAt;\n        }\n      }\n\n      return arr.filter(function (poll) {\n        return !poll.isActive;\n      });\n    };\n\n    _this.groupObjectsByKey = function (arr, key) {\n      var res = [];\n\n      var keys = _toConsumableArray(new Set(arr.map(function (e) {\n        return e[key];\n      })));\n\n      keys.forEach(function (e) {\n        var tempArr = [];\n\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i][key] === e) {\n            tempArr.push(arr[i]);\n          }\n        }\n\n        res.push({\n          obj: {\n            arr: tempArr,\n            timeStamp: e\n          }\n        });\n        tempArr = [];\n      });\n      return res;\n    };\n\n    _this.queryPolls = function () {\n      return client.query({\n        query: Q_POLLS,\n        variables: {\n          conferenceId: _this.props.conferenceId\n        },\n        fetchPolicy: 'network-only'\n      }).then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n          var polls;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  polls = _ref2.data.polls;\n\n                  if (polls.length !== 0) {\n                    _this.setState({\n                      donePolls: _this.groupObjectsByKey(_this.formatCreatedAt(polls), 'createdAt')\n                    });\n                  }\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }()).catch(function (error) {\n        return returnError('Query polls', {\n          error: error,\n          errorMessage: 'Cannot get polling data!'\n        });\n      });\n    };\n\n    _this.componentDidMount = function () {\n      _this.queryPolls();\n    };\n\n    return _this;\n  }\n\n  _createClass(PollsStatistic, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var donePolls = this.state.donePolls,\n          _this$props = this.props,\n          conferenceUsers = _this$props.conferenceUsers,\n          i18n = _this$props.i18n;\n      var rowsData = donePolls.map(function (_ref4, index) {\n        var _ref4$obj = _ref4.obj,\n            arr = _ref4$obj.arr,\n            timeStamp = _ref4$obj.timeStamp;\n        return {\n          index: index + 1,\n          createdAt: timeStamp,\n          duration: arr[0].endAt - arr[0].createdAt,\n          numberOfQuestions: arr.length,\n          createdBy: arr[0].createdBy.firstname + ' ' + arr[0].createdBy.lastname\n        };\n      });\n      var columns = [{\n        title: i18n.t('statistic.index'),\n        dataIndex: 'index',\n        className: 'index',\n        key: 'index'\n      }, {\n        title: i18n.t('statistic.date'),\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        render: function render(date) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }\n          }, moment(date).format('DD[/]MM[/]YYYY, HH:mm'));\n        }\n      }, {\n        title: i18n.t('statistic.duration'),\n        dataIndex: 'duration',\n        key: 'duration',\n        className: 'duration',\n        render: function render(date) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 25\n            }\n          }, moment(date).format('mm:ss'));\n        }\n      }, {\n        title: i18n.t('statistic.numberOfQuestions'),\n        dataIndex: 'numberOfQuestions',\n        key: 'numberOfQuestions',\n        className: 'numberOfQuestions' // render: date => <span>{moment(date).format('DD[/]MM[/]YYYY, HH:mm')}</span>\n\n      }, {\n        title: i18n.t('statistic.createdBy'),\n        dataIndex: 'createdBy',\n        className: 'createdBy',\n        key: 'createdBy',\n        width: 100\n      }];\n      return /*#__PURE__*/React.createElement(_Table, {\n        className: \"pollsStatisticTable\",\n        size: 'small',\n        pagination: false,\n        expandedRowRender: function expandedRowRender(record, index, indent, expanded) {\n          return /*#__PURE__*/React.createElement(PollsDetail, {\n            pollsToShow: donePolls[index].obj.arr,\n            conferenceUsers: conferenceUsers,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 11\n            }\n          });\n        },\n        columns: columns,\n        dataSource: rowsData,\n        rowKey: \"index\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return PollsStatistic;\n}(Component), _temp)) || _class) || _class);\nexport default withTranslation()(PollsStatistic);","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/dashboard/conferenceDetail/StatisticComponents/PollsStatistic.jsx"],"names":["React","Component","inject","observer","client","Q_POLLS","returnError","withTranslation","moment","PollsDetail","PollsStatistic","stores","state","donePolls","formatCreatedAt","arr","temp","createdAt","temp2","i","length","filter","poll","isActive","groupObjectsByKey","key","res","keys","Set","map","e","forEach","tempArr","push","obj","timeStamp","queryPolls","query","variables","conferenceId","props","fetchPolicy","then","polls","data","setState","catch","error","errorMessage","componentDidMount","conferenceUsers","i18n","rowsData","index","duration","endAt","numberOfQuestions","createdBy","firstname","lastname","columns","title","t","dataIndex","className","render","date","format","width","record","indent","expanded"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport client, { Q_POLLS } from '@graphql'\nimport { returnError } from '@utils'\nimport { Table } from 'antd'\nimport { withTranslation } from 'react-i18next'\n\nimport moment from 'moment'\n\nimport PollsDetail from './PollsDetail'\n\n@inject(({ stores }) => stores)\n@observer\nclass PollsStatistic extends Component {\n  state = {\n    donePolls: []\n  }\n\n  formatCreatedAt = arr => {\n    let temp = arr[0].createdAt\n    let temp2 = 1\n\n    for (let i = 1; i < arr.length; i -= -1) {\n      if (arr[i].createdAt === temp + temp2) {\n        arr[i].createdAt = temp\n        temp2++\n      } else {\n        temp2 = 1\n        temp = arr[i].createdAt\n      }\n    }\n\n    return arr.filter(poll => !poll.isActive)\n  }\n\n  groupObjectsByKey = (arr, key) => {\n    let res = []\n    let keys = [...new Set(arr.map(e => e[key]))]\n\n    keys.forEach(e => {\n      let tempArr = []\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i][key] === e) {\n          tempArr.push(arr[i])\n        }\n      }\n      res.push({ obj: { arr: tempArr, timeStamp: e } })\n      tempArr = []\n    })\n\n    return res\n  }\n\n  queryPolls = () =>\n    client\n      .query({\n        query: Q_POLLS,\n        variables: { conferenceId: this.props.conferenceId },\n        fetchPolicy: 'network-only'\n      })\n      .then(async ({ data: { polls } }) => {\n        if (polls.length !== 0) {\n          this.setState({ donePolls: this.groupObjectsByKey(this.formatCreatedAt(polls), 'createdAt') })\n        }\n      })\n      .catch(error =>\n        returnError('Query polls', {\n          error,\n          errorMessage: 'Cannot get polling data!'\n        })\n      )\n\n  componentDidMount = () => {\n    this.queryPolls()\n  }\n\n  render() {\n    const {\n      state: { donePolls },\n      props: { conferenceUsers, i18n }\n    } = this\n\n    const rowsData = donePolls.map(({ obj: { arr, timeStamp } }, index) => ({\n      index: index + 1,\n      createdAt: timeStamp,\n      duration: arr[0].endAt - arr[0].createdAt,\n      numberOfQuestions: arr.length,\n      createdBy: arr[0].createdBy.firstname + ' ' + arr[0].createdBy.lastname\n    }))\n\n    const columns = [\n      {\n        title: i18n.t('statistic.index'),\n        dataIndex: 'index',\n        className: 'index',\n        key: 'index'\n      },\n      {\n        title: i18n.t('statistic.date'),\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        render: date => <span>{moment(date).format('DD[/]MM[/]YYYY, HH:mm')}</span>\n      },\n      {\n        title: i18n.t('statistic.duration'),\n        dataIndex: 'duration',\n        key: 'duration',\n        className: 'duration',\n        render: date => <span>{moment(date).format('mm:ss')}</span>\n      },\n      {\n        title: i18n.t('statistic.numberOfQuestions'),\n        dataIndex: 'numberOfQuestions',\n        key: 'numberOfQuestions',\n        className: 'numberOfQuestions'\n        // render: date => <span>{moment(date).format('DD[/]MM[/]YYYY, HH:mm')}</span>\n      },\n      {\n        title: i18n.t('statistic.createdBy'),\n        dataIndex: 'createdBy',\n        className: 'createdBy',\n        key: 'createdBy',\n        width: 100\n      }\n    ]\n\n    return (\n      <Table\n        className='pollsStatisticTable'\n        size={'small'}\n        pagination={false}\n        expandedRowRender={(record, index, indent, expanded) => (\n          <PollsDetail pollsToShow={donePolls[index].obj.arr} conferenceUsers={conferenceUsers} />\n        )}\n        columns={columns}\n        dataSource={rowsData}\n        rowKey='index'\n      />\n    )\n  }\n}\nexport default withTranslation()(PollsStatistic)\n"]},"metadata":{},"sourceType":"module"}