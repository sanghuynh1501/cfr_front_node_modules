{"ast":null,"code":"import _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/components/LocalAudioLevel.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { JitsiTrackEvents } from '../core';\nvar LocalAudioLevel = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(LocalAudioLevel, _React$PureComponent);\n\n  var _super = _createSuper(LocalAudioLevel);\n\n  function LocalAudioLevel() {\n    var _this;\n\n    _classCallCheck(this, LocalAudioLevel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      audioLevel: 0\n    };\n    _this._isMounted = false;\n    return _this;\n  }\n\n  _createClass(LocalAudioLevel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._isMounted = true;\n\n      if (this.props.audioTrack) {\n        this.props.audioTrack.track.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, function (audioLevel) {\n          if (_this2._isMounted) _this2.setState({\n            audioLevel: audioLevel\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.audioTrack) {\n        this.props.audioTrack.track.removeAllListeners(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED);\n      }\n\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"my-amplitude-voice\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"amplitude\",\n        style: {\n          height: \"\".concat(this.state.audioLevel * 100, \"%\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, _prevState) {\n      if (!nextProps.jitsiStore.isAudio) {\n        return {\n          audioLevel: 0\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return LocalAudioLevel;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default LocalAudioLevel;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/components/LocalAudioLevel.jsx"],"names":["React","inject","observer","JitsiTrackEvents","LocalAudioLevel","stores","state","audioLevel","_isMounted","props","audioTrack","track","addEventListener","TRACK_AUDIO_LEVEL_CHANGED","setState","removeAllListeners","height","nextProps","_prevState","jitsiStore","isAudio","PureComponent"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AAEA,SAASC,gBAAT,QAAiC,SAAjC;IAIMC,e,WAFLH,MAAM,CAAC;AAAA,MAAGI,MAAH,QAAGA,MAAH;AAAA,SAAgBA,MAAhB;AAAA,CAAD,C,gBACNH,Q;;;;;;;;;;;;;;;UASCI,K,GAAQ;AAAEC,MAAAA,UAAU,EAAE;AAAd,K;UACRC,U,GAAa,K;;;;;;wCAEO;AAAA;;AAClB,WAAKA,UAAL,GAAkB,IAAlB;;AAEA,UAAI,KAAKC,KAAL,CAAWC,UAAf,EAA2B;AACzB,aAAKD,KAAL,CAAWC,UAAX,CAAsBC,KAAtB,CAA4BC,gBAA5B,CAA6CT,gBAAgB,CAACU,yBAA9D,EAAyF,UAAAN,UAAU,EAAI;AACrG,cAAI,MAAI,CAACC,UAAT,EAAqB,MAAI,CAACM,QAAL,CAAc;AAAEP,YAAAA,UAAU,EAAVA;AAAF,WAAd;AACtB,SAFD;AAGD;AACF;;;2CAEsB;AACrB,UAAI,KAAKE,KAAL,CAAWC,UAAf,EAA2B;AACzB,aAAKD,KAAL,CAAWC,UAAX,CAAsBC,KAAtB,CAA4BI,kBAA5B,CAA+CZ,gBAAgB,CAACU,yBAAhE;AACD;;AACD,WAAKL,UAAL,GAAkB,KAAlB;AACD;;;6BAEQ;AACP,0BACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,KAAK,EAAE;AAAEQ,UAAAA,MAAM,YAAK,KAAKV,KAAL,CAAWC,UAAX,GAAwB,GAA7B;AAAR,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;6CAjC+BU,S,EAAWC,U,EAAY;AACrD,UAAI,CAACD,SAAS,CAACE,UAAV,CAAqBC,OAA1B,EAAmC;AACjC,eAAO;AAAEb,UAAAA,UAAU,EAAE;AAAd,SAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;EAN2BP,KAAK,CAACqB,a;AAqCpC,eAAejB,eAAf","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { JitsiTrackEvents } from '../core'\n\n@inject(({ stores }) => stores)\n@observer\nclass LocalAudioLevel extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, _prevState) {\n    if (!nextProps.jitsiStore.isAudio) {\n      return { audioLevel: 0 }\n    }\n    return null\n  }\n\n  state = { audioLevel: 0 }\n  _isMounted = false\n\n  componentDidMount() {\n    this._isMounted = true\n\n    if (this.props.audioTrack) {\n      this.props.audioTrack.track.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n        if (this._isMounted) this.setState({ audioLevel })\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.audioTrack) {\n      this.props.audioTrack.track.removeAllListeners(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED)\n    }\n    this._isMounted = false\n  }\n\n  render() {\n    return (\n      <div className='my-amplitude-voice'>\n        <div className='amplitude' style={{ height: `${this.state.audioLevel * 100}%` }} />\n      </div>\n    )\n  }\n}\n\nexport default LocalAudioLevel\n"]},"metadata":{},"sourceType":"module"}