{"ast":null,"code":"import \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/boxMessage/index.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './index.less';\nimport { client, Q_MESSAGES, S_ON_MESSAGE, M_READ_MESSAGE, M_SEND_MESSAGE } from '@graphql';\nimport { returnError, newNotification } from '@utils';\nimport { AvatarComponent } from '@components';\nimport LeftMessage from './LeftMessage';\nimport RightMessage from './RightMessage';\nimport closeIcon from \"@misc/images/action/cancel.svg\";\nvar BoxMessage = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(BoxMessage, _React$PureComponent);\n\n  var _super = _createSuper(BoxMessage);\n\n  function BoxMessage(props) {\n    var _this;\n\n    _classCallCheck(this, BoxMessage);\n\n    _this = _super.call(this, props);\n\n    _this.subscribeMessages = function () {\n      var conferenceState = _this.props.conferenceState;\n      _this.subscriber = client.subscribe({\n        query: S_ON_MESSAGE,\n        variables: {\n          conferenceId: conferenceState.conference._id,\n          withUser: conferenceState.idChatUser\n        },\n        fetchPolicy: 'network-only'\n      }).subscribe(function (_ref2) {\n        var onMessage = _ref2.data.onMessage;\n\n        _this.setState(function (prevState) {\n          return {\n            messages: [].concat(_toConsumableArray(prevState.messages), [onMessage]),\n            messageConvert: _this.convertMessage([].concat(_toConsumableArray(prevState.messages), [onMessage]))\n          };\n        }, function () {\n          if (onMessage.sender._id !== conferenceState.myUserId) _this.mutateReadMessage(onMessage.messageId);\n        });\n      });\n    };\n\n    _this.queryMessages = function () {\n      var conferenceState = _this.props.conferenceState;\n      client.query({\n        query: Q_MESSAGES,\n        variables: {\n          conferenceId: conferenceState.conference._id,\n          first: 100 + _this.state.cursor,\n          offset: _this.state.cursor,\n          withUser: conferenceState.idChatUser\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref3) {\n        var messages = _ref3.data.messages;\n\n        _this.setState({\n          currentId: conferenceState.idChatUser,\n          messages: messages,\n          messageConvert: _this.convertMessage(messages)\n        });\n      }).catch(function (error) {\n        return returnError('messages', {\n          error: error,\n          errorMessage: 'An error occurred while loading messages'\n        });\n      });\n    };\n\n    _this.getMessageToday = function (message) {\n      var date = new Date();\n      var timestamp = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n      return message.filter(function (item) {\n        return item.sentAt >= timestamp;\n      });\n    };\n\n    _this.convertMessage = function (messages) {\n      var array = [];\n      var temp = {};\n      var lastId = '';\n      messages.forEach(function (item, index) {\n        if (temp.hasOwnProperty('_id')) {\n          if (item.sender._id === lastId) {\n            temp.messages = [].concat(_toConsumableArray(temp.messages), [item.content]);\n          } else {\n            array = [].concat(_toConsumableArray(array), [temp]);\n            temp = {};\n            temp._id = item.sender._id;\n            temp.username = item.sender.username;\n            temp.firstname = item.sender.firstname;\n            temp.lastname = item.sender.lastname;\n            temp.imageUrl = item.sender.imageUrl;\n            temp.messages = [item.content];\n            lastId = item.sender._id;\n          }\n        } else {\n          if (index !== 0) {\n            array = [].concat(_toConsumableArray(array), [temp]);\n          }\n\n          temp = {};\n          temp._id = item.sender._id;\n          temp.username = item.sender.username;\n          temp.firstname = item.sender.firstname;\n          temp.lastname = item.sender.lastname;\n          temp.imageUrl = item.sender.imageUrl;\n          temp.messages = [item.content];\n          lastId = item.sender._id;\n        }\n      });\n      return [].concat(_toConsumableArray(array), [temp]);\n    };\n\n    _this.mutateReadMessage = function (messageId) {\n      return client.mutate({\n        mutation: M_READ_MESSAGE,\n        variables: {\n          messageId: messageId\n        }\n      }).then(function (_ref4) {\n        var readMessage = _ref4.data.readMessage;\n        if (!readMessage) console.log('Failed to read message');\n      }).catch(function () {});\n    };\n\n    _this.sendMessage = function (e) {\n      if (!e.currentTarget.value) {\n        e.preventDefault();\n        return;\n      }\n\n      var conferenceState = _this.props.conferenceState;\n\n      if (!conferenceState.idChatUser) {\n        returnError('sendMessage', {\n          error: '',\n          errorMessage: 'Please choose receiver'\n        });\n        return false;\n      }\n\n      if (e.keyCode === 13) {\n        client.mutate({\n          mutation: M_SEND_MESSAGE,\n          variables: {\n            conferenceId: conferenceState.conference._id,\n            content: e.currentTarget.value,\n            receiver: conferenceState.idChatUser\n          }\n        }).then(function (_ref5) {\n          var sendMessage = _ref5.data.sendMessage;\n\n          if (sendMessage) {\n            _this.refs['input-message'].handleReset();\n          } else {\n            return newNotification('An error occurred while sending message', 'danger');\n          }\n        }).catch(function (error) {\n          return returnError('sendMessage', {\n            error: error,\n            errorMessage: 'Please input message!'\n          });\n        });\n      }\n\n      e.preventDefault();\n    };\n\n    _this.autoScrollBottom = function () {\n      if (_this.refs['end-message']) {\n        _this.refs['end-message'].scrollIntoView();\n      }\n    };\n\n    _this.handleCloseBox = function () {\n      _this.props.conferenceState.setState({\n        idChatUser: null,\n        isShowBoxChat: false,\n        infoChatUser: {}\n      });\n    };\n\n    _this.state = {\n      currentId: _this.props.conferenceState.idChatUser,\n      cursor: 0,\n      messages: [],\n      messageConvert: []\n    };\n    return _this;\n  }\n\n  _createClass(BoxMessage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.queryMessages();\n      this.subscribeMessages();\n      this.autoScrollBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var conferenceState = this.props.conferenceState,\n          currentId = this.state.currentId;\n\n      if (conferenceState.idChatUser !== currentId) {\n        this.subscriber.unsubscribe();\n        this.queryMessages();\n        this.subscribeMessages();\n      }\n\n      this.autoScrollBottom();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Unsibscribe subscription\n      this.subscriber.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var conferenceState = this.props.conferenceState;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper-box-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"box-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"box-message-head\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"info-user\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(AvatarComponent, Object.assign({}, conferenceState.infoChatUser, {\n        isShowTooltip: false,\n        size: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }\n      }, conferenceState.infoChatUser.name)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"action\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: closeIcon,\n        alt: \"icon\",\n        onClick: this.handleCloseBox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"box-message-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }, this.state.messageConvert.map(function (item, index) {\n        return item._id === conferenceState.myUserId ? /*#__PURE__*/React.createElement(RightMessage, {\n          key: index,\n          data: item,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 19\n          }\n        }) : /*#__PURE__*/React.createElement(LeftMessage, {\n          key: index,\n          data: item,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 21\n          }\n        });\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"end-message\",\n        ref: \"end-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"box-message-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(_Input.TextArea, {\n        id: \"input-message\",\n        className: \"chat-inbox\",\n        placeholder: \"Enter chat messages here\",\n        ref: \"input-message\",\n        onPressEnter: this.sendMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return BoxMessage;\n}(React.PureComponent), _temp)) || _class) || _class);\nexport default BoxMessage;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/boxMessage/index.jsx"],"names":["React","inject","observer","client","Q_MESSAGES","S_ON_MESSAGE","M_READ_MESSAGE","M_SEND_MESSAGE","returnError","newNotification","AvatarComponent","LeftMessage","RightMessage","BoxMessage","stores","props","subscribeMessages","conferenceState","subscriber","subscribe","query","variables","conferenceId","conference","_id","withUser","idChatUser","fetchPolicy","onMessage","data","setState","prevState","messages","messageConvert","convertMessage","sender","myUserId","mutateReadMessage","messageId","queryMessages","first","state","cursor","offset","then","currentId","catch","error","errorMessage","getMessageToday","message","date","Date","timestamp","getFullYear","getMonth","getDate","getTime","filter","item","sentAt","array","temp","lastId","forEach","index","hasOwnProperty","content","username","firstname","lastname","imageUrl","mutate","mutation","readMessage","console","log","sendMessage","e","currentTarget","value","preventDefault","keyCode","receiver","refs","handleReset","autoScrollBottom","scrollIntoView","handleCloseBox","isShowBoxChat","infoChatUser","unsubscribe","name","closeIcon","map","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Input } from 'antd'\nimport './index.less'\n\nimport { client, Q_MESSAGES, S_ON_MESSAGE, M_READ_MESSAGE, M_SEND_MESSAGE } from '@graphql'\nimport { returnError, newNotification } from '@utils'\nimport { AvatarComponent } from '@components'\n\nimport LeftMessage from './LeftMessage'\nimport RightMessage from './RightMessage'\n\nimport closeIcon from '@misc/images/action/cancel.svg'\n\n@inject(({ stores }) => stores)\n@observer\nclass BoxMessage extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentId: this.props.conferenceState.idChatUser,\n      cursor: 0,\n      messages: [],\n      messageConvert: [],\n    }\n  }\n\n  componentDidMount() {\n    this.queryMessages()\n\n    this.subscribeMessages()\n\n    this.autoScrollBottom()\n\n  }\n\n  subscribeMessages = () => {\n    const { conferenceState } = this.props\n\n    this.subscriber = client\n      .subscribe({\n        query: S_ON_MESSAGE,\n        variables: {\n          conferenceId: conferenceState.conference._id,\n          withUser: conferenceState.idChatUser\n        },\n        fetchPolicy: 'network-only'\n      })\n      .subscribe(({ data: { onMessage } }) => {\n        this.setState(\n          prevState => ({\n            messages: [...prevState.messages, onMessage],\n            messageConvert: this.convertMessage([...prevState.messages, onMessage])\n          }),\n          () => {\n            if (onMessage.sender._id !== conferenceState.myUserId)\n              this.mutateReadMessage(onMessage.messageId)\n          }\n        )\n      })\n  }\n\n  queryMessages = () => {\n    const { conferenceState } = this.props\n\n    client\n      .query({\n        query: Q_MESSAGES,\n        variables: {\n          conferenceId: conferenceState.conference._id,\n          first: 100 + this.state.cursor,\n          offset: this.state.cursor,\n          withUser: conferenceState.idChatUser\n        },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { messages } }) => {\n        this.setState({\n          currentId: conferenceState.idChatUser,\n          messages,\n          messageConvert: this.convertMessage(messages)\n        })\n      })\n      .catch(error =>\n        returnError('messages', {\n          error,\n          errorMessage: 'An error occurred while loading messages'\n        })\n      )\n  }\n\n  getMessageToday = message => {\n    const date = new Date()\n    const timestamp = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate()\n    ).getTime()\n    return message.filter(item => item.sentAt >= timestamp)\n  }\n\n  convertMessage = (messages) => {\n    let array = []\n    let temp = {}\n    let lastId = ''\n    messages.forEach((item, index) => {\n      if (temp.hasOwnProperty('_id')) {\n        if (item.sender._id === lastId) {\n          temp.messages = [...temp.messages, item.content]\n        } else {\n          array = [...array, temp]\n          temp = {}\n          temp._id = item.sender._id\n          temp.username = item.sender.username\n          temp.firstname = item.sender.firstname\n          temp.lastname = item.sender.lastname\n          temp.imageUrl = item.sender.imageUrl\n          temp.messages = [item.content]\n          lastId = item.sender._id\n        }\n      } else {\n        if (index !== 0) {\n          array = [...array, temp]\n        }\n        temp = {}\n\n        temp._id = item.sender._id\n        temp.username = item.sender.username\n        temp.firstname = item.sender.firstname\n        temp.lastname = item.sender.lastname\n        temp.imageUrl = item.sender.imageUrl\n        temp.messages = [item.content]\n        lastId = item.sender._id\n      }\n\n    })\n\n    return [...array, temp]\n  }\n\n  mutateReadMessage = messageId =>\n    client\n      .mutate({\n        mutation: M_READ_MESSAGE,\n        variables: { messageId }\n      })\n      .then(({ data: { readMessage } }) => {\n        if (!readMessage) console.log('Failed to read message')\n      })\n      .catch(() => { })\n\n  sendMessage = e => {\n    if (!e.currentTarget.value) {\n      e.preventDefault()\n      return\n    }\n\n    const { conferenceState } = this.props\n\n    if (!conferenceState.idChatUser) {\n      returnError('sendMessage', {\n        error: '',\n        errorMessage: 'Please choose receiver'\n      })\n      return false\n    }\n\n    if (e.keyCode === 13) {\n      client\n        .mutate({\n          mutation: M_SEND_MESSAGE,\n          variables: {\n            conferenceId: conferenceState.conference._id,\n            content: e.currentTarget.value,\n            receiver: conferenceState.idChatUser\n          }\n        })\n        .then(({ data: { sendMessage } }) => {\n          if (sendMessage) {\n            this.refs['input-message'].handleReset()\n          } else {\n            return newNotification('An error occurred while sending message', 'danger')\n          }\n        })\n        .catch(error =>\n          returnError('sendMessage', {\n            error,\n            errorMessage: 'Please input message!'\n          })\n        )\n    }\n\n    e.preventDefault()\n  }\n\n  autoScrollBottom = () => {\n    if (this.refs['end-message']) {\n      this.refs['end-message'].scrollIntoView()\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      props: { conferenceState },\n      state: { currentId }\n    } = this\n\n    if (conferenceState.idChatUser !== currentId) {\n      this.subscriber.unsubscribe()\n      this.queryMessages()\n      this.subscribeMessages()\n    }\n\n    this.autoScrollBottom()\n  }\n\n  componentWillUnmount() {\n    // Unsibscribe subscription\n    this.subscriber.unsubscribe();\n  }\n\n  handleCloseBox = () => {\n    this.props.conferenceState.setState({\n      idChatUser: null,\n      isShowBoxChat: false,\n      infoChatUser: {}\n    })\n  }\n\n\n  render() {\n    const { conferenceState } = this.props\n\n    return (\n      <div className='wrapper-box-message'>\n        <div className='box-message'>\n          <div className='box-message-head'>\n            <div className='info-user'>\n              <AvatarComponent {...conferenceState.infoChatUser} isShowTooltip={false} size={30} />\n              <p className='name'>{conferenceState.infoChatUser.name}</p>\n            </div>\n            <div className='action'>\n              <img src={closeIcon} alt='icon' onClick={this.handleCloseBox} />\n            </div>\n          </div>\n          <div className='box-message-body'>\n            {\n              this.state.messageConvert.map((item, index) => {\n                return item._id === conferenceState.myUserId ? (\n                  <RightMessage key={index} data={item} />\n                ) : <LeftMessage key={index} data={item} />\n              })\n            }\n            <div className='end-message' ref='end-message'></div>\n          </div>\n          <div className='box-message-input'>\n            <Input.TextArea\n              id='input-message'\n              className='chat-inbox'\n              placeholder='Enter chat messages here'\n              ref='input-message'\n              onPressEnter={this.sendMessage}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BoxMessage"]},"metadata":{},"sourceType":"module"}