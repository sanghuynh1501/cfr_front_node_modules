{"ast":null,"code":"import _objectSpread from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { ApolloClient } from 'apollo-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { ApolloLink, split } from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { appConstants } from '@constants';\nimport * as uuid from 'uuid';\nvar pathname = window.location.pathname;\nvar matchRoom = pathname.match(/(\\/cfr\\/conference\\/)([\\w.]{5,40}|\\d{3}-\\d{3}-\\d{3})/g);\nvar session = uuid.v1(); // Authentication\n\nvar authLink = new ApolloLink(function (operation, forward) {\n  operation.setContext(function (_ref) {\n    var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        _ref$localToken = _ref.localToken,\n        localToken = _ref$localToken === void 0 ? localStorage.getItem(appConstants.LSKey.userTokenKey) : _ref$localToken;\n\n    if (localToken) {\n      headers[appConstants.LSKey.userTokenKey] = localToken;\n\n      if (matchRoom === null || matchRoom === void 0 ? void 0 : matchRoom.length) {\n        headers['session'] = session;\n      }\n    }\n\n    return {\n      headers: headers\n    };\n  });\n  return forward(operation);\n}); // onError\n\nvar errorLink = onError(function (_ref2) {\n  var graphQLErrors = _ref2.graphQLErrors,\n      networkError = _ref2.networkError;\n\n  if (process.env.NODE_ENV === 'development') {\n    if (graphQLErrors) graphQLErrors.forEach(function (_ref3) {\n      var message = _ref3.message,\n          locations = _ref3.locations,\n          path = _ref3.path;\n      return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n    });\n    if (networkError) console.log(\"[Network error]: \".concat(networkError));\n  }\n}); // Apollo Server connect\n\nvar URN = process.env.REACT_APP_GRAPHQL_URN || \"\".concat(window.location.host, \"/\").concat(process.env.REACT_APP_END_POINT);\nvar httpLink = createUploadLink({\n  uri: \"\".concat(window.location.protocol, \"//\").concat(URN)\n});\nvar wsLink = new WebSocketLink({\n  uri: \"\".concat(window.location.protocol === 'https:' ? 'wss:' : 'ws:', \"//\").concat(URN),\n  options: {\n    reconnect: true,\n    timeout: 30000,\n    connectionParams: function connectionParams() {\n      return _objectSpread({\n        'access-token': window.localStorage.getItem('access-token') || null\n      }, (matchRoom === null || matchRoom === void 0 ? void 0 : matchRoom.length) ? {\n        session: session\n      } : {});\n    }\n  }\n});\nvar terminatingLink = split(function (_ref4) {\n  var query = _ref4.query;\n  var definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink); // Cache\n\nvar cache = new InMemoryCache();\nvar client = new ApolloClient({\n  link: ApolloLink.from([authLink, errorLink, terminatingLink]),\n  cache: cache\n});\nexport { default as gql } from 'graphql-tag';\nexport { client as default, client };\nexport * from './QMStrings';","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/graphql/index.ts"],"names":["ApolloClient","WebSocketLink","getMainDefinition","ApolloLink","split","InMemoryCache","onError","createUploadLink","appConstants","uuid","pathname","window","location","matchRoom","match","session","v1","authLink","operation","forward","setContext","headers","localToken","localStorage","getItem","LSKey","userTokenKey","length","errorLink","graphQLErrors","networkError","process","env","NODE_ENV","forEach","message","locations","path","console","log","URN","REACT_APP_GRAPHQL_URN","host","REACT_APP_END_POINT","httpLink","uri","protocol","wsLink","options","reconnect","timeout","connectionParams","terminatingLink","query","definition","kind","cache","client","link","from","default","gql"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nimport { ApolloLink, split } from 'apollo-link'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { onError } from 'apollo-link-error'\nimport { createUploadLink } from 'apollo-upload-client'\nimport { appConstants } from '@constants'\nimport * as uuid from 'uuid'\n\nconst pathname = window.location.pathname\nconst matchRoom = pathname.match(/(\\/cfr\\/conference\\/)([\\w.]{5,40}|\\d{3}-\\d{3}-\\d{3})/g)\n\nconst session = uuid.v1()\n\n// Authentication\nconst authLink = new ApolloLink((operation, forward) => {\n  operation.setContext(({ headers = {}, localToken = localStorage.getItem(appConstants.LSKey.userTokenKey) }) => {\n    if (localToken) {\n      headers[appConstants.LSKey.userTokenKey] = localToken\n\n      if (matchRoom?.length) {\n        headers['session'] = session\n      }\n    }\n    return {\n      headers\n    }\n  })\n\n  return forward(operation)\n})\n\n// onError\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (process.env.NODE_ENV === 'development') {\n    if (graphQLErrors)\n      graphQLErrors.forEach(({ message, locations, path }) =>\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n      )\n    if (networkError) console.log(`[Network error]: ${networkError}`)\n  }\n})\n\n// Apollo Server connect\nconst URN = process.env.REACT_APP_GRAPHQL_URN || `${window.location.host}/${process.env.REACT_APP_END_POINT}`\n\nconst httpLink = createUploadLink({\n  uri: `${window.location.protocol}//${URN}`\n})\n\nconst wsLink = new WebSocketLink({\n  uri: `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${URN}`,\n  options: {\n    reconnect: true,\n    timeout: 30000,\n    connectionParams: () => ({\n      'access-token': window.localStorage.getItem('access-token') || null,\n      ...(matchRoom?.length\n        ? {\n          session\n        }\n        : {})\n    })\n  }\n})\n\nconst terminatingLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n  },\n  wsLink,\n  httpLink\n)\n\n// Cache\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([authLink, errorLink, terminatingLink]),\n  cache\n})\n\nexport { default as gql } from 'graphql-tag'\nexport { client as default, client }\nexport * from './QMStrings'\n"]},"metadata":{},"sourceType":"module"}