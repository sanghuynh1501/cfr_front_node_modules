{"ast":null,"code":"import _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/media/Video.jsx\";\nimport React from 'react';\nimport { JitsiMeetJS } from '../core';\n\nvar Video = /*#__PURE__*/function (_React$Component) {\n  _inherits(Video, _React$Component);\n\n  var _super = _createSuper(Video);\n\n  function Video(props) {\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    _this = _super.call(this, props);\n\n    _this._attachTrack = function (videoTrack) {\n      if (videoTrack) videoTrack.attach(_this._videoElement);\n    };\n\n    _this._detachTrack = function (videoTrack) {\n      if (_this._videoElement && videoTrack) {\n        videoTrack.removeAllListeners(JitsiMeetJS.events.track.TRACK_MUTE_CHANGED);\n        videoTrack.removeAllListeners(JitsiMeetJS.events.track.TRACK_VIDEOTYPE_CHANGED);\n        videoTrack.removeAllListeners(JitsiMeetJS.events.track.NO_DATA_FROM_SOURCE);\n        videoTrack.detach(_this._videoElement);\n      }\n    };\n\n    _this._onVideoPlaying = function () {\n      var videoTrack = _this.props.videoTrack;\n\n      if (videoTrack && !videoTrack.videoStarted) {\n        _this.setState({\n          videoStarted: true\n        });\n      }\n    };\n\n    _this._setVideoElement = function (element) {\n      _this._videoElement = element;\n    };\n\n    _this.state = {\n      videoStarted: _this.props.videoTrack.videoStarted\n    };\n    _this._videoElement = null;\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._videoElement) {\n        this._videoElement.volume = 0;\n        this._videoElement.onplaying = this._onVideoPlaying;\n      }\n\n      this._attachTrack(this.props.videoTrack);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._detachTrack(this.props.videoTrack);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (this.props.videoTrack !== nextProps.videoTrack) {\n        this._detachTrack(this.props.videoTrack);\n\n        this._attachTrack(nextProps.videoTrack);\n      }\n\n      return false;\n    } // *_:\n\n  }, {\n    key: \"render\",\n    // *_:\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"video\", Object.assign({\n        autoPlay: true,\n        id: this.props.id,\n        ref: this._setVideoElement,\n        width: \"100%\",\n        height: \"100%\"\n      }, this.props.otherProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Video;\n}(React.Component);\n\nexport { Video as default };","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/jitsi/media/Video.jsx"],"names":["React","JitsiMeetJS","Video","props","_attachTrack","videoTrack","attach","_videoElement","_detachTrack","removeAllListeners","events","track","TRACK_MUTE_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","detach","_onVideoPlaying","videoStarted","setState","_setVideoElement","element","state","volume","onplaying","nextProps","id","otherProps","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,SAA5B;;IAEqBC,K;;;;;AACnB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAiCnBC,YAjCmB,GAiCJ,UAAAC,UAAU,EAAI;AAC3B,UAAIA,UAAJ,EAAgBA,UAAU,CAACC,MAAX,CAAkB,MAAKC,aAAvB;AACjB,KAnCkB;;AAAA,UAqCnBC,YArCmB,GAqCJ,UAAAH,UAAU,EAAI;AAC3B,UAAI,MAAKE,aAAL,IAAsBF,UAA1B,EAAsC;AACpCA,QAAAA,UAAU,CAACI,kBAAX,CAA8BR,WAAW,CAACS,MAAZ,CAAmBC,KAAnB,CAAyBC,kBAAvD;AACAP,QAAAA,UAAU,CAACI,kBAAX,CAA8BR,WAAW,CAACS,MAAZ,CAAmBC,KAAnB,CAAyBE,uBAAvD;AACAR,QAAAA,UAAU,CAACI,kBAAX,CAA8BR,WAAW,CAACS,MAAZ,CAAmBC,KAAnB,CAAyBG,mBAAvD;AAEAT,QAAAA,UAAU,CAACU,MAAX,CAAkB,MAAKR,aAAvB;AACD;AACF,KA7CkB;;AAAA,UA+CnBS,eA/CmB,GA+CD,YAAM;AAAA,UACdX,UADc,GACC,MAAKF,KADN,CACdE,UADc;;AAGtB,UAAIA,UAAU,IAAI,CAACA,UAAU,CAACY,YAA9B,EAA4C;AAC1C,cAAKC,QAAL,CAAc;AAAED,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACD;AACF,KArDkB;;AAAA,UAuDnBE,gBAvDmB,GAuDA,UAAAC,OAAO,EAAI;AAC5B,YAAKb,aAAL,GAAqBa,OAArB;AACD,KAzDkB;;AAEjB,UAAKC,KAAL,GAAa;AACXJ,MAAAA,YAAY,EAAE,MAAKd,KAAL,CAAWE,UAAX,CAAsBY;AADzB,KAAb;AAIA,UAAKV,aAAL,GAAqB,IAArB;AANiB;AAOlB;;;;wCAEmB;AAClB,UAAI,KAAKA,aAAT,EAAwB;AACtB,aAAKA,aAAL,CAAmBe,MAAnB,GAA4B,CAA5B;AACA,aAAKf,aAAL,CAAmBgB,SAAnB,GAA+B,KAAKP,eAApC;AACD;;AAED,WAAKZ,YAAL,CAAkB,KAAKD,KAAL,CAAWE,UAA7B;AACD;;;2CAEsB;AACrB,WAAKG,YAAL,CAAkB,KAAKL,KAAL,CAAWE,UAA7B;AACD;;;0CAEqBmB,S,EAAW;AAC/B,UAAI,KAAKrB,KAAL,CAAWE,UAAX,KAA0BmB,SAAS,CAACnB,UAAxC,EAAoD;AAClD,aAAKG,YAAL,CAAkB,KAAKL,KAAL,CAAWE,UAA7B;;AACA,aAAKD,YAAL,CAAkBoB,SAAS,CAACnB,UAA5B;AACD;;AAED,aAAO,KAAP;AACD,K,CAED;;;;AA4BA;6BAES;AACP,0BACE;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,EAAE,EAAE,KAAKF,KAAL,CAAWsB,EAFjB;AAGE,QAAA,GAAG,EAAE,KAAKN,gBAHZ;AAIE,QAAA,KAAK,EAAC,MAJR;AAKE,QAAA,MAAM,EAAC;AALT,SAMM,KAAKhB,KAAL,CAAWuB,UANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAUD;;;;EAzEgC1B,KAAK,CAAC2B,S;;SAApBzB,K","sourcesContent":["import React from 'react'\nimport { JitsiMeetJS } from '../core'\n\nexport default class Video extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      videoStarted: this.props.videoTrack.videoStarted\n    }\n\n    this._videoElement = null\n  }\n\n  componentDidMount() {\n    if (this._videoElement) {\n      this._videoElement.volume = 0\n      this._videoElement.onplaying = this._onVideoPlaying\n    }\n\n    this._attachTrack(this.props.videoTrack)\n  }\n\n  componentWillUnmount() {\n    this._detachTrack(this.props.videoTrack)\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (this.props.videoTrack !== nextProps.videoTrack) {\n      this._detachTrack(this.props.videoTrack)\n      this._attachTrack(nextProps.videoTrack)\n    }\n\n    return false\n  }\n\n  // *_:\n\n  _attachTrack = videoTrack => {\n    if (videoTrack) videoTrack.attach(this._videoElement)\n  }\n\n  _detachTrack = videoTrack => {\n    if (this._videoElement && videoTrack) {\n      videoTrack.removeAllListeners(JitsiMeetJS.events.track.TRACK_MUTE_CHANGED)\n      videoTrack.removeAllListeners(JitsiMeetJS.events.track.TRACK_VIDEOTYPE_CHANGED)\n      videoTrack.removeAllListeners(JitsiMeetJS.events.track.NO_DATA_FROM_SOURCE)\n\n      videoTrack.detach(this._videoElement)\n    }\n  }\n\n  _onVideoPlaying = () => {\n    const { videoTrack } = this.props\n\n    if (videoTrack && !videoTrack.videoStarted) {\n      this.setState({ videoStarted: true })\n    }\n  }\n\n  _setVideoElement = element => {\n    this._videoElement = element\n  }\n\n  // *_:\n\n  render() {\n    return (\n      <video\n        autoPlay\n        id={this.props.id}\n        ref={this._setVideoElement}\n        width='100%'\n        height='100%'\n        {...this.props.otherProps}\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}