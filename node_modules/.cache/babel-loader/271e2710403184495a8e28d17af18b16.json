{"ast":null,"code":"import _toConsumableArray from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/ChatCollapse/MessagesBox.jsx\";\n\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { client, Q_MESSAGES, S_ON_MESSAGE, M_READ_MESSAGE } from '@graphql';\nimport { returnError } from '@utils';\nimport Right from './Right';\nimport Left from './Left';\nvar MessageBox = (_dec = inject(function (_ref) {\n  var stores = _ref.stores;\n  return stores;\n}), _dec(_class = observer(_class = (_temp = /*#__PURE__*/function (_React$Component) {\n  _inherits(MessageBox, _React$Component);\n\n  var _super = _createSuper(MessageBox);\n\n  function MessageBox(props) {\n    var _this;\n\n    _classCallCheck(this, MessageBox);\n\n    _this = _super.call(this, props);\n\n    _this.queryMessages = function () {\n      return client.query({\n        query: Q_MESSAGES,\n        variables: {\n          conferenceId: _this.props.conferenceState.conference._id,\n          first: 100 + _this.state.cursor,\n          offset: _this.state.cursor,\n          withUser: _this.props.chatId\n        },\n        fetchPolicy: 'network-only'\n      }).then(function (_ref2) {\n        var messages = _ref2.data.messages;\n\n        _this.setState({\n          messages: _this.getMessageToday(messages)\n        });\n      }).catch(function (error) {\n        return returnError('messages', {\n          error: error,\n          errorMessage: 'An error occurred while loading messages'\n        });\n      });\n    };\n\n    _this.getMessageToday = function (message) {\n      var date = new Date();\n      var timestamp = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n      return message.filter(function (item) {\n        return item.sentAt >= timestamp;\n      });\n    };\n\n    _this.scrollToBottom = function () {\n      _this.messagesEnd.scrollIntoView();\n    };\n\n    _this.mutateReadMessage = function (messageId) {\n      return client.mutate({\n        mutation: M_READ_MESSAGE,\n        variables: {\n          messageId: messageId\n        }\n      }).then(function (_ref3) {\n        var readMessage = _ref3.data.readMessage;\n        if (!readMessage) console.log('Failed to read message');\n      }).catch(function () {});\n    };\n\n    _this.state = {\n      cursor: 0,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(MessageBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.queryMessages();\n      this.scrollToBottom();\n      this.subscriber = client.subscribe({\n        query: S_ON_MESSAGE,\n        variables: {\n          conferenceId: this.props.conferenceState.conference._id,\n          withUser: this.props.chatId\n        },\n        fetchPolicy: 'network-only'\n      }).subscribe(function (_ref4) {\n        var onMessage = _ref4.data.onMessage;\n\n        _this2.setState(function (prevState) {\n          return {\n            messages: [].concat(_toConsumableArray(prevState.messages), [onMessage])\n          };\n        }, function () {\n          if (onMessage.sender._id !== _this2.props.conferenceState.myUserId) _this2.mutateReadMessage(onMessage.messageId);\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.currentTab) {\n        this.scrollToBottom();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }, this.state.messages.map(function (item, index) {\n        return item.sender._id === _this3.props.conferenceState.myUserId ? /*#__PURE__*/React.createElement(Right, {\n          key: index,\n          data: item,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }\n        }) : /*#__PURE__*/React.createElement(Left, {\n          key: index,\n          data: item,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }\n        });\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          float: 'left',\n          clear: 'both'\n        },\n        ref: function ref(el) {\n          _this3.messagesEnd = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return MessageBox;\n}(React.Component), _temp)) || _class) || _class);\nexport default MessageBox;","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/ChatCollapse/MessagesBox.jsx"],"names":["React","inject","observer","client","Q_MESSAGES","S_ON_MESSAGE","M_READ_MESSAGE","returnError","Right","Left","MessageBox","stores","props","queryMessages","query","variables","conferenceId","conferenceState","conference","_id","first","state","cursor","offset","withUser","chatId","fetchPolicy","then","messages","data","setState","getMessageToday","catch","error","errorMessage","message","date","Date","timestamp","getFullYear","getMonth","getDate","getTime","filter","item","sentAt","scrollToBottom","messagesEnd","scrollIntoView","mutateReadMessage","messageId","mutate","mutation","readMessage","console","log","subscriber","subscribe","onMessage","prevState","sender","myUserId","currentTab","map","index","float","clear","el","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { client, Q_MESSAGES, S_ON_MESSAGE, M_READ_MESSAGE } from '@graphql'\nimport { returnError } from '@utils'\nimport Right from './Right'\nimport Left from './Left'\n\n@inject(({ stores }) => stores)\n@observer\nclass MessageBox extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      cursor: 0,\n      messages: []\n    }\n  }\n\n  componentDidMount () {\n    this.queryMessages()\n    this.scrollToBottom()\n\n    this.subscriber = client\n      .subscribe({\n        query: S_ON_MESSAGE,\n        variables: {\n          conferenceId: this.props.conferenceState.conference._id,\n          withUser: this.props.chatId\n        },\n        fetchPolicy: 'network-only'\n      })\n      .subscribe(({ data: { onMessage } }) => {\n        this.setState(\n          prevState => ({\n            messages: [...prevState.messages, onMessage]\n          }),\n          () => {\n            if (onMessage.sender._id !== this.props.conferenceState.myUserId)\n              this.mutateReadMessage(onMessage.messageId)\n          }\n        )\n      })\n  }\n\n  componentDidUpdate () {\n    if (this.props.currentTab) {\n      this.scrollToBottom()\n    }\n  }\n\n  queryMessages = () =>\n    client\n      .query({\n        query: Q_MESSAGES,\n        variables: {\n          conferenceId: this.props.conferenceState.conference._id,\n          first: 100 + this.state.cursor,\n          offset: this.state.cursor,\n          withUser: this.props.chatId\n        },\n        fetchPolicy: 'network-only'\n      })\n      .then(({ data: { messages } }) => {\n        this.setState({ messages: this.getMessageToday(messages) })\n      })\n      .catch(error =>\n        returnError('messages', {\n          error,\n          errorMessage: 'An error occurred while loading messages'\n        })\n      )\n\n  getMessageToday = message => {\n    const date = new Date()\n    const timestamp = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate()\n    ).getTime()\n    return message.filter(item => item.sentAt >= timestamp)\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView()\n  }\n\n  mutateReadMessage = messageId =>\n    client\n      .mutate({\n        mutation: M_READ_MESSAGE,\n        variables: { messageId }\n      })\n      .then(({ data: { readMessage } }) => {\n        if (!readMessage) console.log('Failed to read message')\n      })\n      .catch(() => {})\n\n  render () {\n    return (\n      <div className='message-box'>\n        {this.state.messages.map((item, index) => {\n          return item.sender._id === this.props.conferenceState.myUserId ? (\n            <Right key={index} data={item} />\n          ) : (\n            <Left key={index} data={item} />\n          )\n        })}\n        <div\n          style={{ float: 'left', clear: 'both' }}\n          ref={el => {\n            this.messagesEnd = el\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default MessageBox\n"]},"metadata":{},"sourceType":"module"}