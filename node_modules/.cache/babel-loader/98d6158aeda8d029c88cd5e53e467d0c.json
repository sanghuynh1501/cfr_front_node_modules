{"ast":null,"code":"import \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _classCallCheck from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/sang/js/cfr-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/tabs/ChatComponents/Input.jsx\";\n\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nimport { Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { appConstants } from '@constants';\nimport { client, M_SEND_MESSAGE } from '@graphql';\nimport { newNotification, returnError } from '@utils';\n\nvar ChatInput = withRouter(_class = (_temp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ChatInput, _React$PureComponent);\n\n  var _super = _createSuper(ChatInput);\n\n  function ChatInput() {\n    var _this;\n\n    _classCallCheck(this, ChatInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.inputRef = React.createRef();\n    _this.state = {\n      ePickerVisible: false,\n      value: ''\n    };\n\n    _this.handleClickOutside = function (event) {\n      if (_this.refs.picker && !_this.refs.picker.contains(event.target) && event.target.outerHTML.search(\"<span role=\\\"img\\\" aria-label=\\\"\\\">\".concat(localStorage.getItem(appConstants.LSKey.lastEmojiKey), \"</span>\")) === -1) {\n        _this.openEmojiPicker();\n      }\n    };\n\n    _this.onInputChange = function (_ref) {\n      var value = _ref.target.value;\n\n      _this.setState({\n        value: value\n      });\n    };\n\n    _this.SendMess = function (e) {\n      e.preventDefault();\n      client.mutate({\n        mutation: M_SEND_MESSAGE,\n        variables: {\n          conferenceId: _this.props.conferenceId,\n          content: _this.state.value,\n          receiver: _this.props.withUser._id\n        }\n      }).then(function (_ref2) {\n        var sendMessage = _ref2.data.sendMessage;\n\n        if (sendMessage) {\n          return _this.setState({\n            value: ''\n          });\n        } else {\n          return newNotification('An error occurred while sending message', 'danger');\n        }\n      }).catch(function (error) {\n        return returnError('sendMessage', {\n          error: error,\n          errorMessage: 'Please input message!'\n        });\n      });\n    };\n\n    _this.openEmojiPicker = function () {\n      _this.setState(function (prevState) {\n        return {\n          ePickerVisible: !prevState.ePickerVisible\n        };\n      });\n    };\n\n    _this.onSelectEmoji = function (emoji) {\n      localStorage.setItem('lastEmoji', emoji.native);\n\n      _this.setState(function (prevState) {\n        return {\n          value: prevState.value + emoji.native\n        };\n      });\n\n      _this.inputRef.current.input.focus();\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousedown', this.handleClickOutside);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var lastEmoji = localStorage.getItem('lastEmoji');\n      var i18n = this.props.i18n;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.ePickerVisible ? /*#__PURE__*/React.createElement(\"div\", {\n        ref: \"picker\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Picker, {\n        set: \"facebook\",\n        sheetSize: 32,\n        onSelect: this.onSelectEmoji,\n        style: {\n          position: 'fixed',\n          bottom: 115,\n          right: 15\n        },\n        showPreview: false,\n        showSkinTones: false,\n        emoji: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      })) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatsection-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        className: \"textform\",\n        onSubmit: this.SendMess,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(_Input, {\n        className: \"textinput\",\n        placeholder: i18n.t('placeholderMessage'),\n        value: this.state.value,\n        onChange: this.onInputChange,\n        ref: this.inputRef,\n        suffix: /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          className: \"epicker-button\",\n          onClick: this.openEmojiPicker,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 19\n          }\n        }, lastEmoji || 'ðŸ™‚')),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return ChatInput;\n}(React.PureComponent), _temp)) || _class;\n\nexport default withTranslation()(ChatInput);","map":{"version":3,"sources":["/home/sang/js/cfr-frontend/src/pages/conference2/collab-panel/tabs/ChatComponents/Input.jsx"],"names":["React","withTranslation","withRouter","Picker","appConstants","client","M_SEND_MESSAGE","newNotification","returnError","ChatInput","inputRef","createRef","state","ePickerVisible","value","handleClickOutside","event","refs","picker","contains","target","outerHTML","search","localStorage","getItem","LSKey","lastEmojiKey","openEmojiPicker","onInputChange","setState","SendMess","e","preventDefault","mutate","mutation","variables","conferenceId","props","content","receiver","withUser","_id","then","sendMessage","data","catch","error","errorMessage","prevState","onSelectEmoji","emoji","setItem","native","current","input","focus","document","addEventListener","lastEmoji","i18n","position","bottom","right","t","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router-dom'\nimport { Input } from 'antd'\nimport { Picker } from 'emoji-mart'\n\nimport 'emoji-mart/css/emoji-mart.css'\n\nimport { appConstants } from '@constants'\nimport { client, M_SEND_MESSAGE } from '@graphql'\nimport { newNotification, returnError } from '@utils'\n\n@withRouter\nclass ChatInput extends React.PureComponent {\n  inputRef = React.createRef()\n\n  state = {\n    ePickerVisible: false,\n    value: ''\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside)\n  }\n\n  handleClickOutside = event => {\n    if (\n      this.refs.picker &&\n      !this.refs.picker.contains(event.target) &&\n      event.target.outerHTML.search(\n        `<span role=\"img\" aria-label=\"\">${localStorage.getItem(\n          appConstants.LSKey.lastEmojiKey\n        )}</span>`\n      ) === -1\n    ) {\n      this.openEmojiPicker()\n    }\n  }\n\n  onInputChange = ({ target: { value } }) => {\n    this.setState({ value })\n  }\n\n  SendMess = e => {\n    e.preventDefault()\n    client\n      .mutate({\n        mutation: M_SEND_MESSAGE,\n        variables: {\n          conferenceId: this.props.conferenceId,\n          content: this.state.value,\n          receiver: this.props.withUser._id\n        }\n      })\n      .then(({ data: { sendMessage } }) => {\n        if (sendMessage) {\n          return this.setState({ value: '' })\n        } else {\n          return newNotification(\n            'An error occurred while sending message',\n            'danger'\n          )\n        }\n      })\n      .catch(error =>\n        returnError('sendMessage', {\n          error,\n          errorMessage: 'Please input message!'\n        })\n      )\n  }\n\n  openEmojiPicker = () => {\n    this.setState(prevState => ({\n      ePickerVisible: !prevState.ePickerVisible\n    }))\n  }\n\n  onSelectEmoji = emoji => {\n    localStorage.setItem('lastEmoji', emoji.native)\n    this.setState(prevState => ({ value: prevState.value + emoji.native }))\n    this.inputRef.current.input.focus()\n  }\n\n  render() {\n    const lastEmoji = localStorage.getItem('lastEmoji')\n    const { i18n } = this.props\n\n    return (\n      <>\n        {this.state.ePickerVisible ? (\n          <div ref='picker'>\n            <Picker\n              set='facebook'\n              sheetSize={32}\n              onSelect={this.onSelectEmoji}\n              style={{ position: 'fixed', bottom: 115, right: 15 }}\n              showPreview={false}\n              showSkinTones={false}\n              emoji=''\n            />\n          </div>\n        ) : null}\n        <div className='chatsection-input'>\n          <form className='textform' onSubmit={this.SendMess}>\n            <Input\n              className='textinput'\n              placeholder={i18n.t('placeholderMessage')}\n              value={this.state.value}\n              onChange={this.onInputChange}\n              ref={this.inputRef}\n              suffix={\n                <button\n                  type='button'\n                  className='epicker-button'\n                  onClick={this.openEmojiPicker}\n                >\n                  <span role='img' aria-label=''>\n                    {lastEmoji || 'ðŸ™‚'}\n                  </span>\n                </button>\n              }\n            />\n          </form>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default withTranslation()(ChatInput)\n"]},"metadata":{},"sourceType":"module"}